Producer JS
-----------

The `producer` module extends Grammar classes, adding a `produce()` method 
to generate target code for the node.

The compiler calls the `.produce()` method of the root 'Module' node 
in order to return the compiled code for the entire tree.

We extend the Grammar classes, so this module require the `Grammar` module.

    var Grammar = require('./Grammar')



Utility 
=======

    var NL = '\n' # New Line constant
    var util = require('./util')
/!

    declare on String 
      translate

    declare log
    declare on log
      error, warning

!/

Operator Mapping
================

Many LiteScript operators can be easily mapped one-to-one with their JavaScript equivalents.

    var OPER_TRANSLATION =

      'no':           '!'
      'not':          '!'
      'unary -':      '-'
      'unary +':      '+'

      'type of':      'typeof'
      'instance of':  'instanceof'

      'is':           '==='
      'isnt':         '!=='
      '<>':           '!=='
      'and':          '&&'
      'but':          '&&'
      'or':           '||'

      'mod':          '%'
      'has property': 'in'

      'bitwise and':  '&'
      'bitwise or' :  '|'
      'bitwise xor':  '^'
      'bitwise not':  '~'

    function operTranslate(name:string)
      return name.translate(OPER_TRANSLATION)


---------------------------------
outPrevLinesComments helper method: output comments from previous lines
before the statement

    method outPrevLinesComments() of Grammar.ASTBase

/!

      declare valid me.lexer.lastOutCommentLine
      declare valid me.lexer.LineTypes.CODE 
      declare valid me.lexer.infoLines
      declare infoLine
      declare on infoLine
          indent,text      
!/

      var inx = me.lineInx
      if not inx or inx<0 
        return

      if not me.lexer.lastOutCommentLine
        me.lexer.lastOutCommentLine = -1

Check for comments in the previous lines of code. 

      var preInx = inx - 1
      while preInx>me.lexer.lastOutCommentLine and me.lexer.infoLines[preInx].type isnt me.lexer.LineTypes.CODE 
        preInx -= 1

Output theese comments and also blank lines

      preInx += 1
      while preInx<inx
        var infoLine = me.lexer.infoLines[preInx] 
        if infoLine.text
          me.out {NLI:infoLine.indent},{COMMENT:infoLine.text}
        else
          me.out NL # blank line
        preInx += 1
      #loop

      me.lexer.lastOutCommentLine = preInx
    #end method


getEOLComment: get the comment at the end of the line

    method getEOLComment() of Grammar.Statement

Check for "postfix" comments. These are comments that occur at the end of the line,
such as `a = 1 #comment`. We want to try to add these at the end of the current JavaScript line.

/!

        declare valid me.lexer.lastOutCommentLine
        declare valid me.lexer.LineTypes.CODE 
        declare valid me.lexer.infoLines
        
        declare infoLine
        declare on infoLine
            indent,text,tokens      
        
        declare lastToken
        declare on lastToken
          type,value
!/

        var inx = me.lineInx
        var infoLine = me.lexer.infoLines[inx]
        if infoLine.tokens and infoLine.tokens.length
            var lastToken = infoLine.tokens[infoLine.tokens.length-1]
            if lastToken.type is 'COMMENT'
                return {COMMENT:lastToken.value}




JavaScript Producer Functions
==============================

###xx Extend class Grammar.Body ###

A "Body" is an ordered list of statements.

"Body"s lines have all the same indent, representing a scope.

"Body"s are used for example, to parse an `if` statement body and `else` body, `for` loops, etc.

    method produce() of Grammar.Body

      for statement in me.statements
        statement.produce()
      #end for statements

End with a new line, indented as it was *before the block* (ready to add the closing `}`)
This is important, if the last statement has EOL comments for example, we NEED to start a new line

      me.out NL



-------------------------------------
### Statement ###

`Statement` objects call their specific statement node's `produce()` method
after adding any comment lines preceding the statement

    method produce() of Grammar.Statement

/!

      declare valid me.lexer.lastOriginalCodeComment
      declare valid me.lexer.LineTypes.CODE 
      declare valid me.lexer.infoLines
      declare valid me.statement.skipSemiColon
!/

add comment lines, in the same position as the source

      me.outPrevLinesComments()

To ease reading of compiled code, add original Lite line as comment 
(except for EndStatement ant others which produdce it)

      if me.lexer.lastOriginalCodeComment<me.lineInx
        if not (me.statement instanceof Grammar.ClassDeclaration or me.statement instanceof Grammar.VarStatement or me.statement instanceof Grammar.CompilerStatement or me.statement instanceof Grammar.DeclareStatement or me.statement instanceof Grammar.AssignmentStatement) 
          me.out NL,{COMMENT: me.lexer.infoLines[me.lineInx].text}
      me.lexer.lastOriginalCodeComment = me.lineInx

Start a new line and
call the specific statement (if,for,print,if,function,class,etc) .produce()

      me.out NL, me.statement

      if not me.statement.skipSemiColon
        me.out ";", me.getEOLComment()

-------------------------------------
### SingleLineStatement ###

`SingleLineStatement` are a subclass of statements. This statements are normally defined in one single line.
They're valid statements for single line `if-then`. Example: `if index < 0 then throw 'invalid index'`
As opposed to *Statement* SingleLineStatement do not output comments or ending ';'

    method produce() of Grammar.SingleLineStatement

      #call the specific statement (print,if,function,class,etc) produce()
      me.statement.produce()

---------------------------------
### ThrowStatement ###

    method produce() of Grammar.ThrowStatement
        if me.specifier is 'fail'
          me.out "throw new Error(", me.expr,")"
        else
          me.out "throw ", me.expr


### ReturnStatement ###

    method produce() of Grammar.ReturnStatement
        me.out "return ", me.expr



### FunctionCall ###

    method produce() of Grammar.FunctionCall

/!  

      declare valid me.name.produce
      declare valid me.name.executes
!/

me.name is a VariableRef. A VariableRef can contain accesors, even FunctionAccess.

      me.name.produce()

If the last Accessor is FunctionAccess, the js "function call" parentheses
were included in the output by VariableRef.accessors.produce(). 
The output js statement is already a function call.

      if me.name.executes
        return # a function call already output

if not, let's output js fn-call '()' accesor, and any without-parens arguments

      me.out "(",{CSL:me.args},")"



### Operand ###

`Operand:
  |NumberLiteral|StringLiteral|RegExpLiteral
  |ParenExpression|ArrayLiteral|ObjectLiteral|FunctionDeclaration
  |VariableRef

A `Operand` is the left or right part of a binary oper
or the only Operand of a unary oper.

    method produce() of Grammar.Operand

      me.out me.name, me.accessors

    #end Operand


### UnaryOper ###

`UnaryOper: ('-'|new|type of|not|no|bitwise not) `

A Unary Oper is an operator acting on a single operand.
Unary Oper inherits from Oper, so both are `instance of Oper`

Examples:
1) `not`     *boolean negation*     `if not a is b`
2) `-`       *numeric unary minus*  `-(4+3)`
3) `new`     *instantiation*        `x = new classNumber[2]`
4) `type of` *type name access*     `type of x is classNumber[2]` 
5) `no`      *'falsey' check*       `if no options then options={}` 
6) `bitwise not` *bit-unary-negation* `a = bitwise not xC0 + 5`

    method produce() of Grammar.UnaryOper
      
/!

      declare valid me.right.operandCount
!/

      var translated = operTranslate(me.name)

if it is boolean not, add parentheses, because js as a different precedence for boolean not
(prettier generated code) do not add () for "falsey" variable check

      if translated is "!" and not (me.name is "no" and me.right.operandCount is 1)
        var prepend ="("
        var append=")"

add a space if the unary operator is a word. Example `typeof`

      if /\w/.test(translated) 
        translated+=" "

      me.out translated, prepend, me.right, append


### Oper ###

    method produce() of Grammar.Oper

      var prepend=""
      var oper = me.name
      var append=""

Consider 'negated' flag

      if me.negated # NEGATED

if NEGATED and the oper is `is` we convert it to 'isnt'.
'isnt' will be translated to !==

        if oper is 'is' # Negated is ---> isnt --> !==
          oper = 'isnt'

else -if NEGATED- we add `!( )` to the expression

        else 
          prepend ="!("
          append=")"

      #end if - NEGATED

Check for special cases: 

*'in' operator, requires swapping left and right operands and to use `.indexOf(...)>=0`
example: `x in [1,2,3]` -> `[1,2,3].indexOf(x)>=0`
example: `x not in [1,2,3]` -> `[1,2,3].indexOf(x)==-1`
example: `char not in myString` -> `myString.indexOf(char)==-1`
example (`arguments` pseudo-array): `'lite' not in arguments` -> `Array.prototype.slice.call(arguments).indexOf(char)==-1`

      if me.name is 'in'

          if me.negated 
            var desiredResult = "===-1"
          else
            desiredResult = ">=0"

          me.out me.right,".indexOf(",me.left,")",desiredResult

fix pseudo-array 'arguments'          

          me.outCode.currLine = me.outCode.currLine.replace(/\barguments.indexOf\(/,'Array.prototype.slice.call(arguments).indexOf(')      

*'has property' operator, requires swapping left and right operands and to use js:`in`

      else if me.name is 'has property'

          me.out me.right," in ",me.left

*`^` operator, requires calling Math.pow(left,right)
example: `2^8` --> `Math.pow(2,8)`

      else if me.name is '^'

          me.out prepend, "Math.pow(", me.left, ',', me.right, ")", append

else we have a direct transpilable operator. 
We out: left,operator,right

      else

          me.out prepend, me.left, ' ', operTranslate(oper), ' ', me.right , append

      #end if


### Expression ###

    method produce(options) of Grammar.Expression

/!

      declare on options
        negated
!/

Produce the expression body, negated if options={negated:true}

      if no options
        options={} #default

      var prepend=""
      var append=""
      if options.negated

(prettier generated code) Try to avoid unnecessary parens after '!' 
for example: if the expression is a single variable, as in the 'falsey' check: 
Example: `if no options.log then... ` --> `if (!options.log) {...` 
we don't want: `if (!(options.log)) {...` 

        if me.operandCount is 1 
            #no parens needed
            prepend = "!"
        else
            prepend = "!("
            append = ")"
        #end if
      #end if negated

produce the expression body

      me.out prepend, me.root, append


### NameDeclaration ###

We use the default producer: me.out me.name


### VariableRef ###

`VariableRef: ['--'|'++']NameDeclaration[Accessors]['--'|'++']`

`VariableRef` is a Variable Reference. 

 a VariableRef can include chained 'Accessors', which can:
 *access a property of the object : `.`-> PropertyAccess `[`->IndexAccess
 *assume the variable is a function and perform a function call :  `(`-> FunctionAccess

    method produce() of Grammar.VariableRef

      var varName = me.varName.name

Prefix ++/--, varName, Accessors and postfix ++/--

      me.out me.preIncDec, varName, me.accessors, me.postIncDec


### AssignmentStatement ###

    method produce() of Grammar.AssignmentStatement

      me.out me.lvalue, ' ', operTranslate(me.name), ' ', me.rvalue


### DefaultAssignment ###

    method produce() of Grammar.DefaultAssignment

      me.out "if(!",me.name,') ',me.name," = {}"
      for item in me.list

/!

        declare valid item.assignedValue.root.name
        declare valid item.name
!/

        # for numeric arguments, we must check for 0, in order to allow 0 (falsey) as parameter value
        # numeric: if (!param && param!==0) param=default;
        # non-numeric: if (!param) param=default;
        if item.assignedValue.root.name instanceof Grammar.StringLiteral
          me.out ";",NL,'if(!',me.name,'.',item.name,') ',me.name,".",item.name," = ",item.assignedValue
        else
          me.out ";",NL,"if(",me.name,".",item.name,'===undefined) ',me.name,".",item.name," = ",item.assignedValue

### Accessors ###
=================
We just defer to JavaScript's built in `.` `[ ]` and `( )` accessors

    method produce() of Grammar.Accessors
      me.out me.list

each item in the list is one of:

    method produce() of Grammar.PropertyAccess
      me.out ".",me.name

    method produce() of Grammar.IndexAccess
      me.out "[",me.name,"]"

    method produce() of Grammar.FunctionAccess
      me.out "(",{CSL:me.args},")"


### VarStatement ###

'var' followed by a list of comma separated: var names and optional assignment

    method produce() of Grammar.VarStatement

/!

      declare valid me.keyword
      declare valid me.lexer.options.ES6
      declare valid me.public
!/

      if me.keyword is 'let' and me.lexer.options.ES6
        me.out 'let '

      else
        me.out 'var '

Now, after 'var' or 'let' out one or more comma separated VariableDecls 
  
      me.out {CSL:me.list}

If 'var' was adjectivated 'public', add to module.exports

      if me.public
        for item in me.list
          me.out ";", NL,'exports.',item.name,' = ', item.name,NL


### VariableDecl ###

variable name and optionally assign a value

    method produce() of Grammar.VariableDecl

It's a `var` keyword or we're declaring function parameters.
In any case starts with the variable name
      
        me.out me.name

/!

        declare valid me.keyword
        declare valid me.lexer.options.ES6
        declare valid me.public
!/

If there is an assignment, we output the assignment only if:
a) it's a js 'var' statement, because `var a=3;` is valid js,
b) if it's a function declaration but ES6 is available. 
   ES6 implements 'default' for parameters, so `function myFunc(a=3)` is valid in ES6

        if me.assignedValue 
          if me.parent instanceof Grammar.VarStatement or me.lexer.options.ES6
            me.out ' = ',me.assignedValue

    #end VariableDecl


### IfStatement ###

    method produce() of Grammar.IfStatement
/!

      declare valid me.elseStatement.produce
!/

      me.out "if (", me.conditional, ") {", me.body, NL, "}"

      if me.elseStatement
        me.elseStatement.produce()


### ElseIfStatement ###

    method produce() of Grammar.ElseIfStatement

      me.out NL,"else ", me.nextIf

### ElseStatement ###

    method produce() of Grammar.ElseStatement

      me.out NL,"else {", me.body, NL, "}"

### ForStatement ###

There are 3 variants of `ForStatement` in LiteScript

    method produce() of Grammar.ForStatement

/!
      
      declare iterable:Grammar.Expression
      declare valid me.variant.iterable
      declare valid me.variant.produce
      declare valid me.skipSemiColon
      declare valid iterable.root.name.hasSideEffects
!/

Pre-For code. If required, store the iterable in a temp var.
(prettier generated code) Only if the iterable is a complex expression, 
(if it can have side-effects) we store it in a temp 
var in order to avoid calling it twice. Else, we use it as is.

      var iterable = me.variant.iterable

      if iterable 
        if iterable.operandCount>1 or iterable.root.name.hasSideEffects
          iterable = me.outCode.getUniqueVarName('list')  #unique temp iterable var name
          me.out "var ",iterable,"=",me.variant.iterable,";",NL

      me.variant.produce(iterable)

Since al 3 cases are closed with '}; //comment', we skip statement semicolon

      me.skipSemiColon = true


####Variant 1) 'for each property' to loop over *object property names* 

`ForEachProperty: for each [own] property name-VariableDecl in object-VariableRef`

    method produce(iterable) of Grammar.ForEachProperty

        me.out "for ( var ", me.indexVar, " in ", iterable, ") "
        if me.ownOnly 
          me.out "if (",iterable,".hasOwnProperty(",me.indexVar,")) "

        me.out "{", me.body, "}; // end for each property"


###Variant 2) 'for index=...' to create *numeric loops* 

`ForIndexNumeric: for index-VariableDecl "=" start-Expression [,|;] (while|until) condition-Expression [(,|;) increment-Statement]`

    method produce() of Grammar.ForIndexNumeric

Examples: `for n=0 while n<10`, `for n=0 to 9`
Handle by using a js/C standard for(;;){} loop

/!

        declare valid me.endExpression.produce
!/

        me.out "for( var ",me.indexVar, "=", me.startIndex, "; "

        if me.conditionPrefix is 'to'
            #'for n=0 to 10' -> for(n=0;n<=10;...
            me.out me.indexVar,"<=",me.endExpression

        else # is while|until

produce the condition, negated if the prefix is 'until'

          #for n=0, while n<arr.length  -> for(n=0;n<arr.length;...
          #for n=0, until n >= arr.length  -> for(n=0;!(n>=arr.length);...
          me.endExpression.produce( {negated: me.conditionPrefix is 'until' })

        me.out "; "

if no increment specified, the default is mainVar++

        me.out me.increment or [me.indexVar,"++"]

        me.out "){", me.body, "}; // end for ", me.indexVar


####Variant 3) 'for each index' to loop over *Array indexes and items*

`ForEachInArray: for each [index-VariableDecl,]item-VariableDecl in array-VariableRef`

    method produce(iterable) of Grammar.ForEachInArray

Create a default index var name if none was provided

      var indexVar = me.indexVar
      if no indexVar
        indexVar = me.mainVar.name+'__inx' #default index var name

      me.out "for ( var ", indexVar,"=0; ",indexVar,"<",iterable,".length; ",indexVar,"++) {"
      me.out NL,"    var ",me.mainVar,"=",iterable,"[",indexVar,"];"
      
      me.out me.body, "}; // end for each in ", me.iterable


### WhileUntilExpression ###

    method produce(options) of Grammar.WhileUntilExpression

If the parent ask for a 'while' condition, but this is a 'until' condition,
or the parent ask for a 'until' condition and this is 'while', we must *negate* the condition.

      options = {}
/!

      declare valid me.parent.askFor
      declare valid options.negated
      declare valid me.expr.produce
!/      

      if me.parent.askFor and me.name isnt me.parent.askFor
          options.negated = true

*parent.askFor* is used when the source code was, for example,
`do until Expression` and we need to code: `while(!(Expression))` 
or the code was `loop while Expression` and we need to code: `if (!(Expression)) break` 

Negating the expression is necessary to code a js `while` condition, when what you have
is a `until` condition, since `until x` is equivalent to `while NOT x`

      me.expr.produce(options)


### DoLoop Produce ###

    method produce() of Grammar.DoLoop

Note: **WhileUntilLoop** symbol has **DoLoop** as *prototype*, so this *.produce()* method
is used by both symbols.

Since we only have `while(){}` loops in js, to emulate a post-loop condition
we must count loops and check the post-loop-condition on the 2nd iteration onwards.

This is required for the `continue` keyword to work as expected (to check the post-loop-condition)

/!

      declare valid me.preWhileUntilExpression.lineInx
      declare valid me.postWhileUntilExpression.lineInx
      declare valid me.askFor
!/

      if me.postWhileUntilExpression 

####loop, with post-condition

if it has a post-condition, for example: `do ... loop while x>0`, 
we should *break* on the condition, after the first iteration

Also, we must place both conditions checks on the loop start, and the post-condition first, 
for the `continue` command to work as expected (to go to check the post-condition)

create a var to count iterations

          var loopCountVar = me.outCode.getUniqueVarName('loopCount')
          me.out 'var ',loopCountVar,'=0;',NL

          me.out "while(true){" #start the loop

if there is a post-loop exit condition (while x do:, loop while y),
we must check if it's the 2nd+ iteration, and 'break' on the condition
Example: 
if the original source was: 'do ... loop **while x<10**'
the output should be: `if (loopCountVar++>0 && !(x<10) ) break;`

          me.out {NLI:me.indent+4},{COMMENT:"post-condition: "}, me.lexer.infoLines[me.postWhileUntilExpression.lineInx].text
          # 2nd+ loop iteration, check post-loop condition'
          me.askFor = 'until'
          me.out {NLI:me.indent+4},'if(',loopCountVar,'++>0 && ',me.postWhileUntilExpression,") break;"
      
          me.out {NLI:me.indent+4},{COMMENT:"pre-condition: "},me.lexer.infoLines[me.preWhileUntilExpression.lineInx].text
          me.askFor = 'until'
          me.out {NLI:me.indent+4},'if(',me.preWhileUntilExpression,") break;"


else, optional pre-condition only:
This loops are easier to produce in js

      else

          me.askFor = 'while'
          me.out 'while(',me.preWhileUntilExpression or 'true','){'

      #end if

      me.out NL, me.body 
      me.out NL, "};",{COMMENT:"end loop"}


### DoNothingStatement ###

    method produce() of Grammar.DoNothingStatement
      me.out "null"


### LoopControlStatement ###

This is a very simple class to allow us to use the `break` and `continue` keywords.

    method produce() of Grammar.LoopControlStatement
      me.out me.control

### ParenExpression ###

A `ParenExpression` is just a normal expression surrounded by parentheses.

    method produce() of Grammar.ParenExpression
      me.out "(",me.expr,")"

### ArrayLiteral ###

A `ArrayLiteral` is a definition of a list like `[1, a, 2+3]`. We just pass this through to JavaScript.

    method produce() of Grammar.ArrayLiteral
      me.out "[",{CSL:me.items},"]"

### NameValuePair ###

A `NameValuePair` is a single item in an object definition. Since we copy js for this, we pass this straight through 

    method produce() of Grammar.NameValuePair
      me.out me.name,": ",me.value

### ObjectLiteral ###

A `ObjectLiteral` is an object definition using key/value pairs like `{a:1,b:2}`. 
JavaScript supports this syntax, so we just pass it through. 

    method produce() of Grammar.ObjectLiteral
      me.out "{",{CSL:me.items},"}"

### FreeObjectLiteral ###

A `FreeObjectLiteral` is an object definition using key/value pairs, but in free-form
(one NameValuePair per line, indented, comma is optional)

    method produce() of Grammar.FreeObjectLiteral
      me.out "{",{CSL:me.items, freeForm:true},"}"



### FunctionDeclaration ###

`FunctionDeclaration: '[public][generator] (function|method|constructor) [name] '(' FunctionParameterDecl* ')' Block`

`FunctionDeclaration`s are function definitions. 

`public` prefix causes the function to be included in `module.exports`
`generator` prefix marks a 'generator' function that can be paused by `yield` (js/ES6 function*)

    method produce() of Grammar.FunctionDeclaration

#support old SYNTAX - REMOVE LATER - method xx **of** class

/!

      declare valid me.OLD_SYNTAX_OF
      declare valid me.public
      declare valid me.produceFunction
!/

      if me.OLD_SYNTAX_OF
        me.out me.OLD_SYNTAX_OF,'.prototype.',me.name,'='
        me.produceFunction()  
      else
        me.produceFunction(me.name)

If the function was adjectivated 'public', add to module.exports

      if me.public
        me.out NL,'exports.',me.name,'=',me.name

---------------------------

Helper function *produceFunction(withName)*
this method outs:
- the keyword "function" (followed by '*' if ES6 is enabled and the function was declared as 'generator function')
- the function name if passed
- the parameters 
- the function body 

This method is shared by: 
FunctionDeclaration, ClassDeclaration and AppendToDeclaration (for methods)

    method produceFunction(withName) of Grammar.FunctionDeclaration
       
      me.out "function"

Generators are implemented in ES6 with the "function*" keyword (note the asterisk)

/!

      declare valid me.lexer.options.ES6
      declare valid me.generator 
      declare valid me.body.produce
      declare valid me.exceptionBlock

      declare paramDecl
      declare valid paramDecl.assignedValue 
!/

      if me.generator and me.lexer.options.ES6
        me.out "*"

If a name was passed, produce a nmed function, else a anonymous one

      if withName
        me.out " ",withName

now produce function parameters
       
      me.out "(", {CSL:me.paramsDeclarations}, "){"

if the function has a exception block, insert 'try{'

      if me.exceptionBlock
        me.out " try{"      

We assign default values to arguments if defaults where indicated

      if me.paramsDeclarations
          var defaultsCount=0
          for paramDecl in me.paramsDeclarations

            if paramDecl.assignedValue 
                defaultsCount += 1
                if defaultsCount is 1
                    me.out NL,"    //defaults"
              # for numeric arguments, we must check for 0, in order to allow 0 (falsey) as parameter value
              # numeric: if (!param && param!==0) param=default;
              # non-numeric: if (!param) param=default;
                me.out NL,"    if(",paramDecl.name,'===undefined) ',paramDecl.name," = ",paramDecl.assignedValue,";"
          #end for
          if defaultsCount>1 
            me.out NL,"    //end defaults"
      #end if

now produce function body

      me.body.produce()

close the function

      me.out NL,"}"


--------------------
### PrintStatement ###

`print` is an alias for console.log

    method produce() of Grammar.PrintStatement

      me.out "console.log(",{"CSL":me.args},")"


--------------------
### EndStatement ###

Marks the end of a block. It's just a comment for javascript

    method produce() of Grammar.EndStatement
/!

      declare valid me.lexer.lastOriginalCodeComment
      declare valid me.lexer.infoLines
      declare valid me.skipSemiColon
!/

      if me.lexer.lastOriginalCodeComment<me.lineInx
        me.out {COMMENT: me.lexer.infoLines[me.lineInx].text}
      
      me.skipSemiColon = true

--------------------
### CompilerStatement ###

Out as comments

    method produce() of Grammar.CompilerStatement

      me.outLineAsComment me.lineInx
/!

      declare asked
      declare on asked
        value
      declare valid me.body.produce
      declare valid me.skipSemiColon
!/

if it's a conditional compile, output body is option is Set

      if me.conditional
        var name = me.conditional.toLowerCase()
        var asked = me.getRootNode().ownMember(name)
        if asked and asked.value
          me.body.produce()

else, another kind, just out as comments

      else

        var i = me.lineInx
        while i<me.endLineInx
          me.outLineAsComment i
          i+=1

      me.skipSemiColon = true

--------------------
### DeclareStatement ###

Out as comments

    method produce() of Grammar.DeclareStatement

/!
  
      declare valid me.skipSemiColon
!/

      var i = me.lineInx
      while i<me.endLineInx
        me.outLineAsComment i
        i+=1

      me.skipSemiColon = true


----------------------------
### ClassDeclaration ###

Classes contain a code block with properties and methods definitions.

    method produce() of Grammar.ClassDeclaration

      me.out {COMMENT:"class "},me.name
      if me.parentClass
        me.out ", extends|super is ", me.parentClass
      me.out ", constructor:",NL
      
First, since js has a object-class-constructor function all in one
we need to get the class constructor, and separate other class items.

/!
      
      declare theConstructor:Grammar.FunctionDeclaration
      declare on item
        statement
      declare valid me.body.statements
      declare valid me.produce_AssignObjectProperties
      declare valid me.public
!/

      var theConstructor = null
      var other = []

      if me.body
        for item at index in me.body.statements

          if item.statement instanceof Grammar.ConstructorDeclaration 

            if theConstructor # what? more than one?
              me.throwError('Two constructors declared for class #{me.name}')

            theConstructor = item.statement

          else 
            other.push item.statement

      #end if body

      if theConstructor
        theConstructor.produceFunction(me.name)
      else
        #out a default "constructor"
        me.out "function ",me.name,"(){"
        if me.parentClass   
            me.out "// default constructor: call super.constructor",NL
            me.out "    return ",me.parentClass.name,".prototype.constructor.apply(this,arguments)",NL
        me.out "}"
      #end if
      me.out ";", NL

Set parent class if we have a one indicated

      if me.parentClass
        me.out '// ',me.name,' (extends|super is) ',me.parentClass.name, NL
        me.out me.name,'.prototype.__proto__ = ', me.parentClass.name,'.prototype;',NL 

now out class body, which means create properties in the object-function-class prototype

      me.out NL,'// declared properties & methods',NL
      me.produce_AssignObjectProperties(other, {name: me.name.name, member:'prototype', assignSymbol:"=", ender: ";"})

If the class was adjectivated 'public', add to module.exports

      if me.public
        me.out NL,'exports.',me.name,' = ', me.name,";"

      me.out NL,{COMMENT:"end class "},me.name,NL


----------------------------
Helper method: *produce_AssignObjectProperties*(body, options)

This helper is shared by ClassDeclaration and AppendToDeclaration
and produces statements in the form:

```
  name.x = function(...){...}; 
  name.y = value;
```
or
```
  name = {
      x:function(...){...},` 
      y:value
    } 
```

    method produce_AssignObjectProperties(statements,options) of Grammar.ASTBase

if we're extending an object|class, we must prepend names, with object name or clas name.prototype

/!

      declare on options
        member,separator,assignSymbol,ender
!/

      var prefix = ""

      if options.name
        prefix += options.name + '.'
        if options.member
          prefix += options.member + '.'

for each item

      for item at index in statements

/!

        declare valid me.skipSemiColon

        declare on item
          statement, assignedValue
          list:Grammar.VariableDecl array
          shim
          out, produce
          outPrevLinesComments, produceFunction
          positionText
!/

if the item is Statement (Generic), get the specific statement

        if item.statement
          item = item.statement

comma separated

        if index>0 and options.separator
          me.out options.separator,NL

(prettier generated code) out comments in the same place.

        item.outPrevLinesComments()

it's a (VarStatement|PropertiesDeclaration), item.list is array of NameDeclaration
Resolve production with a recursive call

        if item instanceof Grammar.VarStatement # includes PropertiesDeclaration

            var withValueList=[]
            for prop in item.list
              if prop.assignedValue
                withValueList.push(prop)
            if withValueList.length
              me.produce_AssignObjectProperties withValueList, options

If it is a function, add function name. 
If it was adjectivated "shim", prepend existence check

        else if item instanceof Grammar.FunctionDeclaration 

          item.out "// ",item.name, NL

          if item.shim
            item.out "if (!",prefix,item.name,")",NL                        

now produce the assignment statement, and the function body

          item.out prefix, item.name, options.assignSymbol
          item.produceFunction()

if it's a property, produce the assignment statement

        else if item instanceof Grammar.VariableDecl

            item.out prefix,item.name,options.assignSymbol,item.assignedValue or 'undefined'

handle other items in the class body

        else if item instanceof Grammar.EndStatement or item instanceof Grammar.CompilerStatement or item instanceof Grammar.DeclareStatement

          item.produce() # call produce for EndStatement and Compiler Statement 

        else

          log.warning "#{item.positionText()} unexpected #{item} in class|extend definition"
          
          #produce anyway
          item.produce()

        #end, switch on item's class

        if options.ender
          me.out options.ender,NL

      #end for #next item in the class

      me.skipSemiColon = true #It was a list of statements. no semicolon required


### AppendToDeclaration ###

Any class|object can be extended at any time. 
'extend' body contains a code block with properties and methods definitions.

    method produce() of Grammar.AppendToDeclaration

/!

      declare valid me.body.statements
!/

me.referenced is VartiableRef. References the class or object declaration (VarStatement)

      me.out {COMMENT:"extend "},me.specifier, " ", me.varRef,NL
 
out extend body (properties,methods,etc)

      var options = {name: me.varRef, assignSymbol:"=", ender: ";", member:undefined}
      
      if me.specifier is 'class'
        options.member = "prototype"

      me.produce_AssignObjectProperties(me.body.statements, options)


### TryCatch ###

    method produce() of Grammar.TryCatch

      me.out "try{", me.body, me.exceptionBlock

### ExceptionBlock ###

    method produce() of Grammar.ExceptionBlock

      me.out NL,"}catch(",me.catchVar,"){", me.body, "}"

      if me.finallyBody
        me.out NL,"}finally{", me.finallyBody, "}"


### WaitForAsyncCall ###

    method produce() of Grammar.WaitForAsyncCall

/!

      declare valid me.call.funcRef
      declare valid me.call.args
!/

      me.out "wait.for(", {CSL:[me.call.funcRef].concat(me.call.args)} ,")"


