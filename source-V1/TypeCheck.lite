Name Check
==========

This module contains helper functions to manage variable and object property declaration,
in order to catch mistyped variable names and property names at compile time
(instead of having to debug a subtle bug at run time)

Any NameDeclaration node ca have a `.members={}` property

`.members={}` is a map to other `NameDeclaration`s which are valid members of this name.


Also, sume AST nodes can var a `.scope` 
a 'scope' is a NameDeclaration whoose members are the declared vars in this scope.

Project's Main Module has the 'global' scope

Only certain AST nodes have 'scopes', such as:
* Module, MethosDeclaration, FunctionDeclaration, ForStatement, DoLoopStatement
WhileUntilLoop, Catch/Exception


Variables in the scope
----------------------
Referenced vars must be found in the scope . You are required to explicitly declare your variables
so you're **unable** to create a global variable by mistake mistipying a name in an assignment. 
The compiler will catch that as "undeclared variable". 

Object properties access
------------------------
Object properties access are another source of subtle bugs in any medium to large javascript project.
The common problem is that, a mistyped property name results in the property not being found 
in the object nor the prototype chain, and javascript in this case just returns "undefined" 
and goes on. This causes hard to find subtle bugs.

Example: The following javascript code, **will probably need debugging.**

  options = options || {};
  if (options.importantCodeDefaultTrue===undefined) options.importantCodeDefaultTrue=true;
  if (options.anotherOptionDefaultZero===undefined) options.anotherOptionDefaultZero=0;

  initFunction(options);
  prepareDom(options);
  if (options.importantCodesDefaultTrue) { moreInit(); subtleDomChanges(); }
  
The same LiteScript code, but the mistake **will be caught by the compiler**
The compiler will emit an error during compilation, -no debugging required-.

  options = options or {}
  if options.importantCodeDefaultTrue is undefined, options.importantCodeDefaultTrue=true
  if options.anotherOptionDefaultZero is undefined, options.anotherOptionDefaultZero=0;

  initFunction options
  prepareDom options
  if options.importantCodesDefaultTrue then moreInit(); subtleDomChanges()

In order to completely check property names, a full type system is neeeded.
LiteScript, based in js, *is not typed*, but you can add "type annotations"
to your variable declaration, in order to declare the list of valid members 
to check at compile time.

If you don't want to include var types, You can also explicitily use a 
`declare on myObj prop1,prop2` statement to dismiss the 'prop1 IS NOT A PROPERTY OF myObj' 
compiler errors

Example:
/*

  class ClassA

    properties 
      classAProp1, classAProp2
    
    method methodA
      this.classAProp1 = 11
      this.classAProp2 = 12

  class ClassB
    
    properties 
      classBProp1, classBProp2

    method methodB
      this.classBProp1 = 21

  var instanceB = new ClassB // implicit type

  instanceB.classBprop1 = 5 // <-- this **will be caught** as "case mismatch" since classBprop1 is defined as classBProp1

  var bObj = instanceB // simple assignment, implicit type

  bObj.classAProp1 = 5 // <-- this **will be caught**

  var xObj = callToFn() // unknown type
  
  xObj.classBProp1 = 5 // <-- this trigger a "classBProp1 IS NOT A DECLARED PROPERTY OF xObj"

  declare on xObj  // <-- this fixes it
    classBProp1

  xObj.classBProp1 = 5 // <-- this is OK now

  var xObj:ClassB = callToFn() // type annotation, this also fixes it
  
  bObj.classBProp1 = 5 // <-- this is ok

*/


##The Function-Class members
A ClassDeclaration.members starts populated by:
`prototype`, `prototype.constructor`, `super`

In the class methods, the scope starts populated by the special var: `this`
`this` type is `ClassDeclaration.members.prototype`

##Append To declaration
All the `append to` [AppendToDeclaration] AST nodes, have a `.referenced` property
for `Append to class`, `.referenced` points to `ClassName.members.prototype` 
for `Append to object`, `.referenced` points to `Object.name` 


---------------------------
Dependencies:

    var util = require("./util")
    var ASTBase = require("./ASTBase")
    var Grammar = require('./Grammar')

/!
  
    declare Environment
    declare on Environment
      isBuiltIn,isBuiltInProperty

    declare debug
    declare on log
      error,warning

!/


--------------------------------
**getRootNode** method moves up in the AST up to the node holding the global scope ("root").
"root" node has parent = Project 

    method getRootNode() of ASTBase

        var node = me

        while node.parent instanceof ASTBase
            node = node.parent # move up

        return node

--------------------------------
**globalVar** gets a var from global scope

    method globalVar(name) of ASTBase

        var nameDecl = me.getRootNode().findInScope(name)
        if no nameDecl
          fail with "no '#{name}' in global scope"

        return nameDecl

------------------------------------------------------------------------
**createGlobalVar** helper method to use declare a global var.
*return*: Always return a NameDeclaration, found or dummy-created.

    method createGlobalVar(name,options) of ASTBase

/!

        declare root:ASTBase
!/

        var root = me.getRootNode()

        var nameDecl = root.findInScope(name)
        if no nameDecl
          nameDecl = me.declareName(name,options)
          root.addToScope(nameDecl)

        return nameDecl



-----------------------
Helper method *createScope()*
initializes an empty scope in this node

    method createScope() of ASTBase
/!

        declare valid me.scope
!/

        if no me.scope 
          me.scope = me.declareName("#{me.name or me.constructor.name} Scope")


###a helper method createScopeThis()

This method is shared by constructors and methods

    method createScopeThis(classPrototype) of ASTBase

Methods (as any function), have a 'scope'. It captures al vars declared in its body.
We now create method's scope and add the special var 'this'. 
The 'type' of 'this' is normally class prototype, 
which contains class's other methods and properties.

/!

        declare varThis 
        declare valid varThis.addMember
        declare valid classPrototype.type
!/

        me.createScope()
        var varThis = me.addToScope('this',{type:classPrototype})

In LiteScript, there is also a property 'super' in the protoype, 
pointing to super-class prototype, so you can do, for example,
`this.super.constructor.call(this,10,20)` to call super's constructor
or: `this.super.myFunc.apply(this,arguments)` to call a shadowed method.
We add 'this.super' to the method scope.

        varThis.addMember('super',{type:classPrototype.type})


-----------------------
a Helper method *caseMismatch(text)*
If the found item has a different case than the name we're adding 

    method caseMismatch(nameDecl) of Grammar.NameDeclaration

/!

        declare on nameDecl
          name,positionText

!/

        var text
        if nameDecl instanceof Grammar.NameDeclaration
          text = nameDecl.name
        else 
          text = nameDecl

        if me.name isnt text

            var errPos 
            if nameDecl instanceof Grammar.NameDeclaration
              errPos = nameDecl.positionText()
            else
              errPos = me.lexer.posToString()

            me.lexer.say "#{errPos} CASE MISMATCH: '#{text}'/'#{me.name}'"
            log.error me.originalDeclarationText() #add original declaration line info
            return true


-----------------------
a Helper method *handleForward(nameDecl)*
if the previously defined found item was a forward declaration, we add the forward 
"childs" to this declaration and replace the forward declaration with this declaration

    method handleForward(nameDecl) of Grammar.NameDeclaration

/!

        declare on nameDecl
          members,type,itemType
!/

        if me.isForward

            #add fwd members, type & itemType
            #for member in Object.keys(me.members)
            #  nameDecl.addMember(member,{ignoreDuplicates:true})
            if Object.keys(nameDecl.members).length is 0
              nameDecl.members = me.members 
            if me.type 
              nameDecl.type = me.type
            if me.itemType
              nameDecl.itemType = me.itemType
            return true

-----------------------
Helper method *normalize(text, options)*

    function normalize(text:string,options)

/!

        declare on options
          inScope
!/

        var result
        if options and options.inScope
          #for vars, we allow "token" and "Token" to be in the same scope
          result = text.slice(0,1)+text.slice(1).toLowerCase()
        else 
          #for properties, we do not
          result = text.toLowerCase()

        if result in ['__proto__','undefined','null','false','true'] # not good names
          result='|'+result+'|'

        return result


-----------------------
Helper method *addMember*
Adds passed NameDeclaration to .members[] or scope.members[]
Reports duplicated.
return: NameDeclaration

    method addMember(nameDecl, options) of ASTBase

/!
        
        declare on nameDecl
          name,positionText

        declare valid me.members
        declare valid options.ignoreDuplicates

        declare dest:Grammar.NameDeclaration
        declare found:Grammar.NameDeclaration

!/

        if no options
          options={}

        if typeof nameDecl is 'string'
          nameDecl = me.declareName(nameDecl,options)
        else if nameDecl instanceof Grammar.VariableDecl
          nameDecl = nameDecl.name

        if not nameDecl.name
          debugger

        debug "addMember: '#{nameDecl.name}' to '#{me.name}'" #[#{me.constructor.name}] name:

        var dest = me
        if no me.members
          fail with "no .members in [#{me.constructor.name}]"

        var normalized = normalize(nameDecl.name, options)

        if dest.members.hasOwnProperty(normalized)
          var found = dest.members[normalized]
          
        if not found
          #just add it
          dest.members[normalized] = nameDecl
          return nameDecl

else, found.
If the found item has a different case than the name we're adding, emit error & return

        if found.caseMismatch(nameDecl)
            return nameDecl

if the previously defined found item was a forward declaration, we add the forward 
"childs" to this declaration and replace the forward declaration with this declaration

        if found.handleForward(nameDecl)
            #replace
            dest.members[normalized] = nameDecl

else, if it wasnt a forward declaration, then is a duplicated error

        else if not options.ignoreDuplicates
            log.error "#{nameDecl.positionText()}. DUPLICATED property name: '#{nameDecl.name}'"
            log.error found.originalDeclarationText() #add extra information line

        return nameDecl


-----------------------
a Helper method *addMembers(arr, options)*

Adds each element in passed list of VarDecl to this node.scope
Throws if duplicated.

    method addMembers(list,options) of ASTBase

      for item in list
        me.addMember item,options


------------------------------------------------------------------------
**getScopeNode** method return the next 'scoped' node in the hierarchy.
It looks up until found a instance with .scope
-Note: automatically redirects scope for instances of AppendToDeclaration 
 
    method getScopeNode() of ASTBase
        
Start at this node

        var node = me
/!

        declare on node 
          scope
!/        

        while node

          if node.scope
            return node # found a node with scope

          node = node.parent # move up

        #loop

        return null

        
-----------------------
Helper method *addToScope*
Adds passed NameDeclaration to scope.members[]
Reports duplicated.
return: NameDeclaration

    method addToScope(nameDecl, options) of ASTBase

        #if not me.lexer 
        #  fail with 'addToScope, me.lexer is empty'

/!
        
        declare scope:Grammar.NameDeclaration
        declare found:Grammar.NameDeclaration

        declare on options
          ignoreDuplicates
        declare on nameDecl
          name,positionText
!/


        if typeof nameDecl is 'string'
          nameDecl = me.declareName(nameDecl,options)
        else if nameDecl instanceof Grammar.VariableDecl
          nameDecl = nameDecl.name

        var normalized = normalize(nameDecl.name,{inScope:true})

        var scope = me.getScopeNode().scope

        debug "addToScope: '#{nameDecl.name}' to '#{scope.name}'" #[#{me.constructor.name}] name:

        if no options
          options={}

        var found = me.findInScope(nameDecl.name)
          
        if not found
          #add it to the scope
          scope.members[normalized]=nameDecl
          return nameDecl

else, found in the scope.
If the found item has a different case than the name we're adding, emit error & return

        if found.caseMismatch(nameDecl)
            return nameDecl

if the previously defined found item was a forward declaration, we add the forward 
"childs" to this declaration and replace the forward declaration with this declaration

        if found.handleForward(nameDecl)
            #replace
            scope.members[normalized] = nameDecl

else, if it wasnt a forward declaration, then is a duplicated error

        else if not options.ignoreDuplicates
            log.error "#{nameDecl.positionText()}. DUPLICATED name in scope: '#{nameDecl.name}'"
            log.error found.originalDeclarationText() #add extra information line

        return nameDecl

-----------------------
a Helper method *addVarsToScope(arr,options)*

Adds each element in passed list of VarDecl to this node.scope
Throws if duplicated.

    method addVarsToScope(list,options) of ASTBase

      for item in list
        me.addToScope item,options



-----------------------
Helper method *addBuiltInClass(name, type)*
Adds a BuiltIn Class to global scope
return class prototype

    method addBuiltInClass(name, type) of ASTBase
/!

      declare coreClass:Grammar.NameDeclaration
!/

      var options = {type:type, inScope:true, ignoreDuplicates:true}
      var coreClass = me.getRootNode().addToScope(name,options)

      return coreClass.addMember('prototype',{ignoreDuplicates:true})

-----------------------
Helper method: *NameDeclaration.ownMember(nameDecl)*, this method looks fo 
the NameDeclaration between its members

    method ownMember(nameDecl) of Grammar.NameDeclaration
/!

        declare mainClassPrototype:Grammar.NameDeclaration
!/

        if no me.members
          debugger
          me.throwError "No me.members on #{me.constructor.name}, adding #{nameDecl}."

        if typeof nameDecl is 'string' 
          nameDecl = me.declareName(nameDecl)

        var normalized = normalize(nameDecl.name)
        if me.members.hasOwnProperty(normalized)
          return me.members[normalized]

check if it is a built-in

        var mainClass = me
        if mainClass.name is 'prototype'
            mainClass = me.parent

        if Environment.isBuiltInProperty(mainClass.name, nameDecl.name)
          ##add, add namedecl to prototype, and return nameDecl
          var mainClassPrototype = me.addBuiltInClass(mainClass.name)
          return mainClassPrototype.addMember(nameDecl.name)
            

-----------------------
a Helper method: *ASTBase.findInScope(refName)*, this method looks for the original place 
where a name was defined (function,method,var) 
Returns the NameDeclaration node from the original scope
It's used to validate variable references to be previously declared names

    method findInScope(refName) of ASTBase

/!
  
        declare on refName
          indexOf,split
        declare mainVar:Grammar.NameDeclaration
        declare parts:array
!/

        var normalized

First we handle multi-item names, as: String.prototype.split

        if refName.indexOf('.')>=0
          var parts = refName.split('.')
          var mainVar = me.findInScope(parts[0])
          if no mainVar
            return null
          var n=1
          while n<parts.length
            normalized = normalize(parts[n])
            if mainVar.members.hasOwnProperty(normalized)
              mainVar = mainVar.members[normalized]
            else
              return null
          #loop
          return mainVar
        #end if


        normalized = normalize(refName,{inScope:true})

Start at this node

        var node = me
/!

        declare valid node.scope.members.hasOwnProperty
        declare valid node.parent

!/

Look for the declaration in this scope

        while node
          if node.scope
            if node.scope.members.hasOwnProperty(normalized)
              return node.scope.members[normalized]

move up in scopes

          node = node.parent

        #loop

        return null

-----------------------
Helper method: *ASTBase.getDeclaration(refName)*, this method looks for the original declaration
in the scope. if the declaration is not found, an error is emmited and a -pseudo- var is created 
in the scope in order to continue compilation

Check if the name is declared. Retrieve the original declaration

    method getDeclaration(refName) of ASTBase

/!

        declare found:Grammar.NameDeclaration
!/


        var found = me.findInScope(refName)
        if found

Declaration found, we check the upper/lower case to be consistent
If the found item has a different case than the name we're adding, emit error 

            if found.caseMismatch(refName)

              #create a dummy to continue compilation
              found = me.getScopeNode().addToScope(refName+'-*CASE MISMATCH*-',{isForward:true})

            #end if

        else

if declaration not found, check if it's a built-in object, like 'true', 'object', 'Array'

          if Environment.isBuiltIn(refName)

If it's a built-in object, we declare it in the global scope. return class.prototype

              found = me.addBuiltInClass(refName)

          else

if it is not, inform error, Create var to avoid repeated errors

              me.lexer.sayErr "UNDECLARED NAME: '#{refName}'"
              found = me.getScopeNode().addToScope(refName,{isForward:true})
              if String.isCapitalized(refName)
                found.addMember('prototype',{isForward:true})

        #end if - check declared variables 

        return found


-----------------------------
Helper method *getValidProperty*

    method getValidProperty(ownerVar, nameDecl) of ASTBase

/!

        declare on ownerVar
          name,members,type
          ownMember

        declare found:Grammar.NameDeclaration
        declare checkType:Grammar.NameDeclaration

!/

        if not ownerVar
          debugger
        if not ownerVar.members
          debugger

Check if it is declared directly in ownerVar

        var found = ownerVar.ownMember(nameDecl)

Check if it is part of the type chain

        if not found

          var checkType = ownerVar.type
          if no checkType
            checkType = me.globalVar('Object').members.prototype

          while checkType

            if not checkType.ownMember
              debugger

            found = checkType.ownMember(nameDecl)
            if found 
              break
            checkType = checkType.type

if not found, assume a mistyped property name

        if not found
          me.lexer.sayErr "'#{ownerVar.name}.#{nameDecl.name}' UNDECLARED PROPERTY"
          return nameDecl

else, check for upper/lower case
It means `z.total` and `z.totaL` is caught as error at compile time. 
If the found item has a different case than the name we're adding, emit error & return

        found.caseMismatch(nameDecl)
        
        return found


------------------------------------------------------------------------
**checkImportByRequire**
Alternative (node.js) syntax support

Control: Recognize `name = require('module')` as alias to `import module as name`.
import and compile 'name'

    method checkImportByRequire(nameDecl,rvalue) of ASTBase
/!

      declare on nameDecl
        name,members

      declare valid rvalue.root.name
      declare valid rvalue.varName.name
      declare valid rvalue.accessors.list

      declare requireCall:Grammar.FunctionAccess

      declare thisModule:Grammar.Module
      declare valid thisModule.required.push
      declare valid thisModule.imported.push

      declare importedModule:Grammar.Module
      declare valid importedModule.required.push
      declare valid importedModule.imported.push
      declare valid importedModule.exports.members

      declare root:Grammar.NameDeclaration
      declare valid root.parent.importModule
!/

      if rvalue instanceof Grammar.Expression
        rvalue = rvalue.root.name

      if rvalue instanceof Grammar.VariableRef 
          if rvalue.varName.name is 'require'
              if rvalue.accessors and rvalue.accessors.list[0] instanceof Grammar.FunctionAccess
                var requireCall = rvalue.accessors.list[0]
                if requireCall.args[0].root.name instanceof Grammar.StringLiteral

get import paramter, and parent Module

                  var importParameter = requireCall.args[0].root.name.getValue()
                  var thisModule = me.getParent(Grammar.Module)

                  thisModule.required.push(importParameter)

'import' the required module (recursive compilation)
`importModule` is a method of 'Project' (MainModule parent)

                  try
                    var root = me.getRootNode()
                    var importedModule = root.parent.importModule(thisModule, importParameter)
                    thisModule.imported.push(importedModule)

Assign exports members to assigned variable

                    if importedModule.exports
                      nameDecl.members = importedModule.exports.members

                  catch e
                    #include source position in error message
                    e.message = me.lexer.posToString()+". "+e.message
                    throw e


------------------------------------------------------------------------
**checkExportsAssignment**
Alternative (node.js) syntax support

Control: Recognize:
`exports.name = x` 
`module.exports.name = x` 
`module.exports = x` 

as alternative to declare 'x' `public`

    method checkExportsAssignment(varRef, expr) of ASTBase

Analyze rValue. what are we assigning?
we need a NameDeclaration
/!

      declare valid expr.root.name.referencedName
      declare valid varRef.varName.name
      declare valid varRef.accessors.list

      declare parentModule:Grammar.Module
      declare valid parentModule.exports

      declare rNameDecl:Grammar.NameDeclaration
!/

      var rNameDecl
      if expr instanceof Grammar.Expression
        if expr.root.name instanceof Grammar.ObjectLiteral or expr.root.name instanceof Grammar.FreeObjectLiteral
          rNameDecl = expr.root.name
        else if expr.root.name instanceof Grammar.VariableRef
          rNameDecl = expr.root.name.referencedName

      if no rNameDecl
        return

Analyze lValue. what are we assigning to?

      if varRef instanceof Grammar.VariableRef

        var mainVarName = varRef.varName.name
        var acc=[]
        var exportedName=undefined
        if varRef.accessors 
          for item at index in varRef.accessors.list
            if item instanceof Grammar.PropertyAccess
              acc[index]=item.name

        var parentModule = me.getParent(Grammar.Module)

        var isModuleExports =  mainVarName is 'module' and acc[0] and acc[0].name is 'exports' # module.exports

        if isModuleExports and acc[1] # module.exports.x = expr...
          #replace by 'exports.x = expr...'
          mainVarName='exports'          
          acc[0]=acc[1]

        if mainVarName is 'exports' and acc[0] # exports.x = expr...
          #keep name, replace everything else
          acc[0].members = rNameDecl.members
          acc[0].type = rNameDecl.type
          acc[0].itemType = rNameDecl.type
          parentModule.exports.addMember(acc[0])

        else if isModuleExports and acc.length is 1 # module.exports = x // REPLACE module.exports
            parentModule.exports = rNameDecl


------------------------------------------------------------------------
**autoAssignType**

Recognize `x = literal` and assigns x's type 

Examples:
`var LineTypes = {CODE:0, COMMENT:1, BLANK:2}`
Here the Expression->ObjectLiteral members are passed to 'LineTypes' NameDeclaration
so CODE, COMMENT and BLANK are valid members of 'LineTypes'

`var lexer = new Lexer()`
Here 'lexer' should be assigned type 'Lexer'

    method autoAssignType(nameDecl, expr) of ASTBase
/!

      declare valid expr.operandCount
      declare valid expr.root.name.name.members
      declare valid expr.root.name.type
      declare valid expr.root.right.name

      declare valid nameDecl.type
      declare valid nameDecl.members
      declare valid nameDecl.itemType

      declare varRef:Grammar.VariableRef
      declare valid varRef.accessors.list

      declare baseVar:Grammar.NameDeclaration
      declare valid baseVar.returnType

      declare ac 
      declare valid ac.name.itemType
!/

      if expr.operandCount is 1

        if expr.root.name instanceof Grammar.ObjectLiteral 
          if Object.keys(expr.root.name.name.members).length>0 
            nameDecl.members = expr.root.name.name.members #set members from the ObjectLiteral

        else if expr.root.name instanceof Grammar.Literal
          nameDecl.type = expr.root.name.type

        else
          # next assignments, only if the var has no type defined
          if nameDecl.type is undefined or nameDecl.type is me.globalVar('Object').members.prototype

              var varRef
              if expr.root.name is 'new'  
                varRef = expr.root.right.name
              else
                varRef = expr.root.name

              if varRef instanceof Grammar.VariableRef

Anlyze accessors to get:
* refType: class-prototype to use to auto-assign lvalue type when assingning var to var
* onNewType: class-prototype to use to auto-assign lvalue type when calling 'new'

Expression   | refType          | onNewType     | Notes
-------------|------------------|---------------|-------
b.c.x        | x.type           | x.prototype
b.c(ff)      | null             | c.prototype
b[ff]        | b.itemType       | null | if b[ff] is a constructror, we dont know which specific one
b[ff](x)     | null             | null | (idem)
b[ff].x      | x.type           | x.prototype | (if b itemType known)
b[ff].x[5].r | r.type           | r.prototype | (if b and x itemType known)
b[ff].x(5)   | null             | x.prototype | (if b itemType known)
b(ff).x(5)   | null             | null        | (because b(ff) is a previous fn.call with result type unk)
b[ff].x(b)   | null             | x.prototype
b[ff].x      | x.type           | x.prototype
b[ff].Xclass | Xclass.typye     | Xclass.prototype  | (if b itemType known)

                #analyze accessors
                var accessors = []
                if varRef.accessors
                  accessors = varRef.accessors.list

                var baseVar = varRef.varName

                var refType
                var onNewType
                var inx=0

                while true

                  refType = baseVar.type
                  onNewType = baseVar.members.prototype

                  if inx is accessors.length 
                    break

                  var ac = accessors[inx]
                  inx+=1

                  if ac instanceof Grammar.PropertyAccess
                    baseVar = ac.name

                  else if ac instanceof Grammar.IndexAccess
                    baseVar = ac.name.itemType

                  else if ac instanceof Grammar.FunctionAccess
                    refType = undefined
                    baseVar = baseVar.returnType

                  if no baseVar
                    break

                #loop

                if expr.root.name is 'new' 
                    #if we know the expression type
                    if onNewType
                      nameDecl.type = onNewType #set type to class prototype

                #else if assignment from other var
                else if refType
                    nameDecl.type = refType

                #endif

--------------------------------------------------------
##**scopeEvaluateAssignment**
a. Recognize `exports.name = x` as alternative to declaring x `public`
b. Recognize `name = require('name')` as alternative to `import name` 
c. Recognize `x = constant/simple value` and assign x's type or "constant" name

    method scopeEvaluateAssignment(statement, nameDecl, rvalue) of ASTBase

a. Recognize `exports.name = x` as alternative to declaring x `public`

          if statement instanceof Grammar.VariableRef
            me.checkExportsAssignment statement, rvalue

b. Recognize `name.x.y = require('name')` as alternative to `import name` 
first: check if expr.root.name is a VariableRef as in: `name.x.y = require('xx')`
c. Recognize `x = constant/simple value` and assign x's type or "constant" name

          if nameDecl
            me.checkImportByRequire(nameDecl,rvalue)
            me.autoAssignType(nameDecl,rvalue)
            

----------------
##helper method toExportArray() - Recursive

converts .members[] to 
simpler arrays for JSON.stringify & cache

    method toExportArray() of ASTBase
/!

      declare valid me.members
      declare item:Grammar.NameDeclaration
      declare valid item.type.fullName
      declare valid item.itemType.fullName

!/

      #FIX WITH for each own property
      if me.members
        var result = []
        # FIX with for each property
        for prop in Object.keys(me.members)
          var item = me.members[prop]
          var members = item.toExportArray() #recursive
          # FIX with Ternary
          var arrItem= {name:item.name}

/!

          declare valid arrItem.members
          declare valid arrItem.type
          declare valid arrItem.itemType
          declare valid arrItem.value
!/

          if members.length
            arrItem.members = members

          if item.hasOwnProperty('type') and item.type
            arrItem.type = item.type.fullName()

          if item.hasOwnProperty('itemType') and item.itemType
            arrItem.itemType = item.itemType.fullName()

          if item.hasOwnProperty('value')
            arrItem.value = item.value

          result.push arrItem

      return result

----------------
##helper method importMembersFromArray(exportObj) - Recursive

Inverse of helper method toExportObject() 
converts exported object, back to NameDeclarations and .members[]

    method importMembersFromArray(exportedArr) of ASTBase

/!

        declare item:Grammar.NameDeclaration
        declare nameDecl:Grammar.NameDeclaration
!/


        for item in exportedArr
          var nameDecl = me.declareName(item.name or '(unnamed)')
          if item.hasOwnProperty('type')
            nameDecl.type = item.type
          if item.hasOwnProperty('value')
            nameDecl.value = item.value
          me.addMember nameDecl 
          if item.members
            nameDecl.importMembersFromArray(item.members) #recursive

----------------
##helper method toText()

converts NameDeclaration .members[] to 
simpler arrays for JSON.stringify & cache

    method toText() of ASTBase

/!

      declare valid me.members
      declare valid me.value

!/

      var decls = []
      #FIX WITH for each own property
      for prop in Object.keys(me.members)
          decls.push me.members[prop].toText() #recursive

      var value
      if decls.length is 0
        if typeof me.value is 'string'
          value = "'#{me.value}'"
        else
          value = me.value
      else
          value = "[#{decls.join(', ')}]"

      return "#{me.name}: #{value}"
