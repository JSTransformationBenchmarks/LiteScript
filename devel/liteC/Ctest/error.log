---------
init class [Map]
instanceSize:16 sizeof(any):16  propsLength:1
super: Array  super instanceSize16 super propsLength:1
 ---------
init class [fs_Stat]
instanceSize:48 sizeof(any):16  propsLength:3
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [fs_Stat]
instanceSize:48 sizeof(any):16  propsLength:3
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [ControlledError]
instanceSize:80 sizeof(any):16  propsLength:5
super: Error  super instanceSize64 super propsLength:4
 ---------
init class [OptionsParser]
instanceSize:32 sizeof(any):16  propsLength:2
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [GeneralOptions]
instanceSize:304 sizeof(any):16  propsLength:19
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Project]
instanceSize:128 sizeof(any):16  propsLength:8
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [ASTBase]
instanceSize:304 sizeof(any):16  propsLength:19
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Parser_Lexer]
instanceSize:304 sizeof(any):16  propsLength:19
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Parser_Token]
instanceSize:48 sizeof(any):16  propsLength:3
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Parser_InfoLine]
instanceSize:80 sizeof(any):16  propsLength:5
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Parser_LexerPos]
instanceSize:96 sizeof(any):16  propsLength:6
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Parser_MultilineSection]
instanceSize:64 sizeof(any):16  propsLength:4
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Parser_OutCode]
instanceSize:176 sizeof(any):16  propsLength:11
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [logger_LogOptions]
instanceSize:64 sizeof(any):16  propsLength:4
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [logger_LogOptionsDebug]
instanceSize:32 sizeof(any):16  propsLength:2
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Grammar_PrintStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_VarDeclList]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_VarStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: Grammar_VarDeclList  super instanceSize320 super propsLength:20
 ---------
init class [Grammar_VariableDecl]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_PropertiesDeclaration]
instanceSize:352 sizeof(any):16  propsLength:22
super: Grammar_VarDeclList  super instanceSize320 super propsLength:20
 ---------
init class [Grammar_WithStatement]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_TryCatch]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ExceptionBlock]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ThrowStatement]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ReturnStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_IfStatement]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ElseIfStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ElseStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_DoLoop]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_WhileUntilLoop]
instanceSize:352 sizeof(any):16  propsLength:22
super: Grammar_DoLoop  super instanceSize352 super propsLength:22
 ---------
init class [Grammar_WhileUntilExpression]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_LoopControlStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_DoNothingStatement]
instanceSize:304 sizeof(any):16  propsLength:19
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ForStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ForEachProperty]
instanceSize:384 sizeof(any):16  propsLength:24
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ForEachInArray]
instanceSize:384 sizeof(any):16  propsLength:24
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ForIndexNumeric]
instanceSize:384 sizeof(any):16  propsLength:24
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ForWhereFilter]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_DeleteStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_AssignmentStatement]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_VariableRef]
instanceSize:368 sizeof(any):16  propsLength:23
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_Accessor]
instanceSize:304 sizeof(any):16  propsLength:19
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_PropertyAccess]
instanceSize:304 sizeof(any):16  propsLength:19
super: Grammar_Accessor  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_IndexAccess]
instanceSize:304 sizeof(any):16  propsLength:19
super: Grammar_Accessor  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_FunctionArgument]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_FunctionAccess]
instanceSize:320 sizeof(any):16  propsLength:20
super: Grammar_Accessor  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_Operand]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_Oper]
instanceSize:416 sizeof(any):16  propsLength:26
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_UnaryOper]
instanceSize:416 sizeof(any):16  propsLength:26
super: Grammar_Oper  super instanceSize416 super propsLength:26
 ---------
init class [Grammar_Expression]
instanceSize:368 sizeof(any):16  propsLength:23
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_Literal]
instanceSize:304 sizeof(any):16  propsLength:19
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_NumberLiteral]
instanceSize:304 sizeof(any):16  propsLength:19
super: Grammar_Literal  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_StringLiteral]
instanceSize:304 sizeof(any):16  propsLength:19
super: Grammar_Literal  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_RegExpLiteral]
instanceSize:304 sizeof(any):16  propsLength:19
super: Grammar_Literal  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ArrayLiteral]
instanceSize:336 sizeof(any):16  propsLength:21
super: Grammar_Literal  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ObjectLiteral]
instanceSize:336 sizeof(any):16  propsLength:21
super: Grammar_Literal  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_NameValuePair]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_FreeObjectLiteral]
instanceSize:336 sizeof(any):16  propsLength:21
super: Grammar_ObjectLiteral  super instanceSize336 super propsLength:21
 ---------
init class [Grammar_ParenExpression]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_FunctionDeclaration]
instanceSize:432 sizeof(any):16  propsLength:27
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_DefinePropertyItem]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_MethodDeclaration]
instanceSize:432 sizeof(any):16  propsLength:27
super: Grammar_FunctionDeclaration  super instanceSize432 super propsLength:27
 ---------
init class [Grammar_ClassDeclaration]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ConstructorDeclaration]
instanceSize:432 sizeof(any):16  propsLength:27
super: Grammar_MethodDeclaration  super instanceSize432 super propsLength:27
 ---------
init class [Grammar_AppendToDeclaration]
instanceSize:384 sizeof(any):16  propsLength:24
super: Grammar_ClassDeclaration  super instanceSize352 super propsLength:22
 ---------
init class [Grammar_NamespaceDeclaration]
instanceSize:352 sizeof(any):16  propsLength:22
super: Grammar_ClassDeclaration  super instanceSize352 super propsLength:22
 ---------
init class [Grammar_DebuggerStatement]
instanceSize:304 sizeof(any):16  propsLength:19
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_CompilerStatement]
instanceSize:384 sizeof(any):16  propsLength:24
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ImportStatement]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_ImportStatementItem]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_DeclareStatement]
instanceSize:384 sizeof(any):16  propsLength:24
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_DefaultAssignment]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_EndStatement]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_YieldExpression]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_FunctionCall]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_SwitchStatement]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_SwitchCase]
instanceSize:336 sizeof(any):16  propsLength:21
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_CaseWhenExpression]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_CaseWhenSection]
instanceSize:352 sizeof(any):16  propsLength:22
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_Statement]
instanceSize:368 sizeof(any):16  propsLength:23
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_Body]
instanceSize:320 sizeof(any):16  propsLength:20
super: ASTBase  super instanceSize304 super propsLength:19
 ---------
init class [Grammar_SingleLineBody]
instanceSize:320 sizeof(any):16  propsLength:20
super: Grammar_Body  super instanceSize320 super propsLength:20
 ---------
init class [Grammar_Module]
instanceSize:432 sizeof(any):16  propsLength:27
super: Grammar_Body  super instanceSize320 super propsLength:20
 ---------
init class [Names_Declaration]
instanceSize:240 sizeof(any):16  propsLength:15
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Names_NameDeclOptions]
instanceSize:144 sizeof(any):16  propsLength:9
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Names_ConvertResult]
instanceSize:32 sizeof(any):16  propsLength:2
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Environment_FileInfo]
instanceSize:320 sizeof(any):16  propsLength:20
super: Object  super instanceSize0 super propsLength:0
 ---------
init class [Environment_ImportParameterInfo]
instanceSize:64 sizeof(any):16  propsLength:4
super: Object  super instanceSize0 super propsLength:0
 E4C generated/litec.c:23:1 frame:1 e4c_beggining
Project Dir: /home/ltato/LiteScript/devel/liteC/Ctest 
Main Module: ./test 
Out Dir: /home/ltato/LiteScript/devel/liteC/Ctest/lite-out 
preprocessor #defined ["PROD_C", "FROM_C", "ENV_C", "TARGET_C"] 
addMember: 'undefined' to '[Grammar_Module Scope]' 
addMember: 'null' to '[Grammar_Module Scope]' 
addMember: 'true' to '[Grammar_Module Scope]' 
addMember: 'false' to '[Grammar_Module Scope]' 
addMember: 'NaN' to '[Grammar_Module Scope]' 
addMember: 'Infinity' to '[Grammar_Module Scope]' 
addMember: 'Object' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'Object' 
addMember: 'Function' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'Function' 
addMember: 'Array' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'Array' 
addMember: 'String' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'String' 
addMember: 'Number' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'Number' 
addMember: 'Date' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'Date' 
addMember: 'Boolean' to '[Grammar_Module Scope]' 
addMember: 'prototype' to 'Boolean' 
addMember: 'any*' to '[Grammar_Module Scope]' 
addMember: 'toArray' to 'any*' 
addMember: '_concatAny' to '[Grammar_Module Scope]' 
addMember: 'parseFloat' to '[Grammar_Module Scope]' 
addMember: 'parseInt' to '[Grammar_Module Scope]' 
addMember: 'any' to '[Grammar_Module Scope]' 
Declare global scope using  /home/ltato/LiteScript/devel/liteC/Ctest/lib/GlobalScopeC 
E4C core/fs-native.c:84:1 frame:2 e4c_beggining


E4C catched longjmp frame 2

E4C core/fs-native.c:84:1 frame:2 e4c_beggining


E4C catched longjmp frame 2

E4C core/fs-native.c:84:1 frame:2 e4c_beggining
E4C core/fs-native.c:84:1 frame:2 e4c_beggining


E4C catched longjmp frame 2

E4C core/fs-native.c:84:1 frame:2 e4c_beggining
addToScope: 'module' to '[Grammar_Module Scope]' 
addMember: 'module' to '[Grammar_Module Scope]' 
addMember: 'filename' to 'module' 
 compile: 'lib/GlobalScopeC.interface.md' 
E4C generated/Project.c:403:1 frame:2 e4c_beggining
1 0(COMMENT) # Lite-C Engine global environment declarations 
2 (BLANK) 
3 0(COMMENT) The compiler pre-creates some core objects, to allow declaration of property and return types 
4 (BLANK) 
5 0(COMMENT) global vars pre-created are: 
6 2(COMMENT) undefined, null, true, false, NaN 
7 (BLANK) 
8 0(COMMENT) global Classes pre-created are: 
9 2(COMMENT) Object, Function, Array, String, Number, Boolean 
10 (BLANK) 
11 4(CODE)     namespace LiteCore 
12 (BLANK) 
13 8(CODE) method getSymbol(name:string) returns number 
14 (BLANK) 
15 0(COMMENT) ## classes declared in the compiler 
16 (BLANK) 
17 4(CODE)     append to class Function 
18 (BLANK) 
19 8(CODE) properties name 
20 (BLANK) 
21 8(COMMENT) //method bind 
22 8(CODE) method call 
23 8(CODE) method apply 
24 (BLANK) 
25 4(CODE)     append to class Object 
26 (BLANK) 
27 8(CODE) properties 
28 12(CODE) constructor: Function 
29 (BLANK) 
30 8(CODE) method toString() returns string 
31 (BLANK) 
32 8(CODE) method tryGetMethod(methodSymbol) returns function // or undefined 
33 (BLANK) 
34 8(CODE) method tryGetProperty(propSymbol) returns any // or undefined 
35 8(CODE) method getProperty(propSymbol) returns any // or throws 
36 8(CODE) method getPropertyName(propIndex) returns string // or throws 
37 (BLANK) 
38 4(CODE)     append to class Array 
39 8(CODE) properties 
40 12(CODE) length:number 
41 (BLANK) 
42 8(CODE) method tryGet(index:number) 
43 (BLANK) 
44 8(COMMENT) //method toLocaleString() 
45 8(CODE) method join() returns string 
46 8(CODE) method pop() 
47 8(CODE) method push() 
48 8(CODE) method concat() 
49 8(COMMENT) //method reverse() 
50 8(CODE) method shift() 
51 8(CODE) method unshift() 
52 8(CODE) method slice() 
53 8(CODE) method splice() 
54 8(COMMENT) //method sort() 
55 8(COMMENT) //method filter() 
56 8(COMMENT) //method forEach() 
57 8(COMMENT) //method some() 
58 8(COMMENT) //method every() 
59 8(COMMENT) //method map() 
60 8(CODE) method indexOf() 
61 8(CODE) method lastIndexOf() 
62 8(COMMENT) //method reduce() 
63 8(COMMENT) //method reduceRight() 
64 8(COMMENT) //method entries() 
65 8(CODE) method values() 
66 8(CODE) method keys() 
67 8(COMMENT) //method find() 
68 8(COMMENT) //method findIndex() 
69 (BLANK) 
70 4(CODE)     append to class String 
71 (BLANK) 
72 8(CODE) properties 
73 12(CODE) length:number 
74 (BLANK) 
75 8(COMMENT) //method valueOf() 
76 8(CODE) method charAt() returns string 
77 8(COMMENT) //method charCodeAt() 
78 8(CODE) method concat() returns string 
79 8(CODE) method indexOf() 
80 8(CODE) method lastIndexOf() 
81 8(COMMENT) //method localeCompare() 
82 8(COMMENT) //method match() 
83 8(COMMENT) //method normalize() 
84 8(CODE) method replace() returns string 
85 8(COMMENT) //method search() 
86 (BLANK) 
87 8(CODE) method replaceAll(search,replaceby) //like .replace //g 
88 (BLANK) 
89 8(CODE) method slice() returns string 
90 8(CODE) method split(separator:string,limit) returns array of string 
91 (BLANK) 
92 8(COMMENT) //method substring() 
93 8(CODE) method substr() 
94 8(CODE) method toLowerCase() returns string 
95 8(COMMENT) //method toLocaleLowerCase() 
96 8(CODE) method toUpperCase() returns string 
97 8(COMMENT) //method toLocaleUpperCase() 
98 8(CODE) method trim() returns string 
99 8(COMMENT) //method trimLeft() 
100 8(COMMENT) //method trimRight() 
101 (BLANK) 
**** START MULTILINE  /* 
117 (BLANK) 
118 8(COMMENT) //method startsWith() 
119 8(COMMENT) //method endsWith() 
120 (BLANK) 
121 8(COMMENT) //method contains() 
122 (BLANK) 
**** START MULTILINE  /* 
150 (BLANK) 
151 (BLANK) 
152 4(CODE)     append to class Date 
153 (BLANK) 
154 8(CODE) method toDateString() 
155 8(CODE) method toTimeString() 
156 8(CODE) method toUTCString() 
157 8(CODE) method toISOString() 
**** START MULTILINE  /* 
200 (BLANK) 
**** START MULTILINE  /* 
206 0(COMMENT) */ 
207 (BLANK) 
208 0(COMMENT) ## Classes declared here (not in compiler code) 
209 (BLANK) 
210 4(CODE)     public class Error extends Object 
211 8(CODE) properties 
212 12(CODE) name, message 
213 12(CODE) stack 
214 12(CODE) code 
215 (BLANK) 
216 4(COMMENT) //append to namespace Error 
217 4(COMMENT) //    properties 
218 4(COMMENT) //        stackTraceLimit:number 
219 4(COMMENT) // 
220 4(COMMENT) //    method captureStackTrace() 
221 (BLANK) 
222 (BLANK) 
223 4(CODE)     public class Map 
224 (BLANK) 
225 8(CODE) properties 
226 12(CODE) size 
227 (BLANK) 
228 8(CODE) method clear() 
229 (BLANK) 
230 0(COMMENT) To keep compatibility with ES6, we have a special "Map.fromObject()" 
231 0(COMMENT) used to create a Map from a Literal Object. 
232 0(COMMENT) We can't use default Map constructor, since ES6 Map constructor is: new Map([iterator]) 
233 (BLANK) 
234 8(CODE) method fromObject(object) 
235 (BLANK) 
236 8(CODE) method set(key:string, value) 
237 8(CODE) method delete(key:string) 
238 8(CODE) method get(key:string) 
239 8(CODE) method has(key:string) 
240 8(CODE) method keys() returns array 
241 8(CODE) method forEach(callb) 
242 8(CODE) method toString() 
243 (BLANK) 
244 (BLANK) 
245 (BLANK) 
246 4(CODE)     public class RegExp 
247 (BLANK) 
248 8(CODE) properties 
249 12(CODE) source:string 
250 12(CODE) global:boolean 
251 12(CODE) ignoreCase:boolean 
252 12(CODE) multiline:boolean 
253 12(CODE) lastIndex:number 
254 (BLANK) 
255 8(CODE) method exec() 
256 8(CODE) method test() 
257 8(CODE) method toString() 
258 8(CODE) method compile() 
259 (BLANK) 
**** START MULTILINE  /* 
273 4(CODE)     public namespace JSON 
274 8(COMMENT) //method parse() 
275 8(CODE) method stringify() 
276 (BLANK) 
**** START MULTILINE  /* 
319 (BLANK) 
320 0(COMMENT) ## global Functions 
321 (BLANK) 
**** START MULTILINE  /* 
328 (BLANK) 
329 0(COMMENT) ## Global Namespaces 
330 (BLANK) 
331 4(CODE)     public namespace console 
332 (BLANK) 
333 8(CODE) method log 
334 8(CODE) method error 
335 8(CODE) method debug 
336 8(CODE) method group 
337 8(CODE) method groupEnd 
338 (BLANK) 
339 4(CODE)     public namespace process 
340 (BLANK) 
341 8(CODE) properties 
342 12(CODE) argv: array of string 
343 (BLANK) 
344 8(CODE) method cwd returns string //current working directory 
345 (BLANK) 
346 8(CODE) method exit(exitCode:number) 
347 (BLANK) 
348 (BLANK) 
349 (BLANK) 
350 (BLANK) 
---- TOKENIZE 
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
1 0(COMMENT) # Lite-C Engine global environment declarations 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
2 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
3 0(COMMENT) The compiler pre-creates some core objects, to allow declaration of property and return types 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
4 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
5 0(COMMENT) global vars pre-created are: 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
6 2(COMMENT) undefined, null, true, false, NaN 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
7 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
8 0(COMMENT) global Classes pre-created are: 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
9 2(COMMENT) Object, Function, Array, String, Number, Boolean 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
10 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
11 4(CODE)     namespace LiteCore 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
12 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
13 8(CODE) method getSymbol(name:string) returns number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
14 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
15 0(COMMENT) ## classes declared in the compiler 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
16 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
17 4(CODE)     append to class Function 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
18 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
19 8(CODE) properties name 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
20 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
21 8(COMMENT) //method bind 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
22 8(CODE) method call 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
23 8(CODE) method apply 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
24 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
25 4(CODE)     append to class Object 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
26 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
27 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
28 12(CODE) constructor: Function 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
29 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
30 8(CODE) method toString() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
31 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
32 8(CODE) method tryGetMethod(methodSymbol) returns function // or undefined 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
33 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
34 8(CODE) method tryGetProperty(propSymbol) returns any // or undefined 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
35 8(CODE) method getProperty(propSymbol) returns any // or throws 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
36 8(CODE) method getPropertyName(propIndex) returns string // or throws 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
37 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
38 4(CODE)     append to class Array 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
39 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
40 12(CODE) length:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
41 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
42 8(CODE) method tryGet(index:number) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
43 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
44 8(COMMENT) //method toLocaleString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
45 8(CODE) method join() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
46 8(CODE) method pop() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
47 8(CODE) method push() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
48 8(CODE) method concat() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
49 8(COMMENT) //method reverse() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
50 8(CODE) method shift() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
51 8(CODE) method unshift() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
52 8(CODE) method slice() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
53 8(CODE) method splice() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
54 8(COMMENT) //method sort() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
55 8(COMMENT) //method filter() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
56 8(COMMENT) //method forEach() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
57 8(COMMENT) //method some() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
58 8(COMMENT) //method every() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
59 8(COMMENT) //method map() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
60 8(CODE) method indexOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
61 8(CODE) method lastIndexOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
62 8(COMMENT) //method reduce() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
63 8(COMMENT) //method reduceRight() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
64 8(COMMENT) //method entries() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
65 8(CODE) method values() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
66 8(CODE) method keys() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
67 8(COMMENT) //method find() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
68 8(COMMENT) //method findIndex() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
69 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
70 4(CODE)     append to class String 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
71 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
72 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
73 12(CODE) length:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
74 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
75 8(COMMENT) //method valueOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
76 8(CODE) method charAt() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
77 8(COMMENT) //method charCodeAt() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
78 8(CODE) method concat() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
79 8(CODE) method indexOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
80 8(CODE) method lastIndexOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
81 8(COMMENT) //method localeCompare() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
82 8(COMMENT) //method match() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
83 8(COMMENT) //method normalize() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
84 8(CODE) method replace() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
85 8(COMMENT) //method search() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
86 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
87 8(CODE) method replaceAll(search,replaceby) //like .replace //g 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
88 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
89 8(CODE) method slice() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
90 8(CODE) method split(separator:string,limit) returns array of string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
91 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
92 8(COMMENT) //method substring() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
93 8(CODE) method substr() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
94 8(CODE) method toLowerCase() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
95 8(COMMENT) //method toLocaleLowerCase() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
96 8(CODE) method toUpperCase() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
97 8(COMMENT) //method toLocaleUpperCase() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
98 8(CODE) method trim() returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
99 8(COMMENT) //method trimLeft() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
100 8(COMMENT) //method trimRight() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
101 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
102 0(COMMENT) method link() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
103 0(COMMENT)         method anchor() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
104 0(COMMENT)         method fontcolor() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
105 0(COMMENT)         method fontsize() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
106 0(COMMENT)         method big() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
107 0(COMMENT)         method blink() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
108 0(COMMENT)         method bold() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
109 0(COMMENT)         method fixed() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
110 0(COMMENT)         method italics() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
111 0(COMMENT)         method small() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
112 0(COMMENT)         method strike() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
113 0(COMMENT)         method sub() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
114 0(COMMENT)         method sup() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
115 0(COMMENT)         method repeat() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
116 0(COMMENT)          
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
117 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
118 8(COMMENT) //method startsWith() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
119 8(COMMENT) //method endsWith() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
120 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
121 8(COMMENT) //method contains() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
122 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
123 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
124 0(COMMENT) ### Append to class Number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
125 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
126 0(COMMENT)         method toLocaleString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
127 0(COMMENT)         method valueOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
128 0(COMMENT)         method toFixed() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
129 0(COMMENT)         method toExponential() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
130 0(COMMENT)         method toPrecision() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
131 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
132 0(COMMENT)     append to namespace Number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
133 0(COMMENT)         properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
134 0(COMMENT)             MAX_VALUE:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
135 0(COMMENT)             MIN_VALUE:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
136 0(COMMENT)             NaN:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
137 0(COMMENT)             NEGATIVE_INFINITY:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
138 0(COMMENT)             POSITIVE_INFINITY:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
139 0(COMMENT)             MAX_SAFE_INTEGER:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
140 0(COMMENT)             MIN_SAFE_INTEGER:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
141 0(COMMENT)             EPSILON:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
142 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
143 0(COMMENT)         method isFinite() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
144 0(COMMENT)         method isInteger() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
145 0(COMMENT)         method isNaN() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
146 0(COMMENT)         method isSafeInteger() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
147 0(COMMENT)         method parseInt() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
148 0(COMMENT)         method parseFloat() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
150 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
151 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
152 4(CODE)     append to class Date 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
153 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
154 8(CODE) method toDateString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
155 8(CODE) method toTimeString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
156 8(CODE) method toUTCString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
157 8(CODE) method toISOString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
158 0(COMMENT) method toLocaleString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
159 0(COMMENT)         method toLocaleDateString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
160 0(COMMENT)         method toLocaleTimeString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
161 0(COMMENT)         method valueOf() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
162 0(COMMENT)         method getTime() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
163 0(COMMENT)         method getFullYear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
164 0(COMMENT)         method getUTCFullYear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
165 0(COMMENT)         method getMonth() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
166 0(COMMENT)         method getUTCMonth() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
167 0(COMMENT)         method getDate() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
168 0(COMMENT)         method getUTCDate() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
169 0(COMMENT)         method getDay() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
170 0(COMMENT)         method getUTCDay() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
171 0(COMMENT)         method getHours() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
172 0(COMMENT)         method getUTCHours() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
173 0(COMMENT)         method getMinutes() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
174 0(COMMENT)         method getUTCMinutes() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
175 0(COMMENT)         method getSeconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
176 0(COMMENT)         method getUTCSeconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
177 0(COMMENT)         method getMilliseconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
178 0(COMMENT)         method getUTCMilliseconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
179 0(COMMENT)         method getTimezoneOffset() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
180 0(COMMENT)         method setTime() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
181 0(COMMENT)         method setMilliseconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
182 0(COMMENT)         method setUTCMilliseconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
183 0(COMMENT)         method setSeconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
184 0(COMMENT)         method setUTCSeconds() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
185 0(COMMENT)         method setMinutes() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
186 0(COMMENT)         method setUTCMinutes() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
187 0(COMMENT)         method setHours() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
188 0(COMMENT)         method setUTCHours() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
189 0(COMMENT)         method setDate() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
190 0(COMMENT)         method setUTCDate() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
191 0(COMMENT)         method setMonth() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
192 0(COMMENT)         method setUTCMonth() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
193 0(COMMENT)         method setFullYear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
194 0(COMMENT)         method setUTCFullYear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
195 0(COMMENT)         method toGMTString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
196 0(COMMENT)         method getYear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
197 0(COMMENT)         method setYear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
198 0(COMMENT)         method toJSON() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
199 0(COMMENT)          
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
200 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
201 0(COMMENT) append to namespace Date 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
202 0(COMMENT)         method UTC() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
203 0(COMMENT)         method parse() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
204 0(COMMENT)         method now() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
205 0(COMMENT)      
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
206 0(COMMENT) */ 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
207 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
208 0(COMMENT) ## Classes declared here (not in compiler code) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
209 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
210 4(CODE)     public class Error extends Object 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
211 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
212 12(CODE) name, message 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
213 12(CODE) stack 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
214 12(CODE) code 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
215 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
216 4(COMMENT) //append to namespace Error 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
217 4(COMMENT) //    properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
218 4(COMMENT) //        stackTraceLimit:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
219 4(COMMENT) // 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
220 4(COMMENT) //    method captureStackTrace() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
221 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
222 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
223 4(CODE)     public class Map 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
224 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
225 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
226 12(CODE) size 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
227 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
228 8(CODE) method clear() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
229 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
230 0(COMMENT) To keep compatibility with ES6, we have a special "Map.fromObject()" 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
231 0(COMMENT) used to create a Map from a Literal Object. 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
232 0(COMMENT) We can't use default Map constructor, since ES6 Map constructor is: new Map([iterator]) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
233 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
234 8(CODE) method fromObject(object) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
235 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
236 8(CODE) method set(key:string, value) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
237 8(CODE) method delete(key:string) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
238 8(CODE) method get(key:string) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
239 8(CODE) method has(key:string) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
240 8(CODE) method keys() returns array 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
241 8(CODE) method forEach(callb) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
242 8(CODE) method toString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
243 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
244 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
245 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
246 4(CODE)     public class RegExp 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
247 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
248 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
249 12(CODE) source:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
250 12(CODE) global:boolean 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
251 12(CODE) ignoreCase:boolean 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
252 12(CODE) multiline:boolean 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
253 12(CODE) lastIndex:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
254 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
255 8(CODE) method exec() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
256 8(CODE) method test() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
257 8(CODE) method toString() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
258 8(CODE) method compile() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
259 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
260 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
261 0(COMMENT)     append to namespace RegExp 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
262 0(COMMENT)         properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
263 0(COMMENT)             input:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
264 0(COMMENT)             $_:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
265 0(COMMENT)             $input:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
266 0(COMMENT)             multiline:boolean 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
267 0(COMMENT)             lastMatch:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
268 0(COMMENT)             lastParen:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
269 0(COMMENT)             leftContext:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
270 0(COMMENT)             rightContext:string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
271 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
273 4(CODE)     public namespace JSON 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
274 8(COMMENT) //method parse() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
275 8(CODE) method stringify() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
276 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
277 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
278 0(COMMENT) ### public namespace Math 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
279 0(COMMENT)         properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
280 0(COMMENT)             E:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
281 0(COMMENT)             PI:number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
282 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
283 0(COMMENT)         method random() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
284 0(COMMENT)         method abs() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
285 0(COMMENT)         method acos() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
286 0(COMMENT)         method asin() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
287 0(COMMENT)         method atan() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
288 0(COMMENT)         method ceil() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
289 0(COMMENT)         method cos() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
290 0(COMMENT)         method exp() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
291 0(COMMENT)         method floor() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
292 0(COMMENT)         method log() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
293 0(COMMENT)         method round() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
294 0(COMMENT)         method sin() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
295 0(COMMENT)         method sqrt() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
296 0(COMMENT)         method tan() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
297 0(COMMENT)         method atan2() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
298 0(COMMENT)         method pow() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
299 0(COMMENT)         method max() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
300 0(COMMENT)         method min() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
301 0(COMMENT)         method imul() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
302 0(COMMENT)         method sign() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
303 0(COMMENT)         method trunc() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
304 0(COMMENT)         method sinh() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
305 0(COMMENT)         method cosh() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
306 0(COMMENT)         method tanh() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
307 0(COMMENT)         method asinh() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
308 0(COMMENT)         method acosh() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
309 0(COMMENT)         method atanh() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
310 0(COMMENT)         method log10() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
311 0(COMMENT)         method log2() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
312 0(COMMENT)         method hypot() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
313 0(COMMENT)         method fround() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
314 0(COMMENT)         method clz32() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
315 0(COMMENT)         method cbrt() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
316 0(COMMENT)         method log1p() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
317 0(COMMENT)         method expm1() 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
319 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
320 0(COMMENT) ## global Functions 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
321 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
322 0(COMMENT)  
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
323 0(COMMENT)     function setTimeout 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
324 0(COMMENT)     function clearTimeout 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
325 0(COMMENT)     function setInterval 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
326 0(COMMENT)     function clearInterval 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
327 0(COMMENT)      
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
328 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
329 0(COMMENT) ## Global Namespaces 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
330 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
331 4(CODE)     public namespace console 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
332 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
333 8(CODE) method log 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
334 8(CODE) method error 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
335 8(CODE) method debug 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
336 8(CODE) method group 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
337 8(CODE) method groupEnd 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
338 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
339 4(CODE)     public namespace process 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
340 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
341 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
342 12(CODE) argv: array of string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
343 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
344 8(CODE) method cwd returns string //current working directory 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
345 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
346 8(CODE) method exit(exitCode:number) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
347 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
348 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
349 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
350 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
>>>ADVANCE 11:0 [-1] ' '(NEWLINE) 
   Grammar_Module matched OK: NEWLINE   
>>>ADVANCE 11:9 [0] 'namespace'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:*Global Scope*.Grammar_Module parentIndent:undefined, blockIndent:4, closer: EOF 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'namespace'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
11 4(CODE)     namespace LiteCore 
    'namespace'(IDENTIFIER) 'LiteCore'(IDENTIFIER) 

     Grammar_Statement TRY Grammar_NamespaceDeclaration on 'namespace'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_NamespaceDeclaration matched OK: namespace namespace 
>>>ADVANCE 11:19 [1] 'LiteCore'(IDENTIFIER) 
       Grammar_NamespaceDeclaration matched OK: IDENTIFIER LiteCore 
>>>ADVANCE 13:0 [-1] ' '(NEWLINE) 
       Grammar_NamespaceDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 13:9 [0] 'method'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:LiteCore.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
13 8(CODE) method getSymbol(name:string) returns number 
    'method'(IDENTIFIER) 'getSymbol'(IDENTIFIER) '('(PUNCT) 'name'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'number'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 13:16 [1] 'getSymbol'(IDENTIFIER) 
>>>ADVANCE 13:25 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 13:26 [3] 'name'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'name'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER name 
>>>ADVANCE 13:30 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 13:31 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 13:37 [6] ')'(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 13:39 [7] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 13:47 [8] 'number'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 17:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 17:9 [0] 'append'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_NamespaceDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
17 4(CODE)     append to class Function 
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'class'(IDENTIFIER) 'Function'(IDENTIFIER) 

     Grammar_Statement TRY Grammar_AppendToDeclaration on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_AppendToDeclaration matched OK: append append 
>>>ADVANCE 17:16 [1] 'to'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: to to 
>>>ADVANCE 17:19 [2] 'class'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: class class 
>>>ADVANCE 17:25 [3] 'Function'(IDENTIFIER) 
       Grammar_AppendToDeclaration TRY Grammar_VariableRef on 'Function'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER Function 
>>>ADVANCE 19:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_AppendToDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 19:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
19 8(CODE) properties name 
    'properties'(IDENTIFIER) 'name'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 19:20 [1] 'name'(IDENTIFIER) 
optSeparatedList [Grammar_PropertiesDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'name'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER name 
>>>ADVANCE 22:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 22:9 [0] 'method'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 22 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 22:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
22 8(CODE) method call 
    'method'(IDENTIFIER) 'call'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 22:16 [1] 'call'(IDENTIFIER) 
>>>ADVANCE 23:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 23:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
23 8(CODE) method apply 
    'method'(IDENTIFIER) 'apply'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 23:16 [1] 'apply'(IDENTIFIER) 
>>>ADVANCE 25:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 25:9 [0] 'append'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_AppendToDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
25 4(CODE)     append to class Object 
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'class'(IDENTIFIER) 'Object'(IDENTIFIER) 

     Grammar_Statement TRY Grammar_AppendToDeclaration on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_AppendToDeclaration matched OK: append append 
>>>ADVANCE 25:16 [1] 'to'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: to to 
>>>ADVANCE 25:19 [2] 'class'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: class class 
>>>ADVANCE 25:25 [3] 'Object'(IDENTIFIER) 
       Grammar_AppendToDeclaration TRY Grammar_VariableRef on 'Object'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER Object 
>>>ADVANCE 27:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_AppendToDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 27:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
27 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 28:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 28:13 [0] 'constructor'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'constructor'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER constructor 
>>>ADVANCE 28:24 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 28:26 [2] 'Function'(IDENTIFIER) 
               Grammar_VariableDecl matched OK: Function Function 
>>>ADVANCE 30:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 30:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
30 8(CODE) method toString() returns string 
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 30:16 [1] 'toString'(IDENTIFIER) 
>>>ADVANCE 30:24 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 30:25 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 30:27 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 30:35 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 32:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 32:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
32 8(CODE) method tryGetMethod(methodSymbol) returns function // or undefined 
    'method'(IDENTIFIER) 'tryGetMethod'(IDENTIFIER) '('(PUNCT) 'methodSymbol'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'function'(IDENTIFIER) '// or undefined'(COMMENT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 32:16 [1] 'tryGetMethod'(IDENTIFIER) 
>>>ADVANCE 32:28 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 32:29 [3] 'methodSymbol'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'methodSymbol'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER methodSymbol 
>>>ADVANCE 32:41 [4] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 32:43 [5] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 32:51 [6] 'function'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: function function 
>>>ADVANCE 34:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 34:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
34 8(CODE) method tryGetProperty(propSymbol) returns any // or undefined 
    'method'(IDENTIFIER) 'tryGetProperty'(IDENTIFIER) '('(PUNCT) 'propSymbol'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'any'(IDENTIFIER) '// or undefined'(COMMENT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 34:16 [1] 'tryGetProperty'(IDENTIFIER) 
>>>ADVANCE 34:30 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 34:31 [3] 'propSymbol'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'propSymbol'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER propSymbol 
>>>ADVANCE 34:41 [4] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 34:43 [5] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 34:51 [6] 'any'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'any'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER any 
>>>ADVANCE 35:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 35:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
35 8(CODE) method getProperty(propSymbol) returns any // or throws 
    'method'(IDENTIFIER) 'getProperty'(IDENTIFIER) '('(PUNCT) 'propSymbol'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'any'(IDENTIFIER) '// or throws'(COMMENT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 35:16 [1] 'getProperty'(IDENTIFIER) 
>>>ADVANCE 35:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 35:28 [3] 'propSymbol'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'propSymbol'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER propSymbol 
>>>ADVANCE 35:38 [4] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 35:40 [5] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 35:48 [6] 'any'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'any'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER any 
>>>ADVANCE 36:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 36:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
36 8(CODE) method getPropertyName(propIndex) returns string // or throws 
    'method'(IDENTIFIER) 'getPropertyName'(IDENTIFIER) '('(PUNCT) 'propIndex'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) '// or throws'(COMMENT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 36:16 [1] 'getPropertyName'(IDENTIFIER) 
>>>ADVANCE 36:31 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 36:32 [3] 'propIndex'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'propIndex'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER propIndex 
>>>ADVANCE 36:41 [4] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 36:43 [5] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 36:51 [6] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 38:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 38:9 [0] 'append'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_AppendToDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
38 4(CODE)     append to class Array 
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'class'(IDENTIFIER) 'Array'(IDENTIFIER) 

     Grammar_Statement TRY Grammar_AppendToDeclaration on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_AppendToDeclaration matched OK: append append 
>>>ADVANCE 38:16 [1] 'to'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: to to 
>>>ADVANCE 38:19 [2] 'class'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: class class 
>>>ADVANCE 38:25 [3] 'Array'(IDENTIFIER) 
       Grammar_AppendToDeclaration TRY Grammar_VariableRef on 'Array'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER Array 
>>>ADVANCE 39:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_AppendToDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 39:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
39 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 40:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 40:13 [0] 'length'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'length'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER length 
>>>ADVANCE 40:19 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 40:20 [2] 'number'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 42:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 42:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
42 8(CODE) method tryGet(index:number) 
    'method'(IDENTIFIER) 'tryGet'(IDENTIFIER) '('(PUNCT) 'index'(IDENTIFIER) ':'(OPER) 'number'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 42:16 [1] 'tryGet'(IDENTIFIER) 
>>>ADVANCE 42:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 42:23 [3] 'index'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'index'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER index 
>>>ADVANCE 42:28 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 42:29 [5] 'number'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 42:35 [6] ')'(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 45:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 45:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
45 8(CODE) method join() returns string 
    'method'(IDENTIFIER) 'join'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 45:16 [1] 'join'(IDENTIFIER) 
>>>ADVANCE 45:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 45:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 45:23 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 45:31 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 46:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 46:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
46 8(CODE) method pop() 
    'method'(IDENTIFIER) 'pop'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 46:16 [1] 'pop'(IDENTIFIER) 
>>>ADVANCE 46:19 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 46:20 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 47:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 47:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
47 8(CODE) method push() 
    'method'(IDENTIFIER) 'push'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 47:16 [1] 'push'(IDENTIFIER) 
>>>ADVANCE 47:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 47:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 48:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 48:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
48 8(CODE) method concat() 
    'method'(IDENTIFIER) 'concat'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 48:16 [1] 'concat'(IDENTIFIER) 
>>>ADVANCE 48:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 48:23 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 50:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 50:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
50 8(CODE) method shift() 
    'method'(IDENTIFIER) 'shift'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 50:16 [1] 'shift'(IDENTIFIER) 
>>>ADVANCE 50:21 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 50:22 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 51:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 51:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
51 8(CODE) method unshift() 
    'method'(IDENTIFIER) 'unshift'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 51:16 [1] 'unshift'(IDENTIFIER) 
>>>ADVANCE 51:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 51:24 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 52:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 52:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
52 8(CODE) method slice() 
    'method'(IDENTIFIER) 'slice'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 52:16 [1] 'slice'(IDENTIFIER) 
>>>ADVANCE 52:21 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 52:22 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 53:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 53:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
53 8(CODE) method splice() 
    'method'(IDENTIFIER) 'splice'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 53:16 [1] 'splice'(IDENTIFIER) 
>>>ADVANCE 53:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 53:23 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 60:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 60:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
60 8(CODE) method indexOf() 
    'method'(IDENTIFIER) 'indexOf'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 60:16 [1] 'indexOf'(IDENTIFIER) 
>>>ADVANCE 60:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 60:24 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 61:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 61:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
61 8(CODE) method lastIndexOf() 
    'method'(IDENTIFIER) 'lastIndexOf'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 61:16 [1] 'lastIndexOf'(IDENTIFIER) 
>>>ADVANCE 61:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 61:28 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 65:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 65:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
65 8(CODE) method values() 
    'method'(IDENTIFIER) 'values'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 65:16 [1] 'values'(IDENTIFIER) 
>>>ADVANCE 65:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 65:23 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 66:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 66:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
66 8(CODE) method keys() 
    'method'(IDENTIFIER) 'keys'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 66:16 [1] 'keys'(IDENTIFIER) 
>>>ADVANCE 66:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 66:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 70:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 70:9 [0] 'append'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_AppendToDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
70 4(CODE)     append to class String 
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'class'(IDENTIFIER) 'String'(IDENTIFIER) 

     Grammar_Statement TRY Grammar_AppendToDeclaration on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_AppendToDeclaration matched OK: append append 
>>>ADVANCE 70:16 [1] 'to'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: to to 
>>>ADVANCE 70:19 [2] 'class'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: class class 
>>>ADVANCE 70:25 [3] 'String'(IDENTIFIER) 
       Grammar_AppendToDeclaration TRY Grammar_VariableRef on 'String'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER String 
>>>ADVANCE 72:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_AppendToDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 72:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
72 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 73:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 73:13 [0] 'length'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'length'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER length 
>>>ADVANCE 73:19 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 73:20 [2] 'number'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 76:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 76:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
76 8(CODE) method charAt() returns string 
    'method'(IDENTIFIER) 'charAt'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 76:16 [1] 'charAt'(IDENTIFIER) 
>>>ADVANCE 76:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 76:23 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 76:25 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 76:33 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 78:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 78:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
78 8(CODE) method concat() returns string 
    'method'(IDENTIFIER) 'concat'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 78:16 [1] 'concat'(IDENTIFIER) 
>>>ADVANCE 78:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 78:23 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 78:25 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 78:33 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 79:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 79:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
79 8(CODE) method indexOf() 
    'method'(IDENTIFIER) 'indexOf'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 79:16 [1] 'indexOf'(IDENTIFIER) 
>>>ADVANCE 79:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 79:24 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 80:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 80:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
80 8(CODE) method lastIndexOf() 
    'method'(IDENTIFIER) 'lastIndexOf'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 80:16 [1] 'lastIndexOf'(IDENTIFIER) 
>>>ADVANCE 80:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 80:28 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 84:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 84:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
84 8(CODE) method replace() returns string 
    'method'(IDENTIFIER) 'replace'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 84:16 [1] 'replace'(IDENTIFIER) 
>>>ADVANCE 84:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 84:24 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 84:26 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 84:34 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 87:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 87:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
87 8(CODE) method replaceAll(search,replaceby) //like .replace //g 
    'method'(IDENTIFIER) 'replaceAll'(IDENTIFIER) '('(PUNCT) 'search'(IDENTIFIER) ','(PUNCT) 'replaceby'(IDENTIFIER) ')'(PUNCT) '//like .replace //g'(COMMENT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 87:16 [1] 'replaceAll'(IDENTIFIER) 
>>>ADVANCE 87:26 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 87:27 [3] 'search'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'search'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER search 
>>>ADVANCE 87:33 [4] ','(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: , , 
>>>ADVANCE 87:34 [5] 'replaceby'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'replaceby'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER replaceby 
>>>ADVANCE 87:43 [6] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 89:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 89:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
89 8(CODE) method slice() returns string 
    'method'(IDENTIFIER) 'slice'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 89:16 [1] 'slice'(IDENTIFIER) 
>>>ADVANCE 89:21 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 89:22 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 89:24 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 89:32 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 90:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 90:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
90 8(CODE) method split(separator:string,limit) returns array of string 
    'method'(IDENTIFIER) 'split'(IDENTIFIER) '('(PUNCT) 'separator'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ','(PUNCT) 'limit'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'array'(IDENTIFIER) 'of'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 90:16 [1] 'split'(IDENTIFIER) 
>>>ADVANCE 90:21 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 90:22 [3] 'separator'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'separator'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER separator 
>>>ADVANCE 90:31 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 90:32 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 90:38 [6] ','(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: , , 
>>>ADVANCE 90:39 [7] 'limit'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'limit'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER limit 
>>>ADVANCE 90:44 [8] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 90:46 [9] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 90:54 [10] 'array'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: array array 
>>>ADVANCE 90:60 [11] 'of'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: of of 
>>>ADVANCE 90:63 [12] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 93:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 93:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
93 8(CODE) method substr() 
    'method'(IDENTIFIER) 'substr'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 93:16 [1] 'substr'(IDENTIFIER) 
>>>ADVANCE 93:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 93:23 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 94:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 94:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
94 8(CODE) method toLowerCase() returns string 
    'method'(IDENTIFIER) 'toLowerCase'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 94:16 [1] 'toLowerCase'(IDENTIFIER) 
>>>ADVANCE 94:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 94:28 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 94:30 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 94:38 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 96:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 96:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
96 8(CODE) method toUpperCase() returns string 
    'method'(IDENTIFIER) 'toUpperCase'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 96:16 [1] 'toUpperCase'(IDENTIFIER) 
>>>ADVANCE 96:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 96:28 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 96:30 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 96:38 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 98:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 98:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
98 8(CODE) method trim() returns string 
    'method'(IDENTIFIER) 'trim'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 98:16 [1] 'trim'(IDENTIFIER) 
>>>ADVANCE 98:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 98:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 98:23 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 98:31 [5] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 152:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 152:9 [0] 'append'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_AppendToDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
152 4(CODE)     append to class Date 
    'append'(IDENTIFIER) 'to'(IDENTIFIER) 'class'(IDENTIFIER) 'Date'(IDENTIFIER) 

     Grammar_Statement TRY Grammar_AppendToDeclaration on 'append'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_AppendToDeclaration matched OK: append append 
>>>ADVANCE 152:16 [1] 'to'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: to to 
>>>ADVANCE 152:19 [2] 'class'(IDENTIFIER) 
       Grammar_AppendToDeclaration matched OK: class class 
>>>ADVANCE 152:25 [3] 'Date'(IDENTIFIER) 
       Grammar_AppendToDeclaration TRY Grammar_VariableRef on 'Date'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER Date 
>>>ADVANCE 154:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_AppendToDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 154:9 [0] 'method'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
154 8(CODE) method toDateString() 
    'method'(IDENTIFIER) 'toDateString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 154:16 [1] 'toDateString'(IDENTIFIER) 
>>>ADVANCE 154:28 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 154:29 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 155:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 155:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
155 8(CODE) method toTimeString() 
    'method'(IDENTIFIER) 'toTimeString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 155:16 [1] 'toTimeString'(IDENTIFIER) 
>>>ADVANCE 155:28 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 155:29 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 156:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 156:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
156 8(CODE) method toUTCString() 
    'method'(IDENTIFIER) 'toUTCString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 156:16 [1] 'toUTCString'(IDENTIFIER) 
>>>ADVANCE 156:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 156:28 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 157:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 157:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
157 8(CODE) method toISOString() 
    'method'(IDENTIFIER) 'toISOString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 157:16 [1] 'toISOString'(IDENTIFIER) 
>>>ADVANCE 157:27 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 157:28 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 210:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 210:9 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_AppendToDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
210 4(CODE)     public class Error extends Object 
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Error'(IDENTIFIER) 'extends'(IDENTIFIER) 'Object'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 210:16 [1] 'class'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_ClassDeclaration on 'class'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_ClassDeclaration matched OK: class class 
>>>ADVANCE 210:22 [2] 'Error'(IDENTIFIER) 
       Grammar_ClassDeclaration matched OK: IDENTIFIER Error 
>>>ADVANCE 210:28 [3] 'extends'(IDENTIFIER) 
       Grammar_ClassDeclaration matched OK: extends extends 
>>>ADVANCE 210:36 [4] 'Object'(IDENTIFIER) 
       Grammar_ClassDeclaration TRY Grammar_VariableRef on 'Object'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER Object 
>>>ADVANCE 211:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_ClassDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 211:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:Error.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
211 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 212:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 212:13 [0] 'name'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'name'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER name 
>>>ADVANCE 212:17 [1] ','(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: , , 
>>>ADVANCE 212:19 [2] 'message'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'message'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER message 
>>>ADVANCE 213:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 213:13 [0] 'stack'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'stack'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER stack 
>>>ADVANCE 214:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 214:13 [0] 'code'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'code'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER code 
>>>ADVANCE 223:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 223:9 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_ClassDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
223 4(CODE)     public class Map 
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'Map'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 223:16 [1] 'class'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_ClassDeclaration on 'class'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_ClassDeclaration matched OK: class class 
>>>ADVANCE 223:22 [2] 'Map'(IDENTIFIER) 
       Grammar_ClassDeclaration matched OK: IDENTIFIER Map 
>>>ADVANCE 225:0 [-1] ' '(NEWLINE) 
       Grammar_ClassDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 225:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:Map.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
225 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 226:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 226:13 [0] 'size'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'size'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER size 
>>>ADVANCE 228:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 228:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
228 8(CODE) method clear() 
    'method'(IDENTIFIER) 'clear'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 228:16 [1] 'clear'(IDENTIFIER) 
>>>ADVANCE 228:21 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 228:22 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 234:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 234:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
234 8(CODE) method fromObject(object) 
    'method'(IDENTIFIER) 'fromObject'(IDENTIFIER) '('(PUNCT) 'object'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 234:16 [1] 'fromObject'(IDENTIFIER) 
>>>ADVANCE 234:26 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 234:27 [3] 'object'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'object'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER object 
>>>ADVANCE 234:33 [4] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 236:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 236:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
236 8(CODE) method set(key:string, value) 
    'method'(IDENTIFIER) 'set'(IDENTIFIER) '('(PUNCT) 'key'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ','(PUNCT) 'value'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 236:16 [1] 'set'(IDENTIFIER) 
>>>ADVANCE 236:19 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 236:20 [3] 'key'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'key'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER key 
>>>ADVANCE 236:23 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 236:24 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 236:30 [6] ','(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: , , 
>>>ADVANCE 236:32 [7] 'value'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER value 
>>>ADVANCE 236:37 [8] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 237:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 237:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
237 8(CODE) method delete(key:string) 
    'method'(IDENTIFIER) 'delete'(IDENTIFIER) '('(PUNCT) 'key'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 237:16 [1] 'delete'(IDENTIFIER) 
>>>ADVANCE 237:22 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 237:23 [3] 'key'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'key'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER key 
>>>ADVANCE 237:26 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 237:27 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 237:33 [6] ')'(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 238:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 238:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
238 8(CODE) method get(key:string) 
    'method'(IDENTIFIER) 'get'(IDENTIFIER) '('(PUNCT) 'key'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 238:16 [1] 'get'(IDENTIFIER) 
>>>ADVANCE 238:19 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 238:20 [3] 'key'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'key'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER key 
>>>ADVANCE 238:23 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 238:24 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 238:30 [6] ')'(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 239:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 239:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
239 8(CODE) method has(key:string) 
    'method'(IDENTIFIER) 'has'(OPER) '('(PUNCT) 'key'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 239:16 [1] 'has'(OPER) 
>>>ADVANCE 239:19 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 239:20 [3] 'key'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'key'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER key 
>>>ADVANCE 239:23 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 239:24 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 239:30 [6] ')'(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 240:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 240:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
240 8(CODE) method keys() returns array 
    'method'(IDENTIFIER) 'keys'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 'returns'(IDENTIFIER) 'array'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 240:16 [1] 'keys'(IDENTIFIER) 
>>>ADVANCE 240:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 240:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 240:23 [4] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 240:31 [5] 'array'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: array array 
>>>ADVANCE 241:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 241:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
241 8(CODE) method forEach(callb) 
    'method'(IDENTIFIER) 'forEach'(IDENTIFIER) '('(PUNCT) 'callb'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 241:16 [1] 'forEach'(IDENTIFIER) 
>>>ADVANCE 241:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 241:24 [3] 'callb'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'callb'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER callb 
>>>ADVANCE 241:29 [4] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 242:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 242:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
242 8(CODE) method toString() 
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 242:16 [1] 'toString'(IDENTIFIER) 
>>>ADVANCE 242:24 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 242:25 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 246:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 246:9 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_ClassDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
246 4(CODE)     public class RegExp 
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'RegExp'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 246:16 [1] 'class'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_ClassDeclaration on 'class'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_ClassDeclaration matched OK: class class 
>>>ADVANCE 246:22 [2] 'RegExp'(IDENTIFIER) 
       Grammar_ClassDeclaration matched OK: IDENTIFIER RegExp 
>>>ADVANCE 248:0 [-1] ' '(NEWLINE) 
       Grammar_ClassDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 248:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:RegExp.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
248 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 249:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 249:13 [0] 'source'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'source'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER source 
>>>ADVANCE 249:19 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 249:20 [2] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 250:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 250:13 [0] 'global'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'global'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER global 
>>>ADVANCE 250:19 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 250:20 [2] 'boolean'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'boolean'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER boolean 
>>>ADVANCE 251:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 251:13 [0] 'ignoreCase'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'ignoreCase'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER ignoreCase 
>>>ADVANCE 251:23 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 251:24 [2] 'boolean'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'boolean'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER boolean 
>>>ADVANCE 252:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 252:13 [0] 'multiline'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'multiline'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER multiline 
>>>ADVANCE 252:22 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 252:23 [2] 'boolean'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'boolean'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER boolean 
>>>ADVANCE 253:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 253:13 [0] 'lastIndex'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'lastIndex'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER lastIndex 
>>>ADVANCE 253:22 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 253:23 [2] 'number'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 255:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 255:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
255 8(CODE) method exec() 
    'method'(IDENTIFIER) 'exec'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 255:16 [1] 'exec'(IDENTIFIER) 
>>>ADVANCE 255:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 255:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 256:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 256:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
256 8(CODE) method test() 
    'method'(IDENTIFIER) 'test'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 256:16 [1] 'test'(IDENTIFIER) 
>>>ADVANCE 256:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 256:21 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 257:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 257:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
257 8(CODE) method toString() 
    'method'(IDENTIFIER) 'toString'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 257:16 [1] 'toString'(IDENTIFIER) 
>>>ADVANCE 257:24 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 257:25 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 258:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 258:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
258 8(CODE) method compile() 
    'method'(IDENTIFIER) 'compile'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 258:16 [1] 'compile'(IDENTIFIER) 
>>>ADVANCE 258:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 258:24 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 273:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 273:9 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_ClassDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
273 4(CODE)     public namespace JSON 
    'public'(IDENTIFIER) 'namespace'(IDENTIFIER) 'JSON'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 273:16 [1] 'namespace'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_NamespaceDeclaration on 'namespace'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_NamespaceDeclaration matched OK: namespace namespace 
>>>ADVANCE 273:26 [2] 'JSON'(IDENTIFIER) 
       Grammar_NamespaceDeclaration matched OK: IDENTIFIER JSON 
>>>ADVANCE 275:0 [-1] ' '(NEWLINE) 
       Grammar_NamespaceDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 275:9 [0] 'method'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:JSON.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
275 8(CODE) method stringify() 
    'method'(IDENTIFIER) 'stringify'(IDENTIFIER) '('(PUNCT) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 275:16 [1] 'stringify'(IDENTIFIER) 
>>>ADVANCE 275:25 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 275:26 [3] ')'(PUNCT) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 331:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 331:9 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_NamespaceDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
331 4(CODE)     public namespace console 
    'public'(IDENTIFIER) 'namespace'(IDENTIFIER) 'console'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 331:16 [1] 'namespace'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_NamespaceDeclaration on 'namespace'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_NamespaceDeclaration matched OK: namespace namespace 
>>>ADVANCE 331:26 [2] 'console'(IDENTIFIER) 
       Grammar_NamespaceDeclaration matched OK: IDENTIFIER console 
>>>ADVANCE 333:0 [-1] ' '(NEWLINE) 
       Grammar_NamespaceDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 333:9 [0] 'method'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:console.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
333 8(CODE) method log 
    'method'(IDENTIFIER) 'log'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 333:16 [1] 'log'(IDENTIFIER) 
>>>ADVANCE 334:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 334:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
334 8(CODE) method error 
    'method'(IDENTIFIER) 'error'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 334:16 [1] 'error'(IDENTIFIER) 
>>>ADVANCE 335:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 335:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
335 8(CODE) method debug 
    'method'(IDENTIFIER) 'debug'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 335:16 [1] 'debug'(IDENTIFIER) 
>>>ADVANCE 336:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 336:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
336 8(CODE) method group 
    'method'(IDENTIFIER) 'group'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 336:16 [1] 'group'(IDENTIFIER) 
>>>ADVANCE 337:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 337:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
337 8(CODE) method groupEnd 
    'method'(IDENTIFIER) 'groupEnd'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 337:16 [1] 'groupEnd'(IDENTIFIER) 
>>>ADVANCE 339:0 [-1] ' '(NEWLINE) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 339:9 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_NamespaceDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
339 4(CODE)     public namespace process 
    'public'(IDENTIFIER) 'namespace'(IDENTIFIER) 'process'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 339:16 [1] 'namespace'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_NamespaceDeclaration on 'namespace'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_NamespaceDeclaration matched OK: namespace namespace 
>>>ADVANCE 339:26 [2] 'process'(IDENTIFIER) 
       Grammar_NamespaceDeclaration matched OK: IDENTIFIER process 
>>>ADVANCE 341:0 [-1] ' '(NEWLINE) 
       Grammar_NamespaceDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 341:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:process.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
341 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 342:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 342:13 [0] 'argv'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'argv'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER argv 
>>>ADVANCE 342:17 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 342:19 [2] 'array'(IDENTIFIER) 
               Grammar_VariableDecl matched OK: array array 
>>>ADVANCE 342:25 [3] 'of'(IDENTIFIER) 
               Grammar_VariableDecl matched OK: of of 
>>>ADVANCE 342:28 [4] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 344:0 [-1] ' '(NEWLINE) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 344:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
344 8(CODE) method cwd returns string //current working directory 
    'method'(IDENTIFIER) 'cwd'(IDENTIFIER) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) '//current working directory'(COMMENT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 344:16 [1] 'cwd'(IDENTIFIER) 
>>>ADVANCE 344:20 [2] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 344:28 [3] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 346:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 346:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
346 8(CODE) method exit(exitCode:number) 
    'method'(IDENTIFIER) 'exit'(IDENTIFIER) '('(PUNCT) 'exitCode'(IDENTIFIER) ':'(OPER) 'number'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 346:16 [1] 'exit'(IDENTIFIER) 
>>>ADVANCE 346:20 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 346:21 [3] 'exitCode'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'exitCode'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER exitCode 
>>>ADVANCE 346:29 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 346:30 [5] 'number'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 346:36 [6] ')'(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 346:0 [-1] ' '(EOF) 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(EOF) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_NamespaceDeclaration 
   Parsed OK!-> Grammar_Statement 
   Grammar_Module matched OK: EOF   
>>>ADVANCE 346:0 [0] ' '(EOF) 
END freeFormMode [Grammar_Module] blockIndent:4, get SeparatedList of [Grammar_Statement] by ';' closer: EOF 
E4C generated/Project.c:403:1 frame:2 e4c_done
callOnSubTree Grammar_Module.declare() - '/home/ltato/LiteScript/devel/liteC/Ctest/lib/GlobalScopeC.interface.md' 
  callOnSubArray Grammar_Module.statements[] 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_NamespaceDeclaration.declare() - 'LiteCore' 
      calling Grammar_NamespaceDeclaration.declare() - 'LiteCore' 
      addToScope: 'LiteCore' to '[Grammar_Module Scope]' 
      addMember: 'LiteCore' to '[Grammar_Module Scope]' 
      addMember: 'LiteCore' to 'GlobalScopeC' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'getSymbol' 
            calling Grammar_MethodDeclaration.declare() - 'getSymbol' 
            addMember: 'getSymbol' to 'LiteCore' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'name' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'name' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'Number' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'name' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_AppendToDeclaration.declare() - 'undefined' 
      calling Grammar_AppendToDeclaration.declare() - 'undefined' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'name' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'name' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'call' 
            calling Grammar_MethodDeclaration.declare() - 'call' 
            addMember: 'call' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'apply' 
            calling Grammar_MethodDeclaration.declare() - 'apply' 
            addMember: 'apply' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
      callOnSubTree Grammar_VariableRef.declare() - 'Function' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_AppendToDeclaration.declare() - 'undefined' 
      calling Grammar_AppendToDeclaration.declare() - 'undefined' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'constructor' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'constructor' 
              callOnSubTree Grammar_VariableRef.declare() - 'Function' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toString' 
            calling Grammar_MethodDeclaration.declare() - 'toString' 
            addMember: 'toString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'tryGetMethod' 
            calling Grammar_MethodDeclaration.declare() - 'tryGetMethod' 
            addMember: 'tryGetMethod' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'methodSymbol' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'methodSymbol' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'Function' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'methodSymbol' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'tryGetProperty' 
            calling Grammar_MethodDeclaration.declare() - 'tryGetProperty' 
            addMember: 'tryGetProperty' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'propSymbol' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'propSymbol' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'any' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'propSymbol' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'getProperty' 
            calling Grammar_MethodDeclaration.declare() - 'getProperty' 
            addMember: 'getProperty' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'propSymbol' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'propSymbol' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'any' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'propSymbol' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'getPropertyName' 
            calling Grammar_MethodDeclaration.declare() - 'getPropertyName' 
            addMember: 'getPropertyName' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'propIndex' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'propIndex' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'propIndex' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
      callOnSubTree Grammar_VariableRef.declare() - 'Object' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_AppendToDeclaration.declare() - 'undefined' 
      calling Grammar_AppendToDeclaration.declare() - 'undefined' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'length' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'length' 
              callOnSubTree Grammar_VariableRef.declare() - 'Number' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'tryGet' 
            calling Grammar_MethodDeclaration.declare() - 'tryGet' 
            addMember: 'tryGet' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'index' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'index' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'index' 
              callOnSubTree Grammar_VariableRef.declare() - 'Number' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'join' 
            calling Grammar_MethodDeclaration.declare() - 'join' 
            addMember: 'join' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'pop' 
            calling Grammar_MethodDeclaration.declare() - 'pop' 
            addMember: 'pop' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'push' 
            calling Grammar_MethodDeclaration.declare() - 'push' 
            addMember: 'push' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'concat' 
            calling Grammar_MethodDeclaration.declare() - 'concat' 
            addMember: 'concat' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'shift' 
            calling Grammar_MethodDeclaration.declare() - 'shift' 
            addMember: 'shift' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'unshift' 
            calling Grammar_MethodDeclaration.declare() - 'unshift' 
            addMember: 'unshift' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'slice' 
            calling Grammar_MethodDeclaration.declare() - 'slice' 
            addMember: 'slice' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'splice' 
            calling Grammar_MethodDeclaration.declare() - 'splice' 
            addMember: 'splice' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'indexOf' 
            calling Grammar_MethodDeclaration.declare() - 'indexOf' 
            addMember: 'indexOf' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'lastIndexOf' 
            calling Grammar_MethodDeclaration.declare() - 'lastIndexOf' 
            addMember: 'lastIndexOf' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'values' 
            calling Grammar_MethodDeclaration.declare() - 'values' 
            addMember: 'values' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'keys' 
            calling Grammar_MethodDeclaration.declare() - 'keys' 
            addMember: 'keys' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
      callOnSubTree Grammar_VariableRef.declare() - 'Array' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_AppendToDeclaration.declare() - 'undefined' 
      calling Grammar_AppendToDeclaration.declare() - 'undefined' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'length' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'length' 
              callOnSubTree Grammar_VariableRef.declare() - 'Number' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'charAt' 
            calling Grammar_MethodDeclaration.declare() - 'charAt' 
            addMember: 'charAt' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'concat' 
            calling Grammar_MethodDeclaration.declare() - 'concat' 
            addMember: 'concat' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'indexOf' 
            calling Grammar_MethodDeclaration.declare() - 'indexOf' 
            addMember: 'indexOf' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'lastIndexOf' 
            calling Grammar_MethodDeclaration.declare() - 'lastIndexOf' 
            addMember: 'lastIndexOf' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'replace' 
            calling Grammar_MethodDeclaration.declare() - 'replace' 
            addMember: 'replace' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'replaceAll' 
            calling Grammar_MethodDeclaration.declare() - 'replaceAll' 
            addMember: 'replaceAll' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'search' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'search' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'replaceby' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'replaceby' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'search' 
            callOnSubTree Grammar_VariableDecl.declare() - 'replaceby' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'slice' 
            calling Grammar_MethodDeclaration.declare() - 'slice' 
            addMember: 'slice' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'split' 
            calling Grammar_MethodDeclaration.declare() - 'split' 
            addMember: 'split' to 'prototype' 
            addMember: 'String Array' to '[Grammar_Module Scope]' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'separator' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'separator' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'limit' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'limit' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'separator' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_VariableDecl.declare() - 'limit' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'substr' 
            calling Grammar_MethodDeclaration.declare() - 'substr' 
            addMember: 'substr' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toLowerCase' 
            calling Grammar_MethodDeclaration.declare() - 'toLowerCase' 
            addMember: 'toLowerCase' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toUpperCase' 
            calling Grammar_MethodDeclaration.declare() - 'toUpperCase' 
            addMember: 'toUpperCase' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'trim' 
            calling Grammar_MethodDeclaration.declare() - 'trim' 
            addMember: 'trim' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
      callOnSubTree Grammar_VariableRef.declare() - 'String' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_AppendToDeclaration.declare() - 'undefined' 
      calling Grammar_AppendToDeclaration.declare() - 'undefined' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toDateString' 
            calling Grammar_MethodDeclaration.declare() - 'toDateString' 
            addMember: 'toDateString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toTimeString' 
            calling Grammar_MethodDeclaration.declare() - 'toTimeString' 
            addMember: 'toTimeString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toUTCString' 
            calling Grammar_MethodDeclaration.declare() - 'toUTCString' 
            addMember: 'toUTCString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toISOString' 
            calling Grammar_MethodDeclaration.declare() - 'toISOString' 
            addMember: 'toISOString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
      callOnSubTree Grammar_VariableRef.declare() - 'Date' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.declare() - 'Error' 
      calling Grammar_ClassDeclaration.declare() - 'Error' 
      addToScope: 'Error' to '[Grammar_Module Scope]' 
      addMember: 'Error' to '[Grammar_Module Scope]' 
      addMember: 'Error' to 'GlobalScopeC' 
      addMember: 'prototype' to 'Error' 
      addMember: 'constructor' to 'prototype' 
      callOnSubTree Grammar_VariableRef.declare() - 'Object' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'name' to 'prototype' 
            addMember: 'message' to 'prototype' 
            addMember: 'stack' to 'prototype' 
            addMember: 'code' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'name' 
            callOnSubTree Grammar_VariableDecl.declare() - 'message' 
            callOnSubTree Grammar_VariableDecl.declare() - 'stack' 
            callOnSubTree Grammar_VariableDecl.declare() - 'code' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.declare() - 'Map' 
      calling Grammar_ClassDeclaration.declare() - 'Map' 
      addToScope: 'Map' to '[Grammar_Module Scope]' 
      addMember: 'Map' to '[Grammar_Module Scope]' 
      addMember: 'Map' to 'GlobalScopeC' 
      addMember: 'prototype' to 'Map' 
      addMember: 'constructor' to 'prototype' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'size' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'size' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'clear' 
            calling Grammar_MethodDeclaration.declare() - 'clear' 
            addMember: 'clear' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'fromObject' 
            calling Grammar_MethodDeclaration.declare() - 'fromObject' 
            addMember: 'fromObject' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'object' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'object' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'object' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'set' 
            calling Grammar_MethodDeclaration.declare() - 'set' 
            addMember: 'set' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'key' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'key' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'value' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'value' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'key' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_VariableDecl.declare() - 'value' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'delete' 
            calling Grammar_MethodDeclaration.declare() - 'delete' 
            addMember: 'delete' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'key' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'key' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'key' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'get' 
            calling Grammar_MethodDeclaration.declare() - 'get' 
            addMember: 'get' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'key' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'key' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'key' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'has' 
            calling Grammar_MethodDeclaration.declare() - 'has' 
            addMember: 'has' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'key' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'key' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'key' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'keys' 
            calling Grammar_MethodDeclaration.declare() - 'keys' 
            addMember: 'keys' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'forEach' 
            calling Grammar_MethodDeclaration.declare() - 'forEach' 
            addMember: 'forEach' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'callb' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'callb' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'callb' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toString' 
            calling Grammar_MethodDeclaration.declare() - 'toString' 
            addMember: 'toString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.declare() - 'RegExp' 
      calling Grammar_ClassDeclaration.declare() - 'RegExp' 
      addToScope: 'RegExp' to '[Grammar_Module Scope]' 
      addMember: 'RegExp' to '[Grammar_Module Scope]' 
      addMember: 'RegExp' to 'GlobalScopeC' 
      addMember: 'prototype' to 'RegExp' 
      addMember: 'constructor' to 'prototype' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'source' to 'prototype' 
            addMember: 'global' to 'prototype' 
            addMember: 'ignoreCase' to 'prototype' 
            addMember: 'multiline' to 'prototype' 
            addMember: 'lastIndex' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'source' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_VariableDecl.declare() - 'global' 
              callOnSubTree Grammar_VariableRef.declare() - 'Boolean' 
            callOnSubTree Grammar_VariableDecl.declare() - 'ignoreCase' 
              callOnSubTree Grammar_VariableRef.declare() - 'Boolean' 
            callOnSubTree Grammar_VariableDecl.declare() - 'multiline' 
              callOnSubTree Grammar_VariableRef.declare() - 'Boolean' 
            callOnSubTree Grammar_VariableDecl.declare() - 'lastIndex' 
              callOnSubTree Grammar_VariableRef.declare() - 'Number' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'exec' 
            calling Grammar_MethodDeclaration.declare() - 'exec' 
            addMember: 'exec' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'test' 
            calling Grammar_MethodDeclaration.declare() - 'test' 
            addMember: 'test' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'toString' 
            calling Grammar_MethodDeclaration.declare() - 'toString' 
            addMember: 'toString' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'compile' 
            calling Grammar_MethodDeclaration.declare() - 'compile' 
            addMember: 'compile' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_NamespaceDeclaration.declare() - 'JSON' 
      calling Grammar_NamespaceDeclaration.declare() - 'JSON' 
      addToScope: 'JSON' to '[Grammar_Module Scope]' 
      addMember: 'JSON' to '[Grammar_Module Scope]' 
      addMember: 'JSON' to 'GlobalScopeC' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'stringify' 
            calling Grammar_MethodDeclaration.declare() - 'stringify' 
            addMember: 'stringify' to 'JSON' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_NamespaceDeclaration.declare() - 'console' 
      calling Grammar_NamespaceDeclaration.declare() - 'console' 
      addToScope: 'console' to '[Grammar_Module Scope]' 
      addMember: 'console' to '[Grammar_Module Scope]' 
      addMember: 'console' to 'GlobalScopeC' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'log' 
            calling Grammar_MethodDeclaration.declare() - 'log' 
            addMember: 'log' to 'console' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'error' 
            calling Grammar_MethodDeclaration.declare() - 'error' 
            addMember: 'error' to 'console' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'debug' 
            calling Grammar_MethodDeclaration.declare() - 'debug' 
            addMember: 'debug' to 'console' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'group' 
            calling Grammar_MethodDeclaration.declare() - 'group' 
            addMember: 'group' to 'console' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'groupEnd' 
            calling Grammar_MethodDeclaration.declare() - 'groupEnd' 
            addMember: 'groupEnd' to 'console' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_NamespaceDeclaration.declare() - 'process' 
      calling Grammar_NamespaceDeclaration.declare() - 'process' 
      addToScope: 'process' to '[Grammar_Module Scope]' 
      addMember: 'process' to '[Grammar_Module Scope]' 
      addMember: 'process' to 'GlobalScopeC' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'argv' to 'process' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'argv' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'cwd' 
            calling Grammar_MethodDeclaration.declare() - 'cwd' 
            addMember: 'cwd' to 'process' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'exit' 
            calling Grammar_MethodDeclaration.declare() - 'exit' 
            addMember: 'exit' to 'process' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'exitCode' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'exitCode' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'exitCode' 
              callOnSubTree Grammar_VariableRef.declare() - 'Number' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
addToScope: 'LiteCore' to '[Grammar_Module Scope]' 
addMember: 'LiteCore' to '[Grammar_Module Scope]' 
addToScope: 'Error' to '[Grammar_Module Scope]' 
addMember: 'Error' to '[Grammar_Module Scope]' 
addToScope: 'Map' to '[Grammar_Module Scope]' 
addMember: 'Map' to '[Grammar_Module Scope]' 
addToScope: 'RegExp' to '[Grammar_Module Scope]' 
addMember: 'RegExp' to '[Grammar_Module Scope]' 
addToScope: 'JSON' to '[Grammar_Module Scope]' 
addMember: 'JSON' to '[Grammar_Module Scope]' 
addToScope: 'console' to '[Grammar_Module Scope]' 
addMember: 'console' to '[Grammar_Module Scope]' 
addToScope: 'process' to '[Grammar_Module Scope]' 
addMember: 'process' to '[Grammar_Module Scope]' 
 
   'Project' imports './test' 
E4C core/fs-native.c:84:1 frame:2 e4c_beggining
E4C core/fs-native.c:84:1 frame:2 e4c_beggining


E4C catched longjmp frame 2

E4C core/fs-native.c:84:1 frame:2 e4c_beggining


E4C catched longjmp frame 2

E4C core/fs-native.c:84:1 frame:2 e4c_beggining


E4C catched longjmp frame 2

addToScope: 'module' to '[Grammar_Module Scope]' 
addMember: 'module' to '[Grammar_Module Scope]' 
addMember: 'filename' to 'module' 
   compile: 'test.lite.md' 
E4C generated/Project.c:403:1 frame:2 e4c_beggining
1 0(COMMENT) Test 
2 (BLANK) 
3 4(CODE) public function inRange(min, value, max) returns number 
4 8(CODE) return case 
5 16(CODE) when value<min then min 
6 16(CODE) when value>max then max 
7 16(CODE) else value 
8 15(CODE) end 
9 (BLANK) 
10 4(CODE) public class TestClass 
11 (BLANK) 
12 8(CODE) properties 
13 12(CODE) myArr: string array 
14 (BLANK) 
15 8(CODE) constructor new TestClass(initValue:array) 
16 12(CODE) .myArr = initValue 
17 (BLANK) 
18 8(CODE) method indexOf(searched:string, fromIndex:number=0) returns number 
19 (BLANK) 
20 12(CODE) for n=fromIndex while n<.myArr.length 
21 16(CODE) if .myArr[n] is searched, return n; 
22 12(CODE) return -1 
23 (BLANK) 
24 8(CODE) method sliceJoin(start, endPos) returns string 
25 (BLANK) 
26 12(CODE) var len = .myArr.length 
27 (BLANK) 
28 12(CODE) default endPos = len+1 
29 (BLANK) 
30 12(CODE) start = inRange( 0, start<0?len+start:start , len-1) 
31 (BLANK) 
32 12(CODE) endPos = inRange( 0, endPos<0?len+endPos:endPos , len-1) 
33 (BLANK) 
34 12(CODE) if start>=endPos, return '' 
35 (BLANK) 
36 12(CODE) var result:string = "" 
37 12(CODE) for n=start to endPos 
38 16(CODE) result = "#{result}#{.myArr[n]} "; 
39 (BLANK) 
40 12(CODE) return result 
41 (BLANK) 
42 (BLANK) 
43 (BLANK) 
44 (BLANK) 
---- TOKENIZE 
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
1 0(COMMENT) Test 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
2 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
3 4(CODE) public function inRange(min, value, max) returns number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
4 8(CODE) return case 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
5 16(CODE) when value<min then min 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
6 16(CODE) when value>max then max 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
7 16(CODE) else value 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
8 15(CODE) end 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
9 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
10 4(CODE) public class TestClass 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
11 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
12 8(CODE) properties 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
13 12(CODE) myArr: string array 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
14 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
15 8(CODE) constructor new TestClass(initValue:array) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
16 12(CODE) .myArr = initValue 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
17 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
18 8(CODE) method indexOf(searched:string, fromIndex:number=0) returns number 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
19 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
20 12(CODE) for n=fromIndex while n<.myArr.length 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
21 16(CODE) if .myArr[n] is searched, return n; 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
22 12(CODE) return -1 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
23 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
24 8(CODE) method sliceJoin(start, endPos) returns string 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
25 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
26 12(CODE) var len = .myArr.length 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
27 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
28 12(CODE) default endPos = len+1 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
29 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
30 12(CODE) start = inRange( 0, start<0?len+start:start , len-1) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
31 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
32 12(CODE) endPos = inRange( 0, endPos<0?len+endPos:endPos , len-1) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
33 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
34 12(CODE) if start>=endPos, return '' 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
35 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
36 12(CODE) var result:string = "" 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
37 12(CODE) for n=start to endPos 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
38 16(CODE) result = "#{result}#{.myArr[n]} "; 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
39 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
40 12(CODE) return result 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
41 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
42 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
43 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
E4C generated/Parser.c:605:1 frame:3 e4c_beggining
44 (BLANK) 
E4C generated/Parser.c:605:1 frame:3 e4c_done
>>>ADVANCE 3:0 [-1] ' '(NEWLINE) 
   Grammar_Module matched OK: NEWLINE   
>>>ADVANCE 3:5 [0] 'public'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:*Global Scope*.Grammar_Module parentIndent:undefined, blockIndent:4, closer: EOF 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
3 4(CODE) public function inRange(min, value, max) returns number 
    'public'(IDENTIFIER) 'function'(IDENTIFIER) 'inRange'(IDENTIFIER) '('(PUNCT) 'min'(IDENTIFIER) ','(PUNCT) 'value'(IDENTIFIER) ','(PUNCT) 'max'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'number'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 3:12 [1] 'function'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_FunctionDeclaration on 'function'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_FunctionDeclaration matched OK: function function 
>>>ADVANCE 3:21 [2] 'inRange'(IDENTIFIER) 
       Grammar_FunctionDeclaration matched OK: IDENTIFIER inRange 
>>>ADVANCE 3:28 [3] '('(PUNCT) 
       Grammar_FunctionDeclaration matched OK: ( ( 
>>>ADVANCE 3:29 [4] 'min'(IDENTIFIER) 
optSeparatedList [Grammar_FunctionDeclaration] indent:4, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
       Grammar_FunctionDeclaration TRY Grammar_VariableDecl on 'min'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableDecl matched OK: IDENTIFIER min 
>>>ADVANCE 3:32 [5] ','(PUNCT) 
       Parsed OK!-> Grammar_VariableDecl 
       Grammar_FunctionDeclaration matched OK: , , 
>>>ADVANCE 3:34 [6] 'value'(IDENTIFIER) 
       Grammar_FunctionDeclaration TRY Grammar_VariableDecl on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableDecl matched OK: IDENTIFIER value 
>>>ADVANCE 3:39 [7] ','(PUNCT) 
       Parsed OK!-> Grammar_VariableDecl 
       Grammar_FunctionDeclaration matched OK: , , 
>>>ADVANCE 3:41 [8] 'max'(IDENTIFIER) 
       Grammar_FunctionDeclaration TRY Grammar_VariableDecl on 'max'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableDecl matched OK: IDENTIFIER max 
>>>ADVANCE 3:44 [9] ')'(PUNCT) 
       Parsed OK!-> Grammar_VariableDecl 
       Grammar_FunctionDeclaration matched OK: ) ) 
>>>ADVANCE 3:46 [10] 'returns'(IDENTIFIER) 
       Grammar_FunctionDeclaration matched OK: returns returns 
>>>ADVANCE 3:54 [11] 'number'(IDENTIFIER) 
       Grammar_FunctionDeclaration TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 4:0 [-1] ' '(NEWLINE) 
       Parsed OK!-> Grammar_VariableRef 
       Grammar_FunctionDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 4:9 [0] 'return'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:inRange.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
4 8(CODE) return case 
    'return'(IDENTIFIER) 'case'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_ReturnStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_ReturnStatement matched OK: return return 
>>>ADVANCE 4:16 [1] 'case'(IDENTIFIER) 
             Grammar_ReturnStatement TRY Grammar_Expression on 'case'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_Expression TRY Grammar_Operand on 'case'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_Operand TRY Grammar_CaseWhenExpression on 'case'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_CaseWhenExpression matched OK: case case 
>>>ADVANCE 5:0 [-1] ' '(NEWLINE) 
                   Grammar_CaseWhenExpression TRY Grammar_VariableRef on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_VariableRef parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:4:17. Grammar_VariableRef: found ' '(NEWLINE) but 'IDENTIFIER' required 
<<REW to 5:0 [-1] ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                   Grammar_CaseWhenExpression matched OK: NEWLINE   
>>>ADVANCE 5:17 [0] 'when'(IDENTIFIER) 
                   Grammar_CaseWhenExpression matched OK: when when 
>>>ADVANCE 5:22 [1] 'value'(IDENTIFIER) 
                   Grammar_CaseWhenExpression TRY Grammar_CaseWhenSection on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_CaseWhenSection TRY Grammar_Expression on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER value 
>>>ADVANCE 5:27 [2] '<'(OPER) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression TRY Grammar_Oper on '<'(OPER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Oper matched OK: OPER < 
>>>ADVANCE 5:28 [3] 'min'(IDENTIFIER) 
                       Parsed OK!-> Grammar_Oper 
                       Grammar_Expression TRY Grammar_Operand on 'min'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'min'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER min 
>>>ADVANCE 5:32 [4] 'then'(IDENTIFIER) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression TRY Grammar_Oper on 'then'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining


E4C catched longjmp frame 13

                       Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:5:29. Grammar_Oper: found 'then'(IDENTIFIER) but 'OPER' required 
<<REW to 5:32 [4] 'then'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_done
                     Parsed OK!-> Grammar_Expression 
                     Grammar_CaseWhenSection matched OK: then then 
>>>ADVANCE 5:37 [5] 'min'(IDENTIFIER) 
                     Grammar_CaseWhenSection TRY Grammar_Expression on 'min'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'min'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'min'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER min 
>>>ADVANCE 6:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 6:17 [0] 'when'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 6 
                     Parsed OK!-> Grammar_Expression 
                   Parsed OK!-> Grammar_CaseWhenSection 
                   Grammar_CaseWhenExpression matched OK: NEWLINE   
>>>ADVANCE 6:17 [0] 'when'(IDENTIFIER) 
                   Grammar_CaseWhenExpression matched OK: when when 
>>>ADVANCE 6:22 [1] 'value'(IDENTIFIER) 
                   Grammar_CaseWhenExpression TRY Grammar_CaseWhenSection on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_CaseWhenSection TRY Grammar_Expression on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER value 
>>>ADVANCE 6:27 [2] '>'(OPER) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression TRY Grammar_Oper on '>'(OPER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Oper matched OK: OPER > 
>>>ADVANCE 6:28 [3] 'max'(IDENTIFIER) 
                       Parsed OK!-> Grammar_Oper 
                       Grammar_Expression TRY Grammar_Operand on 'max'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'max'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER max 
>>>ADVANCE 6:32 [4] 'then'(IDENTIFIER) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression TRY Grammar_Oper on 'then'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining


E4C catched longjmp frame 13

                       Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:6:29. Grammar_Oper: found 'then'(IDENTIFIER) but 'OPER' required 
<<REW to 6:32 [4] 'then'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_done
                     Parsed OK!-> Grammar_Expression 
                     Grammar_CaseWhenSection matched OK: then then 
>>>ADVANCE 6:37 [5] 'max'(IDENTIFIER) 
                     Grammar_CaseWhenSection TRY Grammar_Expression on 'max'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'max'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'max'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER max 
>>>ADVANCE 7:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 7:17 [0] 'else'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 7 
                     Parsed OK!-> Grammar_Expression 
                   Parsed OK!-> Grammar_CaseWhenSection 
                   Grammar_CaseWhenExpression matched OK: NEWLINE   
>>>ADVANCE 7:17 [0] 'else'(IDENTIFIER) 
                   Grammar_CaseWhenExpression matched OK: else else 
>>>ADVANCE 7:22 [1] 'value'(IDENTIFIER) 
                   Grammar_CaseWhenExpression TRY Grammar_Expression on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_Operand on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'value'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER value 
>>>ADVANCE 8:0 [-1] ' '(NEWLINE) 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 8:16 [0] 'end'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 8 
                   Parsed OK!-> Grammar_Expression 
                   Grammar_CaseWhenExpression matched OK: NEWLINE   
>>>ADVANCE 8:16 [0] 'end'(IDENTIFIER) 
                   Grammar_CaseWhenExpression matched OK: end end 
>>>ADVANCE 10:0 [-1] ' '(NEWLINE) 
                 Parsed OK!-> Grammar_CaseWhenExpression 
               Parsed OK!-> Grammar_Operand 
               Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 10:5 [0] 'public'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 10 
             Parsed OK!-> Grammar_Expression 
           Parsed OK!-> Grammar_ReturnStatement 
         Parsed OK!-> Grammar_Statement 
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 10:5 [0] 'public'(IDENTIFIER) 
freeForm Mode .lexer.indent:4 block indent:8 parentIndent:4 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_FunctionDeclaration 
   Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:4 block indent:4 parentIndent:undefined 
   Grammar_Module TRY Grammar_Statement on 'public'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:3 e4c_beggining
 
10 4(CODE) public class TestClass 
    'public'(IDENTIFIER) 'class'(IDENTIFIER) 'TestClass'(IDENTIFIER) 

     Grammar_Statement matched OK: public public 
>>>ADVANCE 10:12 [1] 'class'(IDENTIFIER) 
     Grammar_Statement TRY Grammar_ClassDeclaration on 'class'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:4 e4c_beggining
       Grammar_ClassDeclaration matched OK: class class 
>>>ADVANCE 10:18 [2] 'TestClass'(IDENTIFIER) 
       Grammar_ClassDeclaration matched OK: IDENTIFIER TestClass 
>>>ADVANCE 12:0 [-1] ' '(NEWLINE) 
       Grammar_ClassDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:5 e4c_beggining
         Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 12:9 [0] 'properties'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:TestClass.Grammar_Body parentIndent:4, blockIndent:8, closer: -no- 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
12 8(CODE) properties 
    'properties'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_PropertiesDeclaration on 'properties'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_PropertiesDeclaration matched OK: properties properties 
>>>ADVANCE 13:0 [-1] ' '(NEWLINE) 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 13:13 [0] 'myArr'(IDENTIFIER) 
optFreeFormList: [Grammar_VariableDecl ,]*  parent:undefined.Grammar_PropertiesDeclaration parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
             Grammar_PropertiesDeclaration TRY Grammar_VariableDecl on 'myArr'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER myArr 
>>>ADVANCE 13:18 [1] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 13:20 [2] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 13:27 [3] 'array'(IDENTIFIER) 
               Parsed OK!-> Grammar_VariableRef 
               Grammar_VariableDecl matched OK: array array 
>>>ADVANCE 15:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_PropertiesDeclaration matched OK: NEWLINE   
>>>ADVANCE 15:9 [0] 'constructor'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_PropertiesDeclaration] blockIndent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
           Parsed OK!-> Grammar_PropertiesDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'constructor'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
15 8(CODE) constructor new TestClass(initValue:array) 
    'constructor'(IDENTIFIER) 'new'(IDENTIFIER) 'TestClass'(IDENTIFIER) '('(PUNCT) 'initValue'(IDENTIFIER) ':'(OPER) 'array'(IDENTIFIER) ')'(PUNCT) 

           Grammar_Statement TRY Grammar_ConstructorDeclaration on 'constructor'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_ConstructorDeclaration matched OK: constructor constructor 
>>>ADVANCE 15:21 [1] 'new'(IDENTIFIER) 
             Grammar_ConstructorDeclaration matched OK: new new 
>>>ADVANCE 15:25 [2] 'TestClass'(IDENTIFIER) 
             Grammar_ConstructorDeclaration matched OK: IDENTIFIER TestClass 
>>>ADVANCE 15:34 [3] '('(PUNCT) 
             Grammar_ConstructorDeclaration matched OK: ( ( 
>>>ADVANCE 15:35 [4] 'initValue'(IDENTIFIER) 
optSeparatedList [Grammar_ConstructorDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_ConstructorDeclaration TRY Grammar_VariableDecl on 'initValue'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER initValue 
>>>ADVANCE 15:44 [5] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 15:45 [6] 'array'(IDENTIFIER) 
               Grammar_VariableDecl matched OK: array array 
>>>ADVANCE 15:50 [7] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_ConstructorDeclaration matched OK: ) ) 
>>>ADVANCE 16:0 [-1] ' '(NEWLINE) 
             Grammar_ConstructorDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 16:13 [0] '.'(PUNCT) 
optFreeFormList: [Grammar_Statement ;]*  parent:__init.Grammar_Body parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
16 12(CODE) .myArr = initValue 
    '.'(PUNCT) 'myArr'(IDENTIFIER) '='(ASSIGN) 'initValue'(IDENTIFIER) 

                 Grammar_Statement TRY Grammar_VariableRef on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_VariableRef matched OK: . . 
>>>ADVANCE 16:14 [1] 'myArr'(IDENTIFIER) 
                   Grammar_VariableRef matched OK: IDENTIFIER myArr 
>>>ADVANCE 16:20 [2] '='(ASSIGN) 
                 Parsed OK!-> Grammar_VariableRef 
                 Grammar_Statement TRY Grammar_AssignmentStatement on '='(ASSIGN) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_AssignmentStatement matched OK: ASSIGN = 
>>>ADVANCE 16:22 [3] 'initValue'(IDENTIFIER) 
                   Grammar_AssignmentStatement TRY Grammar_Expression on 'initValue'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_Operand on 'initValue'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'initValue'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER initValue 
>>>ADVANCE 18:0 [-1] ' '(NEWLINE) 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 18:9 [0] 'method'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 18 
                   Parsed OK!-> Grammar_Expression 
                 Parsed OK!-> Grammar_AssignmentStatement 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 18:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_Body] blockIndent:12, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_ConstructorDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
18 8(CODE) method indexOf(searched:string, fromIndex:number=0) returns number 
    'method'(IDENTIFIER) 'indexOf'(IDENTIFIER) '('(PUNCT) 'searched'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) ','(PUNCT) 'fromIndex'(IDENTIFIER) ':'(OPER) 'number'(IDENTIFIER) '='(ASSIGN) '0'(NUMBER) ')'(PUNCT) 'returns'(IDENTIFIER) 'number'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 18:16 [1] 'indexOf'(IDENTIFIER) 
>>>ADVANCE 18:23 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 18:24 [3] 'searched'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'searched'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER searched 
>>>ADVANCE 18:32 [4] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 18:33 [5] 'string'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 18:39 [6] ','(PUNCT) 
               Parsed OK!-> Grammar_VariableRef 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: , , 
>>>ADVANCE 18:41 [7] 'fromIndex'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'fromIndex'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER fromIndex 
>>>ADVANCE 18:50 [8] ':'(OPER) 
               Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 18:51 [9] 'number'(IDENTIFIER) 
               Grammar_VariableDecl TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 18:57 [10] '='(ASSIGN) 
               Parsed OK!-> Grammar_VariableRef 
               Grammar_VariableDecl matched OK: = = 
>>>ADVANCE 18:58 [11] '0'(NUMBER) 
               Grammar_VariableDecl TRY Grammar_Expression on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
                 Grammar_Expression TRY Grammar_Operand on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_Operand TRY Grammar_NumberLiteral on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_NumberLiteral matched OK: NUMBER 0 
>>>ADVANCE 18:59 [12] ')'(PUNCT) 
                   Parsed OK!-> Grammar_NumberLiteral 
                 Parsed OK!-> Grammar_Operand 
               Parsed OK!-> Grammar_Expression 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 18:61 [13] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 18:69 [14] 'number'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'number'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER number 
>>>ADVANCE 20:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 20:13 [0] 'for'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:indexOf.Grammar_Body parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'for'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
20 12(CODE) for n=fromIndex while n<.myArr.length 
    'for'(IDENTIFIER) 'n'(IDENTIFIER) '='(ASSIGN) 'fromIndex'(IDENTIFIER) 'while'(IDENTIFIER) 'n'(IDENTIFIER) '<'(OPER) '.'(PUNCT) 'myArr'(IDENTIFIER) '.'(PUNCT) 'length'(IDENTIFIER) 

                 Grammar_Statement TRY Grammar_ForStatement on 'for'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_ForStatement matched OK: for for 
>>>ADVANCE 20:17 [1] 'n'(IDENTIFIER) 
                   Grammar_ForStatement TRY Grammar_ForEachProperty on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_ForEachProperty parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:20:14. Grammar_ForEachProperty: found 'n'(IDENTIFIER) but 'each' required 
<<REW to 20:17 [1] 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                   Grammar_ForStatement TRY Grammar_ForEachInArray on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_ForEachInArray parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:20:14. Grammar_ForEachInArray: found 'n'(IDENTIFIER) but 'each' required 
<<REW to 20:17 [1] 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                   Grammar_ForStatement TRY Grammar_ForIndexNumeric on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_ForIndexNumeric TRY Grammar_VariableDecl on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_VariableDecl matched OK: IDENTIFIER n 
>>>ADVANCE 20:18 [2] '='(ASSIGN) 
                       Grammar_VariableDecl matched OK: = = 
>>>ADVANCE 20:19 [3] 'fromIndex'(IDENTIFIER) 
                       Grammar_VariableDecl TRY Grammar_Expression on 'fromIndex'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Expression TRY Grammar_Operand on 'fromIndex'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_Operand TRY Grammar_VariableRef on 'fromIndex'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_VariableRef matched OK: IDENTIFIER fromIndex 
>>>ADVANCE 20:29 [4] 'while'(IDENTIFIER) 
                           Parsed OK!-> Grammar_VariableRef 
                         Parsed OK!-> Grammar_Operand 
                         Grammar_Expression TRY Grammar_Oper on 'while'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining


E4C catched longjmp frame 14

                         Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:20:20. Grammar_Oper: found 'while'(IDENTIFIER) but 'OPER' required 
<<REW to 20:29 [4] 'while'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_done
                       Parsed OK!-> Grammar_Expression 
                     Parsed OK!-> Grammar_VariableDecl 
                     Grammar_ForIndexNumeric matched OK: while while 
>>>ADVANCE 20:35 [5] 'n'(IDENTIFIER) 
                     Grammar_ForIndexNumeric TRY Grammar_Expression on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER n 
>>>ADVANCE 20:36 [6] '<'(OPER) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression TRY Grammar_Oper on '<'(OPER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Oper matched OK: OPER < 
>>>ADVANCE 20:37 [7] '.'(PUNCT) 
                       Parsed OK!-> Grammar_Oper 
                       Grammar_Expression TRY Grammar_Operand on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: . . 
>>>ADVANCE 20:38 [8] 'myArr'(IDENTIFIER) 
                           Grammar_VariableRef matched OK: IDENTIFIER myArr 
>>>ADVANCE 20:43 [9] '.'(PUNCT) 
                           Grammar_VariableRef TRY Grammar_PropertyAccess on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_PropertyAccess matched OK: . . 
>>>ADVANCE 20:44 [10] 'length'(IDENTIFIER) 
                             Grammar_PropertyAccess matched OK: IDENTIFIER length 
>>>ADVANCE 21:0 [-1] ' '(NEWLINE) 
                           Parsed OK!-> Grammar_PropertyAccess 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 21:17 [0] 'if'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 21 
                     Parsed OK!-> Grammar_Expression 
                     Grammar_ForIndexNumeric TRY Grammar_Statement on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
 
21 16(CODE) if .myArr[n] is searched, return n; 
    'if'(IDENTIFIER) ' .'(SPACE_DOT) 'myArr'(IDENTIFIER) '['(PUNCT) 'n'(IDENTIFIER) ']'(PUNCT) 'is'(OPER) 'searched'(IDENTIFIER) ','(PUNCT) 'return'(IDENTIFIER) 'n'(IDENTIFIER) ';'(PUNCT) 

                       Grammar_Statement TRY Grammar_VariableRef on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining


E4C catched longjmp frame 13

                       Grammar_VariableRef parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:20:45. Grammar_VariableRef: found ' '(NEWLINE) but 'IDENTIFIER' required 
<<REW to 21:0 [-1] ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_done


E4C catched longjmp frame 12

                     Grammar_Statement parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:20:45. Grammar_Statement: found ' '(NEWLINE) but <Grammar_VariableRef> required 
<<REW to 21:0 [-1] ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_done
                     Grammar_ForIndexNumeric TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 21:17 [0] 'if'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:12, blockIndent:16, closer: -no- 
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12 
                       Grammar_Body TRY Grammar_Statement on 'if'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
 
21 16(CODE) if .myArr[n] is searched, return n; 
    'if'(IDENTIFIER) ' .'(SPACE_DOT) 'myArr'(IDENTIFIER) '['(PUNCT) 'n'(IDENTIFIER) ']'(PUNCT) 'is'(OPER) 'searched'(IDENTIFIER) ','(PUNCT) 'return'(IDENTIFIER) 'n'(IDENTIFIER) ';'(PUNCT) 

                         Grammar_Statement TRY Grammar_IfStatement on 'if'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_IfStatement matched OK: if if 
>>>ADVANCE 21:19 [1] ' .'(SPACE_DOT) 
                           Grammar_IfStatement TRY Grammar_Expression on ' .'(SPACE_DOT) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_Expression TRY Grammar_Operand on ' .'(SPACE_DOT) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Operand TRY Grammar_VariableRef on ' .'(SPACE_DOT) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_VariableRef matched OK: SPACE_DOT  . 
>>>ADVANCE 21:21 [2] 'myArr'(IDENTIFIER) 
                                 Grammar_VariableRef matched OK: IDENTIFIER myArr 
>>>ADVANCE 21:26 [3] '['(PUNCT) 
                                 Grammar_VariableRef TRY Grammar_IndexAccess on '['(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_IndexAccess matched OK: [ [ 
>>>ADVANCE 21:27 [4] 'n'(IDENTIFIER) 
                                   Grammar_IndexAccess TRY Grammar_Expression on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_beggining
                                     Grammar_Expression TRY Grammar_Operand on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:20 e4c_beggining
                                       Grammar_Operand TRY Grammar_VariableRef on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:21 e4c_beggining
                                         Grammar_VariableRef matched OK: IDENTIFIER n 
>>>ADVANCE 21:28 [5] ']'(PUNCT) 
                                       Parsed OK!-> Grammar_VariableRef 
                                     Parsed OK!-> Grammar_Operand 
                                   Parsed OK!-> Grammar_Expression 
                                   Grammar_IndexAccess matched OK: ] ] 
>>>ADVANCE 21:30 [6] 'is'(OPER) 
                                 Parsed OK!-> Grammar_IndexAccess 
                               Parsed OK!-> Grammar_VariableRef 
                             Parsed OK!-> Grammar_Operand 
                             Grammar_Expression TRY Grammar_Oper on 'is'(OPER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Oper matched OK: OPER is 
>>>ADVANCE 21:33 [7] 'searched'(IDENTIFIER) 
                             Parsed OK!-> Grammar_Oper 
                             Grammar_Expression TRY Grammar_Operand on 'searched'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Operand TRY Grammar_VariableRef on 'searched'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_VariableRef matched OK: IDENTIFIER searched 
>>>ADVANCE 21:41 [8] ','(PUNCT) 
                               Parsed OK!-> Grammar_VariableRef 
                             Parsed OK!-> Grammar_Operand 
                           Parsed OK!-> Grammar_Expression 
                           Grammar_IfStatement matched OK: , , 
>>>ADVANCE 21:43 [9] 'return'(IDENTIFIER) 
                           Grammar_IfStatement TRY Grammar_SingleLineBody on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
optSeparatedList [Grammar_SingleLineBody] indent:16, get SeparatedList of [Grammar_Statement] by ';' closer: NEWLINE 
                             Grammar_SingleLineBody TRY Grammar_Statement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
 
21 16(CODE) if .myArr[n] is searched, return n; 
    'if'(IDENTIFIER) ' .'(SPACE_DOT) 'myArr'(IDENTIFIER) '['(PUNCT) 'n'(IDENTIFIER) ']'(PUNCT) 'is'(OPER) 'searched'(IDENTIFIER) ','(PUNCT) 'return'(IDENTIFIER) 'n'(IDENTIFIER) ';'(PUNCT) 

                               Grammar_Statement TRY Grammar_ReturnStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_ReturnStatement matched OK: return return 
>>>ADVANCE 21:50 [10] 'n'(IDENTIFIER) 
                                 Grammar_ReturnStatement TRY Grammar_Expression on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_Expression TRY Grammar_Operand on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_beggining
                                     Grammar_Operand TRY Grammar_VariableRef on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:20 e4c_beggining
                                       Grammar_VariableRef matched OK: IDENTIFIER n 
>>>ADVANCE 21:51 [11] ';'(PUNCT) 
                                     Parsed OK!-> Grammar_VariableRef 
                                   Parsed OK!-> Grammar_Operand 
                                   Grammar_Expression TRY Grammar_Oper on ';'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_beggining


E4C catched longjmp frame 19

                                   Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:21:51. Grammar_Oper: found ';'(PUNCT) but 'OPER' required 
<<REW to 21:51 [11] ';'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_done
                                 Parsed OK!-> Grammar_Expression 
                               Parsed OK!-> Grammar_ReturnStatement 
                             Parsed OK!-> Grammar_Statement 
                             Grammar_SingleLineBody matched OK: ; ; 
>>>ADVANCE 22:0 [-1] ' '(NEWLINE) 
                             Grammar_SingleLineBody matched OK: NEWLINE   
>>>ADVANCE 22:13 [0] 'return'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 22 
                           Parsed OK!-> Grammar_SingleLineBody 
                           Grammar_IfStatement matched OK: NEWLINE   
>>>ADVANCE 22:13 [0] 'return'(IDENTIFIER) 
                           Grammar_IfStatement TRY Grammar_ElseIfStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining


E4C catched longjmp frame 15

                           Grammar_ElseIfStatement parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:22:1. Grammar_ElseIfStatement: found 'return'(IDENTIFIER) but 'else' required 
<<REW to 22:13 [0] 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_done
                           Grammar_IfStatement TRY Grammar_ElseStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining


E4C catched longjmp frame 15

                           Grammar_ElseStatement parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:22:1. Grammar_ElseStatement: found 'return'(IDENTIFIER) but 'else' required 
<<REW to 22:13 [0] 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_done
                         Parsed OK!-> Grammar_IfStatement 
                       Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12 
END freeFormMode [Grammar_Body] blockIndent:16, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
                     Parsed OK!-> Grammar_Body 
                   Parsed OK!-> Grammar_ForIndexNumeric 
                 Parsed OK!-> Grammar_ForStatement 
               Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
22 12(CODE) return -1 
    'return'(IDENTIFIER) '-'(OPER) '1'(NUMBER) 

                 Grammar_Statement TRY Grammar_ReturnStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_ReturnStatement matched OK: return return 
>>>ADVANCE 22:20 [1] '-'(OPER) 
                   Grammar_ReturnStatement TRY Grammar_Expression on '-'(OPER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_UnaryOper on '-'(OPER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_UnaryOper matched OK: - - 
>>>ADVANCE 22:21 [2] '1'(NUMBER) 
                     Parsed OK!-> Grammar_UnaryOper 
                     Grammar_Expression TRY Grammar_Operand on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_NumberLiteral on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_NumberLiteral matched OK: NUMBER 1 
>>>ADVANCE 24:0 [-1] ' '(NEWLINE) 
                       Parsed OK!-> Grammar_NumberLiteral 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 24:9 [0] 'method'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 24 
                   Parsed OK!-> Grammar_Expression 
                 Parsed OK!-> Grammar_ReturnStatement 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 24:9 [0] 'method'(IDENTIFIER) 
freeForm Mode .lexer.indent:8 block indent:12 parentIndent:8 
END freeFormMode [Grammar_Body] blockIndent:12, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:8 block indent:8 parentIndent:4 
         Grammar_Body TRY Grammar_Statement on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:6 e4c_beggining
 
24 8(CODE) method sliceJoin(start, endPos) returns string 
    'method'(IDENTIFIER) 'sliceJoin'(IDENTIFIER) '('(PUNCT) 'start'(IDENTIFIER) ','(PUNCT) 'endPos'(IDENTIFIER) ')'(PUNCT) 'returns'(IDENTIFIER) 'string'(IDENTIFIER) 

           Grammar_Statement TRY Grammar_MethodDeclaration on 'method'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:7 e4c_beggining
             Grammar_MethodDeclaration matched OK: method method 
>>>ADVANCE 24:16 [1] 'sliceJoin'(IDENTIFIER) 
>>>ADVANCE 24:25 [2] '('(PUNCT) 
             Grammar_MethodDeclaration matched OK: ( ( 
>>>ADVANCE 24:26 [3] 'start'(IDENTIFIER) 
optSeparatedList [Grammar_MethodDeclaration] indent:8, get SeparatedList of [Grammar_VariableDecl] by ',' closer: ) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER start 
>>>ADVANCE 24:31 [4] ','(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: , , 
>>>ADVANCE 24:33 [5] 'endPos'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableDecl on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableDecl matched OK: IDENTIFIER endPos 
>>>ADVANCE 24:39 [6] ')'(PUNCT) 
             Parsed OK!-> Grammar_VariableDecl 
             Grammar_MethodDeclaration matched OK: ) ) 
>>>ADVANCE 24:41 [7] 'returns'(IDENTIFIER) 
             Grammar_MethodDeclaration matched OK: returns returns 
>>>ADVANCE 24:49 [8] 'string'(IDENTIFIER) 
             Grammar_MethodDeclaration TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 26:0 [-1] ' '(NEWLINE) 
             Parsed OK!-> Grammar_VariableRef 
             Grammar_MethodDeclaration TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:8 e4c_beggining
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 26:13 [0] 'var'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:sliceJoin.Grammar_Body parentIndent:8, blockIndent:12, closer: -no- 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
26 12(CODE) var len = .myArr.length 
    'var'(IDENTIFIER) 'len'(IDENTIFIER) '='(ASSIGN) ' .'(SPACE_DOT) 'myArr'(IDENTIFIER) '.'(PUNCT) 'length'(IDENTIFIER) 

                 Grammar_Statement TRY Grammar_VarStatement on 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_VarStatement matched OK: var var 
>>>ADVANCE 26:17 [1] 'len'(IDENTIFIER) 
optSeparatedList [Grammar_VarStatement] indent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
                   Grammar_VarStatement TRY Grammar_VariableDecl on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_VariableDecl matched OK: IDENTIFIER len 
>>>ADVANCE 26:21 [2] '='(ASSIGN) 
                     Grammar_VariableDecl matched OK: = = 
>>>ADVANCE 26:22 [3] ' .'(SPACE_DOT) 
                     Grammar_VariableDecl TRY Grammar_Expression on ' .'(SPACE_DOT) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on ' .'(SPACE_DOT) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on ' .'(SPACE_DOT) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: SPACE_DOT  . 
>>>ADVANCE 26:24 [4] 'myArr'(IDENTIFIER) 
                           Grammar_VariableRef matched OK: IDENTIFIER myArr 
>>>ADVANCE 26:29 [5] '.'(PUNCT) 
                           Grammar_VariableRef TRY Grammar_PropertyAccess on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_PropertyAccess matched OK: . . 
>>>ADVANCE 26:30 [6] 'length'(IDENTIFIER) 
                             Grammar_PropertyAccess matched OK: IDENTIFIER length 
>>>ADVANCE 28:0 [-1] ' '(NEWLINE) 
                           Parsed OK!-> Grammar_PropertyAccess 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 28:13 [0] 'default'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 28 
                     Parsed OK!-> Grammar_Expression 
                   Parsed OK!-> Grammar_VariableDecl 
                   Grammar_VarStatement matched OK: NEWLINE   
>>>ADVANCE 28:13 [0] 'default'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 28 
                 Parsed OK!-> Grammar_VarStatement 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 28:13 [0] 'default'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'default'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
28 12(CODE) default endPos = len+1 
    'default'(IDENTIFIER) 'endPos'(IDENTIFIER) '='(ASSIGN) 'len'(IDENTIFIER) '+'(OPER) '1'(NUMBER) 

                 Grammar_Statement TRY Grammar_DefaultAssignment on 'default'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_DefaultAssignment matched OK: default default 
>>>ADVANCE 28:21 [1] 'endPos'(IDENTIFIER) 
                   Grammar_DefaultAssignment TRY Grammar_AssignmentStatement on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_AssignmentStatement TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 28:28 [2] '='(ASSIGN) 
                     Parsed OK!-> Grammar_VariableRef 
                     Grammar_AssignmentStatement matched OK: ASSIGN = 
>>>ADVANCE 28:30 [3] 'len'(IDENTIFIER) 
                     Grammar_AssignmentStatement TRY Grammar_Expression on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER len 
>>>ADVANCE 28:33 [4] '+'(OPER) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression TRY Grammar_Oper on '+'(OPER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Oper matched OK: OPER + 
>>>ADVANCE 28:34 [5] '1'(NUMBER) 
                       Parsed OK!-> Grammar_Oper 
                       Grammar_Expression TRY Grammar_Operand on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_NumberLiteral on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_NumberLiteral matched OK: NUMBER 1 
>>>ADVANCE 30:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_NumberLiteral 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 30:13 [0] 'start'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 30 
                     Parsed OK!-> Grammar_Expression 
                   Parsed OK!-> Grammar_AssignmentStatement 
                 Parsed OK!-> Grammar_DefaultAssignment 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 30:13 [0] 'start'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
30 12(CODE) start = inRange( 0, start<0?len+start:start , len-1) 
    'start'(IDENTIFIER) '='(ASSIGN) 'inRange'(IDENTIFIER) '('(PUNCT) '0'(NUMBER) ','(PUNCT) 'start'(IDENTIFIER) '<'(OPER) '0'(NUMBER) '?'(OPER) 'len'(IDENTIFIER) '+'(OPER) 'start'(IDENTIFIER) ':'(OPER) 'start'(IDENTIFIER) ','(PUNCT) 'len'(IDENTIFIER) '-'(OPER) '1'(NUMBER) ')'(PUNCT) 

                 Grammar_Statement TRY Grammar_VariableRef on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_VariableRef matched OK: IDENTIFIER start 
>>>ADVANCE 30:19 [1] '='(ASSIGN) 
                 Parsed OK!-> Grammar_VariableRef 
                 Grammar_Statement TRY Grammar_AssignmentStatement on '='(ASSIGN) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_AssignmentStatement matched OK: ASSIGN = 
>>>ADVANCE 30:21 [2] 'inRange'(IDENTIFIER) 
                   Grammar_AssignmentStatement TRY Grammar_Expression on 'inRange'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_Operand on 'inRange'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'inRange'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER inRange 
>>>ADVANCE 30:28 [3] '('(PUNCT) 
                         Grammar_VariableRef TRY Grammar_FunctionAccess on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_FunctionAccess matched OK: ( ( 
>>>ADVANCE 30:30 [4] '0'(NUMBER) 
optSeparatedList [Grammar_FunctionAccess] indent:12, get SeparatedList of [Grammar_FunctionArgument] by ',' closer: ) 
                           Grammar_FunctionAccess TRY Grammar_FunctionArgument on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_FunctionArgument TRY Grammar_Expression on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Expression TRY Grammar_Operand on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_NumberLiteral on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_NumberLiteral matched OK: NUMBER 0 
>>>ADVANCE 30:31 [5] ','(PUNCT) 
                                 Parsed OK!-> Grammar_NumberLiteral 
                               Parsed OK!-> Grammar_Operand 
                             Parsed OK!-> Grammar_Expression 
                           Parsed OK!-> Grammar_FunctionArgument 
                           Grammar_FunctionAccess matched OK: , , 
>>>ADVANCE 30:33 [6] 'start'(IDENTIFIER) 
                           Grammar_FunctionAccess TRY Grammar_FunctionArgument on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_FunctionArgument matched OK: IDENTIFIER start 
>>>ADVANCE 30:38 [7] '<'(OPER) 
<< Returned: 'start'(IDENTIFIER) line 30 
                             Grammar_FunctionArgument TRY Grammar_Expression on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Expression TRY Grammar_Operand on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER start 
>>>ADVANCE 30:38 [7] '<'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '<'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER < 
>>>ADVANCE 30:39 [8] '0'(NUMBER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_NumberLiteral on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_NumberLiteral matched OK: NUMBER 0 
>>>ADVANCE 30:40 [9] '?'(OPER) 
                                 Parsed OK!-> Grammar_NumberLiteral 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '?'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER ? 
>>>ADVANCE 30:41 [10] 'len'(IDENTIFIER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER len 
>>>ADVANCE 30:44 [11] '+'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '+'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER + 
>>>ADVANCE 30:45 [12] 'start'(IDENTIFIER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER start 
>>>ADVANCE 30:50 [13] ':'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on ':'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER : 
>>>ADVANCE 30:51 [14] 'start'(IDENTIFIER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER start 
>>>ADVANCE 30:57 [15] ','(PUNCT) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                             Parsed OK!-> Grammar_Expression 
                           Parsed OK!-> Grammar_FunctionArgument 
                           Grammar_FunctionAccess matched OK: , , 
>>>ADVANCE 30:59 [16] 'len'(IDENTIFIER) 
                           Grammar_FunctionAccess TRY Grammar_FunctionArgument on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_FunctionArgument matched OK: IDENTIFIER len 
>>>ADVANCE 30:62 [17] '-'(OPER) 
<< Returned: 'len'(IDENTIFIER) line 30 
                             Grammar_FunctionArgument TRY Grammar_Expression on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Expression TRY Grammar_Operand on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER len 
>>>ADVANCE 30:62 [17] '-'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '-'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER - 
>>>ADVANCE 30:63 [18] '1'(NUMBER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_NumberLiteral on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_NumberLiteral matched OK: NUMBER 1 
>>>ADVANCE 30:64 [19] ')'(PUNCT) 
                                 Parsed OK!-> Grammar_NumberLiteral 
                               Parsed OK!-> Grammar_Operand 
                             Parsed OK!-> Grammar_Expression 
                           Parsed OK!-> Grammar_FunctionArgument 
                           Grammar_FunctionAccess matched OK: ) ) 
>>>ADVANCE 32:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_FunctionAccess 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 32:13 [0] 'endPos'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 32 
                   Parsed OK!-> Grammar_Expression 
                 Parsed OK!-> Grammar_AssignmentStatement 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 32:13 [0] 'endPos'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
32 12(CODE) endPos = inRange( 0, endPos<0?len+endPos:endPos , len-1) 
    'endPos'(IDENTIFIER) '='(ASSIGN) 'inRange'(IDENTIFIER) '('(PUNCT) '0'(NUMBER) ','(PUNCT) 'endPos'(IDENTIFIER) '<'(OPER) '0'(NUMBER) '?'(OPER) 'len'(IDENTIFIER) '+'(OPER) 'endPos'(IDENTIFIER) ':'(OPER) 'endPos'(IDENTIFIER) ','(PUNCT) 'len'(IDENTIFIER) '-'(OPER) '1'(NUMBER) ')'(PUNCT) 

                 Grammar_Statement TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 32:20 [1] '='(ASSIGN) 
                 Parsed OK!-> Grammar_VariableRef 
                 Grammar_Statement TRY Grammar_AssignmentStatement on '='(ASSIGN) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_AssignmentStatement matched OK: ASSIGN = 
>>>ADVANCE 32:22 [2] 'inRange'(IDENTIFIER) 
                   Grammar_AssignmentStatement TRY Grammar_Expression on 'inRange'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_Operand on 'inRange'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'inRange'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER inRange 
>>>ADVANCE 32:29 [3] '('(PUNCT) 
                         Grammar_VariableRef TRY Grammar_FunctionAccess on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_FunctionAccess matched OK: ( ( 
>>>ADVANCE 32:31 [4] '0'(NUMBER) 
optSeparatedList [Grammar_FunctionAccess] indent:12, get SeparatedList of [Grammar_FunctionArgument] by ',' closer: ) 
                           Grammar_FunctionAccess TRY Grammar_FunctionArgument on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_FunctionArgument TRY Grammar_Expression on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Expression TRY Grammar_Operand on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_NumberLiteral on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_NumberLiteral matched OK: NUMBER 0 
>>>ADVANCE 32:32 [5] ','(PUNCT) 
                                 Parsed OK!-> Grammar_NumberLiteral 
                               Parsed OK!-> Grammar_Operand 
                             Parsed OK!-> Grammar_Expression 
                           Parsed OK!-> Grammar_FunctionArgument 
                           Grammar_FunctionAccess matched OK: , , 
>>>ADVANCE 32:34 [6] 'endPos'(IDENTIFIER) 
                           Grammar_FunctionAccess TRY Grammar_FunctionArgument on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_FunctionArgument matched OK: IDENTIFIER endPos 
>>>ADVANCE 32:40 [7] '<'(OPER) 
<< Returned: 'endPos'(IDENTIFIER) line 32 
                             Grammar_FunctionArgument TRY Grammar_Expression on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Expression TRY Grammar_Operand on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 32:40 [7] '<'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '<'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER < 
>>>ADVANCE 32:41 [8] '0'(NUMBER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_NumberLiteral on '0'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_NumberLiteral matched OK: NUMBER 0 
>>>ADVANCE 32:42 [9] '?'(OPER) 
                                 Parsed OK!-> Grammar_NumberLiteral 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '?'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER ? 
>>>ADVANCE 32:43 [10] 'len'(IDENTIFIER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER len 
>>>ADVANCE 32:46 [11] '+'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '+'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER + 
>>>ADVANCE 32:47 [12] 'endPos'(IDENTIFIER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 32:53 [13] ':'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on ':'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER : 
>>>ADVANCE 32:54 [14] 'endPos'(IDENTIFIER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 32:61 [15] ','(PUNCT) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                             Parsed OK!-> Grammar_Expression 
                           Parsed OK!-> Grammar_FunctionArgument 
                           Grammar_FunctionAccess matched OK: , , 
>>>ADVANCE 32:63 [16] 'len'(IDENTIFIER) 
                           Grammar_FunctionAccess TRY Grammar_FunctionArgument on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_FunctionArgument matched OK: IDENTIFIER len 
>>>ADVANCE 32:66 [17] '-'(OPER) 
<< Returned: 'len'(IDENTIFIER) line 32 
                             Grammar_FunctionArgument TRY Grammar_Expression on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Expression TRY Grammar_Operand on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_VariableRef on 'len'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_VariableRef matched OK: IDENTIFIER len 
>>>ADVANCE 32:66 [17] '-'(OPER) 
                                 Parsed OK!-> Grammar_VariableRef 
                               Parsed OK!-> Grammar_Operand 
                               Grammar_Expression TRY Grammar_Oper on '-'(OPER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Oper matched OK: OPER - 
>>>ADVANCE 32:67 [18] '1'(NUMBER) 
                               Parsed OK!-> Grammar_Oper 
                               Grammar_Expression TRY Grammar_Operand on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_Operand TRY Grammar_NumberLiteral on '1'(NUMBER) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_NumberLiteral matched OK: NUMBER 1 
>>>ADVANCE 32:68 [19] ')'(PUNCT) 
                                 Parsed OK!-> Grammar_NumberLiteral 
                               Parsed OK!-> Grammar_Operand 
                             Parsed OK!-> Grammar_Expression 
                           Parsed OK!-> Grammar_FunctionArgument 
                           Grammar_FunctionAccess matched OK: ) ) 
>>>ADVANCE 34:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_FunctionAccess 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 34:13 [0] 'if'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 34 
                   Parsed OK!-> Grammar_Expression 
                 Parsed OK!-> Grammar_AssignmentStatement 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 34:13 [0] 'if'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'if'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
34 12(CODE) if start>=endPos, return '' 
    'if'(IDENTIFIER) 'start'(IDENTIFIER) '>='(OPER) 'endPos'(IDENTIFIER) ','(PUNCT) 'return'(IDENTIFIER) ''''(STRING) 

                 Grammar_Statement TRY Grammar_IfStatement on 'if'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_IfStatement matched OK: if if 
>>>ADVANCE 34:16 [1] 'start'(IDENTIFIER) 
                   Grammar_IfStatement TRY Grammar_Expression on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_Operand on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER start 
>>>ADVANCE 34:21 [2] '>='(OPER) 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression TRY Grammar_Oper on '>='(OPER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Oper matched OK: OPER >= 
>>>ADVANCE 34:23 [3] 'endPos'(IDENTIFIER) 
                     Parsed OK!-> Grammar_Oper 
                     Grammar_Expression TRY Grammar_Operand on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 34:29 [4] ','(PUNCT) 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                   Parsed OK!-> Grammar_Expression 
                   Grammar_IfStatement matched OK: , , 
>>>ADVANCE 34:31 [5] 'return'(IDENTIFIER) 
                   Grammar_IfStatement TRY Grammar_SingleLineBody on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
optSeparatedList [Grammar_SingleLineBody] indent:12, get SeparatedList of [Grammar_Statement] by ';' closer: NEWLINE 
                     Grammar_SingleLineBody TRY Grammar_Statement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
 
34 12(CODE) if start>=endPos, return '' 
    'if'(IDENTIFIER) 'start'(IDENTIFIER) '>='(OPER) 'endPos'(IDENTIFIER) ','(PUNCT) 'return'(IDENTIFIER) ''''(STRING) 

                       Grammar_Statement TRY Grammar_ReturnStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_ReturnStatement matched OK: return return 
>>>ADVANCE 34:38 [6] ''''(STRING) 
                         Grammar_ReturnStatement TRY Grammar_Expression on ''''(STRING) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_Expression TRY Grammar_Operand on ''''(STRING) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_Operand TRY Grammar_StringLiteral on ''''(STRING) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_StringLiteral matched OK: STRING '' 
>>>ADVANCE 36:0 [-1] ' '(NEWLINE) 
                             Parsed OK!-> Grammar_StringLiteral 
                           Parsed OK!-> Grammar_Operand 
                           Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 36:13 [0] 'var'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 36 
                         Parsed OK!-> Grammar_Expression 
                       Parsed OK!-> Grammar_ReturnStatement 
                     Parsed OK!-> Grammar_Statement 
                     Grammar_SingleLineBody matched OK: NEWLINE   
>>>ADVANCE 36:13 [0] 'var'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 36 
                   Parsed OK!-> Grammar_SingleLineBody 
                   Grammar_IfStatement matched OK: NEWLINE   
>>>ADVANCE 36:13 [0] 'var'(IDENTIFIER) 
                   Grammar_IfStatement TRY Grammar_ElseIfStatement on 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_ElseIfStatement parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:36:1. Grammar_ElseIfStatement: found 'var'(IDENTIFIER) but 'else' required 
<<REW to 36:13 [0] 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                   Grammar_IfStatement TRY Grammar_ElseStatement on 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_ElseStatement parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:36:1. Grammar_ElseStatement: found 'var'(IDENTIFIER) but 'else' required 
<<REW to 36:13 [0] 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                 Parsed OK!-> Grammar_IfStatement 
               Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
36 12(CODE) var result:string = "" 
    'var'(IDENTIFIER) 'result'(IDENTIFIER) ':'(OPER) 'string'(IDENTIFIER) '='(ASSIGN) '""'(STRING) 

                 Grammar_Statement TRY Grammar_VarStatement on 'var'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_VarStatement matched OK: var var 
>>>ADVANCE 36:17 [1] 'result'(IDENTIFIER) 
optSeparatedList [Grammar_VarStatement] indent:12, get SeparatedList of [Grammar_VariableDecl] by ',' closer: -no closer- 
                   Grammar_VarStatement TRY Grammar_VariableDecl on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_VariableDecl matched OK: IDENTIFIER result 
>>>ADVANCE 36:23 [2] ':'(OPER) 
                     Grammar_VariableDecl matched OK: : : 
>>>ADVANCE 36:24 [3] 'string'(IDENTIFIER) 
                     Grammar_VariableDecl TRY Grammar_VariableRef on 'string'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_VariableRef matched OK: IDENTIFIER string 
>>>ADVANCE 36:31 [4] '='(ASSIGN) 
                     Parsed OK!-> Grammar_VariableRef 
                     Grammar_VariableDecl matched OK: = = 
>>>ADVANCE 36:33 [5] '""'(STRING) 
                     Grammar_VariableDecl TRY Grammar_Expression on '""'(STRING) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on '""'(STRING) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_StringLiteral on '""'(STRING) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_StringLiteral matched OK: STRING "" 
>>>ADVANCE 37:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_StringLiteral 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 37:13 [0] 'for'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 37 
                     Parsed OK!-> Grammar_Expression 
                   Parsed OK!-> Grammar_VariableDecl 
                   Grammar_VarStatement matched OK: NEWLINE   
>>>ADVANCE 37:13 [0] 'for'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 37 
                 Parsed OK!-> Grammar_VarStatement 
               Parsed OK!-> Grammar_Statement 
               Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 37:13 [0] 'for'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'for'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
37 12(CODE) for n=start to endPos 
    'for'(IDENTIFIER) 'n'(IDENTIFIER) '='(ASSIGN) 'start'(IDENTIFIER) 'to'(IDENTIFIER) 'endPos'(IDENTIFIER) 

                 Grammar_Statement TRY Grammar_ForStatement on 'for'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_ForStatement matched OK: for for 
>>>ADVANCE 37:17 [1] 'n'(IDENTIFIER) 
                   Grammar_ForStatement TRY Grammar_ForEachProperty on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_ForEachProperty parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:37:14. Grammar_ForEachProperty: found 'n'(IDENTIFIER) but 'each' required 
<<REW to 37:17 [1] 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                   Grammar_ForStatement TRY Grammar_ForEachInArray on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining


E4C catched longjmp frame 11

                   Grammar_ForEachInArray parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:37:14. Grammar_ForEachInArray: found 'n'(IDENTIFIER) but 'each' required 
<<REW to 37:17 [1] 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_done
                   Grammar_ForStatement TRY Grammar_ForIndexNumeric on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_ForIndexNumeric TRY Grammar_VariableDecl on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_VariableDecl matched OK: IDENTIFIER n 
>>>ADVANCE 37:18 [2] '='(ASSIGN) 
                       Grammar_VariableDecl matched OK: = = 
>>>ADVANCE 37:19 [3] 'start'(IDENTIFIER) 
                       Grammar_VariableDecl TRY Grammar_Expression on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Expression TRY Grammar_Operand on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_Operand TRY Grammar_VariableRef on 'start'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_VariableRef matched OK: IDENTIFIER start 
>>>ADVANCE 37:25 [4] 'to'(IDENTIFIER) 
                           Parsed OK!-> Grammar_VariableRef 
                         Parsed OK!-> Grammar_Operand 
                         Grammar_Expression TRY Grammar_Oper on 'to'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining


E4C catched longjmp frame 14

                         Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:37:20. Grammar_Oper: found 'to'(IDENTIFIER) but 'OPER' required 
<<REW to 37:25 [4] 'to'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_done
                       Parsed OK!-> Grammar_Expression 
                     Parsed OK!-> Grammar_VariableDecl 
                     Grammar_ForIndexNumeric matched OK: to to 
>>>ADVANCE 37:28 [5] 'endPos'(IDENTIFIER) 
                     Grammar_ForIndexNumeric TRY Grammar_Expression on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Expression TRY Grammar_Operand on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_Operand TRY Grammar_VariableRef on 'endPos'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER endPos 
>>>ADVANCE 38:0 [-1] ' '(NEWLINE) 
                         Parsed OK!-> Grammar_VariableRef 
                       Parsed OK!-> Grammar_Operand 
                       Grammar_Expression matched OK: NEWLINE   
>>>ADVANCE 38:17 [0] 'result'(IDENTIFIER) 
<< Returned: ' '(NEWLINE) line 38 
                     Parsed OK!-> Grammar_Expression 
                     Grammar_ForIndexNumeric TRY Grammar_Statement on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
 
38 16(CODE) result = "#{result}#{.myArr[n]} "; 
    'result'(IDENTIFIER) '='(ASSIGN) '_concatAny'(IDENTIFIER) '('(PUNCT) 'result'(IDENTIFIER) ','(PUNCT) '('(PUNCT) '.'(PUNCT) 'myArr'(IDENTIFIER) '['(PUNCT) 'n'(IDENTIFIER) ']'(PUNCT) ')'(PUNCT) ','(PUNCT) '" "'(STRING) ')'(PUNCT) ';'(PUNCT) 

                       Grammar_Statement TRY Grammar_VariableRef on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining


E4C catched longjmp frame 13

                       Grammar_VariableRef parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:37:29. Grammar_VariableRef: found ' '(NEWLINE) but 'IDENTIFIER' required 
<<REW to 38:0 [-1] ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_done


E4C catched longjmp frame 12

                     Grammar_Statement parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:37:29. Grammar_Statement: found ' '(NEWLINE) but <Grammar_VariableRef> required 
<<REW to 38:0 [-1] ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_done
                     Grammar_ForIndexNumeric TRY Grammar_Body on ' '(NEWLINE) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 38:17 [0] 'result'(IDENTIFIER) 
optFreeFormList: [Grammar_Statement ;]*  parent:undefined.Grammar_Body parentIndent:12, blockIndent:16, closer: -no- 
freeForm Mode .lexer.indent:16 block indent:16 parentIndent:12 
                       Grammar_Body TRY Grammar_Statement on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
 
38 16(CODE) result = "#{result}#{.myArr[n]} "; 
    'result'(IDENTIFIER) '='(ASSIGN) '_concatAny'(IDENTIFIER) '('(PUNCT) 'result'(IDENTIFIER) ','(PUNCT) '('(PUNCT) '.'(PUNCT) 'myArr'(IDENTIFIER) '['(PUNCT) 'n'(IDENTIFIER) ']'(PUNCT) ')'(PUNCT) ','(PUNCT) '" "'(STRING) ')'(PUNCT) ';'(PUNCT) 

                         Grammar_Statement TRY Grammar_VariableRef on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_VariableRef matched OK: IDENTIFIER result 
>>>ADVANCE 38:24 [1] '='(ASSIGN) 
                         Parsed OK!-> Grammar_VariableRef 
                         Grammar_Statement TRY Grammar_AssignmentStatement on '='(ASSIGN) 
E4C generated/ASTBase.c:432:1 frame:14 e4c_beggining
                           Grammar_AssignmentStatement matched OK: ASSIGN = 
>>>ADVANCE 38:27 [2] '_concatAny'(IDENTIFIER) 
                           Grammar_AssignmentStatement TRY Grammar_Expression on '_concatAny'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:15 e4c_beggining
                             Grammar_Expression TRY Grammar_Operand on '_concatAny'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining
                               Grammar_Operand TRY Grammar_VariableRef on '_concatAny'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:17 e4c_beggining
                                 Grammar_VariableRef matched OK: IDENTIFIER _concatAny 
>>>ADVANCE 38:37 [3] '('(PUNCT) 
                                 Grammar_VariableRef TRY Grammar_FunctionAccess on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:18 e4c_beggining
                                   Grammar_FunctionAccess matched OK: ( ( 
>>>ADVANCE 38:38 [4] 'result'(IDENTIFIER) 
optSeparatedList [Grammar_FunctionAccess] indent:16, get SeparatedList of [Grammar_FunctionArgument] by ',' closer: ) 
                                   Grammar_FunctionAccess TRY Grammar_FunctionArgument on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_beggining
                                     Grammar_FunctionArgument matched OK: IDENTIFIER result 
>>>ADVANCE 38:44 [5] ','(PUNCT) 
<< Returned: 'result'(IDENTIFIER) line 38 
                                     Grammar_FunctionArgument TRY Grammar_Expression on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:20 e4c_beggining
                                       Grammar_Expression TRY Grammar_Operand on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:21 e4c_beggining
                                         Grammar_Operand TRY Grammar_VariableRef on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:22 e4c_beggining
                                           Grammar_VariableRef matched OK: IDENTIFIER result 
>>>ADVANCE 38:44 [5] ','(PUNCT) 
                                         Parsed OK!-> Grammar_VariableRef 
                                       Parsed OK!-> Grammar_Operand 
                                     Parsed OK!-> Grammar_Expression 
                                   Parsed OK!-> Grammar_FunctionArgument 
                                   Grammar_FunctionAccess matched OK: , , 
>>>ADVANCE 38:45 [6] '('(PUNCT) 
                                   Grammar_FunctionAccess TRY Grammar_FunctionArgument on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_beggining
                                     Grammar_FunctionArgument TRY Grammar_Expression on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:20 e4c_beggining
                                       Grammar_Expression TRY Grammar_Operand on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:21 e4c_beggining
                                         Grammar_Operand TRY Grammar_ParenExpression on '('(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:22 e4c_beggining
                                           Grammar_ParenExpression matched OK: ( ( 
>>>ADVANCE 38:46 [7] '.'(PUNCT) 
                                           Grammar_ParenExpression TRY Grammar_Expression on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:23 e4c_beggining
                                             Grammar_Expression TRY Grammar_Operand on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:24 e4c_beggining
                                               Grammar_Operand TRY Grammar_VariableRef on '.'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:25 e4c_beggining
                                                 Grammar_VariableRef matched OK: . . 
>>>ADVANCE 38:47 [8] 'myArr'(IDENTIFIER) 
                                                 Grammar_VariableRef matched OK: IDENTIFIER myArr 
>>>ADVANCE 38:52 [9] '['(PUNCT) 
                                                 Grammar_VariableRef TRY Grammar_IndexAccess on '['(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:26 e4c_beggining
                                                   Grammar_IndexAccess matched OK: [ [ 
>>>ADVANCE 38:53 [10] 'n'(IDENTIFIER) 
                                                   Grammar_IndexAccess TRY Grammar_Expression on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:27 e4c_beggining
                                                     Grammar_Expression TRY Grammar_Operand on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:28 e4c_beggining
                                                       Grammar_Operand TRY Grammar_VariableRef on 'n'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:29 e4c_beggining
                                                         Grammar_VariableRef matched OK: IDENTIFIER n 
>>>ADVANCE 38:54 [11] ']'(PUNCT) 
                                                       Parsed OK!-> Grammar_VariableRef 
                                                     Parsed OK!-> Grammar_Operand 
                                                   Parsed OK!-> Grammar_Expression 
                                                   Grammar_IndexAccess matched OK: ] ] 
>>>ADVANCE 38:55 [12] ')'(PUNCT) 
                                                 Parsed OK!-> Grammar_IndexAccess 
                                               Parsed OK!-> Grammar_VariableRef 
                                             Parsed OK!-> Grammar_Operand 
                                           Parsed OK!-> Grammar_Expression 
                                           Grammar_ParenExpression matched OK: ) ) 
>>>ADVANCE 38:56 [13] ','(PUNCT) 
                                         Parsed OK!-> Grammar_ParenExpression 
                                       Parsed OK!-> Grammar_Operand 
                                     Parsed OK!-> Grammar_Expression 
                                   Parsed OK!-> Grammar_FunctionArgument 
                                   Grammar_FunctionAccess matched OK: , , 
>>>ADVANCE 38:57 [14] '" "'(STRING) 
                                   Grammar_FunctionAccess TRY Grammar_FunctionArgument on '" "'(STRING) 
E4C generated/ASTBase.c:432:1 frame:19 e4c_beggining
                                     Grammar_FunctionArgument TRY Grammar_Expression on '" "'(STRING) 
E4C generated/ASTBase.c:432:1 frame:20 e4c_beggining
                                       Grammar_Expression TRY Grammar_Operand on '" "'(STRING) 
E4C generated/ASTBase.c:432:1 frame:21 e4c_beggining
                                         Grammar_Operand TRY Grammar_StringLiteral on '" "'(STRING) 
E4C generated/ASTBase.c:432:1 frame:22 e4c_beggining
                                           Grammar_StringLiteral matched OK: STRING " " 
>>>ADVANCE 38:60 [15] ')'(PUNCT) 
                                         Parsed OK!-> Grammar_StringLiteral 
                                       Parsed OK!-> Grammar_Operand 
                                     Parsed OK!-> Grammar_Expression 
                                   Parsed OK!-> Grammar_FunctionArgument 
                                   Grammar_FunctionAccess matched OK: ) ) 
>>>ADVANCE 38:50 [16] ';'(PUNCT) 
                                 Parsed OK!-> Grammar_FunctionAccess 
                               Parsed OK!-> Grammar_VariableRef 
                             Parsed OK!-> Grammar_Operand 
                             Grammar_Expression TRY Grammar_Oper on ';'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_beggining


E4C catched longjmp frame 16

                             Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:38:61. Grammar_Oper: found ';'(PUNCT) but 'OPER' required 
<<REW to 38:50 [16] ';'(PUNCT) 
E4C generated/ASTBase.c:432:1 frame:16 e4c_done
                           Parsed OK!-> Grammar_Expression 
                         Parsed OK!-> Grammar_AssignmentStatement 
                       Parsed OK!-> Grammar_Statement 
                       Grammar_Body matched OK: ; ; 
>>>ADVANCE 40:0 [-1] ' '(NEWLINE) 
                       Grammar_Body matched OK: NEWLINE   
>>>ADVANCE 40:13 [0] 'return'(IDENTIFIER) 
freeForm Mode .lexer.indent:12 block indent:16 parentIndent:12 
END freeFormMode [Grammar_Body] blockIndent:16, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
                     Parsed OK!-> Grammar_Body 
                   Parsed OK!-> Grammar_ForIndexNumeric 
                 Parsed OK!-> Grammar_ForStatement 
               Parsed OK!-> Grammar_Statement 
freeForm Mode .lexer.indent:12 block indent:12 parentIndent:8 
               Grammar_Body TRY Grammar_Statement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:9 e4c_beggining
 
40 12(CODE) return result 
    'return'(IDENTIFIER) 'result'(IDENTIFIER) 

                 Grammar_Statement TRY Grammar_ReturnStatement on 'return'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:10 e4c_beggining
                   Grammar_ReturnStatement matched OK: return return 
>>>ADVANCE 40:20 [1] 'result'(IDENTIFIER) 
                   Grammar_ReturnStatement TRY Grammar_Expression on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:11 e4c_beggining
                     Grammar_Expression TRY Grammar_Operand on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining
                       Grammar_Operand TRY Grammar_VariableRef on 'result'(IDENTIFIER) 
E4C generated/ASTBase.c:432:1 frame:13 e4c_beggining
                         Grammar_VariableRef matched OK: IDENTIFIER result 
>>>ADVANCE 40:0 [-1] ' '(EOF) 
                       Parsed OK!-> Grammar_VariableRef 
                     Parsed OK!-> Grammar_Operand 
                     Grammar_Expression TRY Grammar_Oper on ' '(EOF) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_beggining


E4C catched longjmp frame 12

                     Grammar_Oper parse failed. /home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md:40:21. Grammar_Oper: found ' '(EOF) but 'OPER' required 
<<REW to 40:0 [-1] ' '(EOF) 
E4C generated/ASTBase.c:432:1 frame:12 e4c_done
                   Parsed OK!-> Grammar_Expression 
                 Parsed OK!-> Grammar_ReturnStatement 
               Parsed OK!-> Grammar_Statement 
END freeFormMode [Grammar_Body] blockIndent:12, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
             Parsed OK!-> Grammar_Body 
           Parsed OK!-> Grammar_MethodDeclaration 
         Parsed OK!-> Grammar_Statement 
END freeFormMode [Grammar_Body] blockIndent:8, get SeparatedList of [Grammar_Statement] by ';' closer: -no closer- 
       Parsed OK!-> Grammar_Body 
     Parsed OK!-> Grammar_ClassDeclaration 
   Parsed OK!-> Grammar_Statement 
   Grammar_Module matched OK: EOF   
>>>ADVANCE 40:0 [-1] ' '(EOF) 
END freeFormMode [Grammar_Module] blockIndent:4, get SeparatedList of [Grammar_Statement] by ';' closer: EOF 
E4C generated/Project.c:403:1 frame:2 e4c_done

Parsed OK 
Validating 
- Process Declarations 
callOnSubTree Grammar_Module.declare() - '/home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md' 
  callOnSubArray Grammar_Module.statements[] 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_FunctionDeclaration.declare() - 'inRange' 
      calling Grammar_FunctionDeclaration.declare() - 'inRange' 
      addToScope: 'inRange' to '[Grammar_Module Scope]' 
      addMember: 'inRange' to '[Grammar_Module Scope]' 
      addMember: 'inRange' to 'test' 
      addMember: 'arguments' to '[Grammar_FunctionDeclaration Scope]' 
      addToScope: 'min' to '[Grammar_FunctionDeclaration Scope]' 
      addMember: 'min' to '[Grammar_FunctionDeclaration Scope]' 
      addToScope: 'value' to '[Grammar_FunctionDeclaration Scope]' 
      addMember: 'value' to '[Grammar_FunctionDeclaration Scope]' 
      addToScope: 'max' to '[Grammar_FunctionDeclaration Scope]' 
      addMember: 'max' to '[Grammar_FunctionDeclaration Scope]' 
      callOnSubTree Grammar_VariableRef.declare() - 'Number' 
      callOnSubArray Grammar_FunctionDeclaration.paramsDeclarations[] 
      callOnSubTree Grammar_VariableDecl.declare() - 'min' 
      callOnSubTree Grammar_VariableDecl.declare() - 'value' 
      callOnSubTree Grammar_VariableDecl.declare() - 'max' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ReturnStatement.declare() - 'undefined' 
            callOnSubTree Grammar_Expression.declare() - 'undefined' 
              callOnSubTree Grammar_Operand.declare() - '[Grammar_CaseWhenExpression]' 
                callOnSubTree Grammar_CaseWhenExpression.declare() - 'undefined' 
                  callOnSubArray Grammar_CaseWhenExpression.cases[] 
                  callOnSubTree Grammar_CaseWhenSection.declare() - 'undefined' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Oper.declare() - '<' 
                        calling Grammar_Oper.declare() - '<' 
                        callOnSubTree Grammar_Operand.declare() - 'value' 
                          callOnSubTree Grammar_VariableRef.declare() - 'value' 
                        callOnSubTree Grammar_Operand.declare() - 'min' 
                          callOnSubTree Grammar_VariableRef.declare() - 'min' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Operand.declare() - 'min' 
                        callOnSubTree Grammar_VariableRef.declare() - 'min' 
                  callOnSubTree Grammar_CaseWhenSection.declare() - 'undefined' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Oper.declare() - '>' 
                        calling Grammar_Oper.declare() - '>' 
                        callOnSubTree Grammar_Operand.declare() - 'value' 
                          callOnSubTree Grammar_VariableRef.declare() - 'value' 
                        callOnSubTree Grammar_Operand.declare() - 'max' 
                          callOnSubTree Grammar_VariableRef.declare() - 'max' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Operand.declare() - 'max' 
                        callOnSubTree Grammar_VariableRef.declare() - 'max' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_Operand.declare() - 'value' 
                      callOnSubTree Grammar_VariableRef.declare() - 'value' 
  callOnSubTree Grammar_Statement.declare() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.declare() - 'TestClass' 
      calling Grammar_ClassDeclaration.declare() - 'TestClass' 
      addToScope: 'TestClass' to '[Grammar_Module Scope]' 
      addMember: 'TestClass' to '[Grammar_Module Scope]' 
      addMember: 'TestClass' to 'test' 
      addMember: 'prototype' to 'TestClass' 
      addMember: 'constructor' to 'prototype' 
      callOnSubTree Grammar_Body.declare() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.declare() - 'undefined' 
            calling Grammar_PropertiesDeclaration.declare() - 'undefined' 
            addMember: 'myArr' to 'prototype' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'myArr' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ConstructorDeclaration.declare() - '__init' 
            calling Grammar_ConstructorDeclaration.declare() - '__init' 
            addMember: 'arguments' to '[Grammar_ConstructorDeclaration Scope]' 
            addMember: 'this' to '[Grammar_ConstructorDeclaration Scope]' 
            addToScope: 'initValue' to '[Grammar_ConstructorDeclaration Scope]' 
            addMember: 'initValue' to '[Grammar_ConstructorDeclaration Scope]' 
            callOnSubArray Grammar_ConstructorDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'initValue' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.declare() - '=' 
                  callOnSubTree Grammar_VariableRef.declare() - 'this' 
                    callOnSubArray Grammar_VariableRef.accessors[] 
                    callOnSubTree Grammar_PropertyAccess.declare() - 'myArr' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_Operand.declare() - 'initValue' 
                      callOnSubTree Grammar_VariableRef.declare() - 'initValue' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'indexOf' 
            calling Grammar_MethodDeclaration.declare() - 'indexOf' 
            addMember: 'indexOf' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'searched' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'searched' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'fromIndex' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'fromIndex' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'Number' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'searched' 
              callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubTree Grammar_VariableDecl.declare() - 'fromIndex' 
              callOnSubTree Grammar_VariableRef.declare() - 'Number' 
              callOnSubTree Grammar_Expression.declare() - 'undefined' 
                callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                  callOnSubTree Grammar_NumberLiteral.declare() - '0' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.declare() - 'undefined' 
                  calling Grammar_ForStatement.declare() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.declare() - 'undefined' 
                    calling Grammar_ForIndexNumeric.declare() - 'undefined' 
                    addToScope: 'n' to '[Grammar_ForStatement Scope]' 
                    addMember: 'n' to '[Grammar_ForStatement Scope]' 
                    callOnSubTree Grammar_VariableDecl.declare() - 'n' 
                      callOnSubTree Grammar_Expression.declare() - 'undefined' 
                        callOnSubTree Grammar_Operand.declare() - 'fromIndex' 
                          callOnSubTree Grammar_VariableRef.declare() - 'fromIndex' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Oper.declare() - '<' 
                        calling Grammar_Oper.declare() - '<' 
                        callOnSubTree Grammar_Operand.declare() - 'n' 
                          callOnSubTree Grammar_VariableRef.declare() - 'n' 
                        callOnSubTree Grammar_Operand.declare() - 'this.myArr.length' 
                          callOnSubTree Grammar_VariableRef.declare() - 'this' 
                            callOnSubArray Grammar_VariableRef.accessors[] 
                            callOnSubTree Grammar_PropertyAccess.declare() - 'myArr' 
                            callOnSubTree Grammar_PropertyAccess.declare() - 'length' 
                    callOnSubTree Grammar_Body.declare() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.declare() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_IfStatement.declare() - 'undefined' 
                          callOnSubTree Grammar_Expression.declare() - 'undefined' 
                            callOnSubTree Grammar_Oper.declare() - 'is' 
                              calling Grammar_Oper.declare() - 'is' 
                              callOnSubTree Grammar_Operand.declare() - 'this.myArr[...]' 
                                callOnSubTree Grammar_VariableRef.declare() - 'this' 
                                  callOnSubArray Grammar_VariableRef.accessors[] 
                                  callOnSubTree Grammar_PropertyAccess.declare() - 'myArr' 
                                  callOnSubTree Grammar_IndexAccess.declare() - '[Grammar_Expression]' 
                                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                      callOnSubTree Grammar_Operand.declare() - 'n' 
                                        callOnSubTree Grammar_VariableRef.declare() - 'n' 
                              callOnSubTree Grammar_Operand.declare() - 'searched' 
                                callOnSubTree Grammar_VariableRef.declare() - 'searched' 
                          callOnSubTree Grammar_SingleLineBody.declare() - 'undefined' 
                            callOnSubArray Grammar_SingleLineBody.statements[] 
                            callOnSubTree Grammar_Statement.declare() - 'undefined' 
                              callOnSubArray Grammar_Statement.adjectives[] 
                              callOnSubTree Grammar_ReturnStatement.declare() - 'undefined' 
                                callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                  callOnSubTree Grammar_Operand.declare() - 'n' 
                                    callOnSubTree Grammar_VariableRef.declare() - 'n' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.declare() - 'undefined' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_UnaryOper.declare() - 'unary -' 
                      calling Grammar_UnaryOper.declare() - 'unary -' 
                      callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                        callOnSubTree Grammar_NumberLiteral.declare() - '1' 
        callOnSubTree Grammar_Statement.declare() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.declare() - 'sliceJoin' 
            calling Grammar_MethodDeclaration.declare() - 'sliceJoin' 
            addMember: 'sliceJoin' to 'prototype' 
            addMember: 'arguments' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'this' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'start' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'start' to '[Grammar_MethodDeclaration Scope]' 
            addToScope: 'endPos' to '[Grammar_MethodDeclaration Scope]' 
            addMember: 'endPos' to '[Grammar_MethodDeclaration Scope]' 
            callOnSubTree Grammar_VariableRef.declare() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.declare() - 'start' 
            callOnSubTree Grammar_VariableDecl.declare() - 'endPos' 
            callOnSubTree Grammar_Body.declare() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.declare() - 'undefined' 
                  calling Grammar_VarStatement.declare() - 'undefined' 
                  addToScope: 'len' to '[Grammar_MethodDeclaration Scope]' 
                  addMember: 'len' to '[Grammar_MethodDeclaration Scope]' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.declare() - 'len' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Operand.declare() - 'this.myArr.length' 
                        callOnSubTree Grammar_VariableRef.declare() - 'this' 
                          callOnSubArray Grammar_VariableRef.accessors[] 
                          callOnSubTree Grammar_PropertyAccess.declare() - 'myArr' 
                          callOnSubTree Grammar_PropertyAccess.declare() - 'length' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_DefaultAssignment.declare() - 'undefined' 
                  callOnSubTree Grammar_AssignmentStatement.declare() - '=' 
                    callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Oper.declare() - '+' 
                        calling Grammar_Oper.declare() - '+' 
                        callOnSubTree Grammar_Operand.declare() - 'len' 
                          callOnSubTree Grammar_VariableRef.declare() - 'len' 
                        callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                          callOnSubTree Grammar_NumberLiteral.declare() - '1' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.declare() - '=' 
                  callOnSubTree Grammar_VariableRef.declare() - 'start' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_Operand.declare() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.declare() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.declare() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                            callOnSubTree Grammar_Expression.declare() - 'undefined' 
                              callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.declare() - '0' 
                          callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                            callOnSubTree Grammar_Expression.declare() - 'undefined' 
                              callOnSubTree Grammar_Oper.declare() - ':' 
                                calling Grammar_Oper.declare() - ':' 
                                callOnSubTree Grammar_Oper.declare() - '?' 
                                  calling Grammar_Oper.declare() - '?' 
                                  callOnSubTree Grammar_Oper.declare() - '<' 
                                    calling Grammar_Oper.declare() - '<' 
                                    callOnSubTree Grammar_Operand.declare() - 'start' 
                                      callOnSubTree Grammar_VariableRef.declare() - 'start' 
                                    callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.declare() - '0' 
                                  callOnSubTree Grammar_Oper.declare() - '+' 
                                    calling Grammar_Oper.declare() - '+' 
                                    callOnSubTree Grammar_Operand.declare() - 'len' 
                                      callOnSubTree Grammar_VariableRef.declare() - 'len' 
                                    callOnSubTree Grammar_Operand.declare() - 'start' 
                                      callOnSubTree Grammar_VariableRef.declare() - 'start' 
                                callOnSubTree Grammar_Operand.declare() - 'start' 
                                  callOnSubTree Grammar_VariableRef.declare() - 'start' 
                          callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                            callOnSubTree Grammar_Expression.declare() - 'undefined' 
                              callOnSubTree Grammar_Oper.declare() - '-' 
                                calling Grammar_Oper.declare() - '-' 
                                callOnSubTree Grammar_Operand.declare() - 'len' 
                                  callOnSubTree Grammar_VariableRef.declare() - 'len' 
                                callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.declare() - '1' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.declare() - '=' 
                  callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_Operand.declare() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.declare() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.declare() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                            callOnSubTree Grammar_Expression.declare() - 'undefined' 
                              callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.declare() - '0' 
                          callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                            callOnSubTree Grammar_Expression.declare() - 'undefined' 
                              callOnSubTree Grammar_Oper.declare() - ':' 
                                calling Grammar_Oper.declare() - ':' 
                                callOnSubTree Grammar_Oper.declare() - '?' 
                                  calling Grammar_Oper.declare() - '?' 
                                  callOnSubTree Grammar_Oper.declare() - '<' 
                                    calling Grammar_Oper.declare() - '<' 
                                    callOnSubTree Grammar_Operand.declare() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                                    callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.declare() - '0' 
                                  callOnSubTree Grammar_Oper.declare() - '+' 
                                    calling Grammar_Oper.declare() - '+' 
                                    callOnSubTree Grammar_Operand.declare() - 'len' 
                                      callOnSubTree Grammar_VariableRef.declare() - 'len' 
                                    callOnSubTree Grammar_Operand.declare() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                                callOnSubTree Grammar_Operand.declare() - 'endPos' 
                                  callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                          callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                            callOnSubTree Grammar_Expression.declare() - 'undefined' 
                              callOnSubTree Grammar_Oper.declare() - '-' 
                                calling Grammar_Oper.declare() - '-' 
                                callOnSubTree Grammar_Operand.declare() - 'len' 
                                  callOnSubTree Grammar_VariableRef.declare() - 'len' 
                                callOnSubTree Grammar_Operand.declare() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.declare() - '1' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_IfStatement.declare() - 'undefined' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_Oper.declare() - '>=' 
                      calling Grammar_Oper.declare() - '>=' 
                      callOnSubTree Grammar_Operand.declare() - 'start' 
                        callOnSubTree Grammar_VariableRef.declare() - 'start' 
                      callOnSubTree Grammar_Operand.declare() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                  callOnSubTree Grammar_SingleLineBody.declare() - 'undefined' 
                    callOnSubArray Grammar_SingleLineBody.statements[] 
                    callOnSubTree Grammar_Statement.declare() - 'undefined' 
                      callOnSubArray Grammar_Statement.adjectives[] 
                      callOnSubTree Grammar_ReturnStatement.declare() - 'undefined' 
                        callOnSubTree Grammar_Expression.declare() - 'undefined' 
                          callOnSubTree Grammar_Operand.declare() - '[Grammar_StringLiteral]' 
                            callOnSubTree Grammar_StringLiteral.declare() - '''' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.declare() - 'undefined' 
                  calling Grammar_VarStatement.declare() - 'undefined' 
                  addToScope: 'result' to '[Grammar_MethodDeclaration Scope]' 
                  addMember: 'result' to '[Grammar_MethodDeclaration Scope]' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.declare() - 'result' 
                    callOnSubTree Grammar_VariableRef.declare() - 'String' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Operand.declare() - '[Grammar_StringLiteral]' 
                        callOnSubTree Grammar_StringLiteral.declare() - '""' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.declare() - 'undefined' 
                  calling Grammar_ForStatement.declare() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.declare() - 'undefined' 
                    calling Grammar_ForIndexNumeric.declare() - 'undefined' 
                    addToScope: 'n' to '[Grammar_ForStatement Scope]' 
                    addMember: 'n' to '[Grammar_ForStatement Scope]' 
                    callOnSubTree Grammar_VariableDecl.declare() - 'n' 
                      callOnSubTree Grammar_Expression.declare() - 'undefined' 
                        callOnSubTree Grammar_Operand.declare() - 'start' 
                          callOnSubTree Grammar_VariableRef.declare() - 'start' 
                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                      callOnSubTree Grammar_Operand.declare() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.declare() - 'endPos' 
                    callOnSubTree Grammar_Body.declare() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.declare() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_AssignmentStatement.declare() - '=' 
                          callOnSubTree Grammar_VariableRef.declare() - 'result' 
                          callOnSubTree Grammar_Expression.declare() - 'undefined' 
                            callOnSubTree Grammar_Operand.declare() - '_concatAny(...)' 
                              callOnSubTree Grammar_VariableRef.declare() - '_concatAny' 
                                callOnSubArray Grammar_VariableRef.accessors[] 
                                callOnSubTree Grammar_FunctionAccess.declare() - 'undefined' 
                                  callOnSubArray Grammar_FunctionAccess.args[] 
                                  callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                      callOnSubTree Grammar_Operand.declare() - 'result' 
                                        callOnSubTree Grammar_VariableRef.declare() - 'result' 
                                  callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                      callOnSubTree Grammar_Operand.declare() - '[Grammar_ParenExpression]' 
                                        callOnSubTree Grammar_ParenExpression.declare() - 'undefined' 
                                          callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                            callOnSubTree Grammar_Operand.declare() - 'this.myArr[...]' 
                                              callOnSubTree Grammar_VariableRef.declare() - 'this' 
                                                callOnSubArray Grammar_VariableRef.accessors[] 
                                                callOnSubTree Grammar_PropertyAccess.declare() - 'myArr' 
                                                callOnSubTree Grammar_IndexAccess.declare() - '[Grammar_Expression]' 
                                                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                                    callOnSubTree Grammar_Operand.declare() - 'n' 
                                                      callOnSubTree Grammar_VariableRef.declare() - 'n' 
                                  callOnSubTree Grammar_FunctionArgument.declare() - 'undefined' 
                                    callOnSubTree Grammar_Expression.declare() - 'undefined' 
                                      callOnSubTree Grammar_Operand.declare() - '[Grammar_StringLiteral]' 
                                        callOnSubTree Grammar_StringLiteral.declare() - '" "' 
              callOnSubTree Grammar_Statement.declare() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.declare() - 'undefined' 
                  callOnSubTree Grammar_Expression.declare() - 'undefined' 
                    callOnSubTree Grammar_Operand.declare() - 'result' 
                      callOnSubTree Grammar_VariableRef.declare() - 'result' 
- Connect Imported 
- Processing Append-To, extends 
callOnSubTree Grammar_Module.processAppendToExtends() - '/home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md' 
  callOnSubArray Grammar_Module.statements[] 
  callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_FunctionDeclaration.processAppendToExtends() - 'inRange' 
      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'Number' 
      callOnSubArray Grammar_FunctionDeclaration.paramsDeclarations[] 
      callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'min' 
      callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'value' 
      callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'max' 
      callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ReturnStatement.processAppendToExtends() - 'undefined' 
            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
              callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_CaseWhenExpression]' 
                callOnSubTree Grammar_CaseWhenExpression.processAppendToExtends() - 'undefined' 
                  callOnSubArray Grammar_CaseWhenExpression.cases[] 
                  callOnSubTree Grammar_CaseWhenSection.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Oper.processAppendToExtends() - '<' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'value' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'value' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'min' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'min' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'min' 
                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'min' 
                  callOnSubTree Grammar_CaseWhenSection.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Oper.processAppendToExtends() - '>' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'value' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'value' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'max' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'max' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'max' 
                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'max' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'value' 
                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'value' 
  callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.processAppendToExtends() - 'TestClass' 
      calling Grammar_ClassDeclaration.processAppendToExtends() - 'TestClass' 
      callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.processAppendToExtends() - 'undefined' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'myArr' 
              callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'String' 
        callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ConstructorDeclaration.processAppendToExtends() - '__init' 
            callOnSubArray Grammar_ConstructorDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'initValue' 
            callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.processAppendToExtends() - '=' 
                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'this' 
                    callOnSubArray Grammar_VariableRef.accessors[] 
                    callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'myArr' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'initValue' 
                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'initValue' 
        callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.processAppendToExtends() - 'indexOf' 
            callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'Number' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'searched' 
              callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'String' 
            callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'fromIndex' 
              callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'Number' 
              callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                  callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '0' 
            callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.processAppendToExtends() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'n' 
                      callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'fromIndex' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'fromIndex' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Oper.processAppendToExtends() - '<' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'n' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'n' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'this.myArr.length' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'this' 
                            callOnSubArray Grammar_VariableRef.accessors[] 
                            callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'myArr' 
                            callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'length' 
                    callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_IfStatement.processAppendToExtends() - 'undefined' 
                          callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Oper.processAppendToExtends() - 'is' 
                              callOnSubTree Grammar_Operand.processAppendToExtends() - 'this.myArr[...]' 
                                callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'this' 
                                  callOnSubArray Grammar_VariableRef.accessors[] 
                                  callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'myArr' 
                                  callOnSubTree Grammar_IndexAccess.processAppendToExtends() - '[Grammar_Expression]' 
                                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'n' 
                                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'n' 
                              callOnSubTree Grammar_Operand.processAppendToExtends() - 'searched' 
                                callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'searched' 
                          callOnSubTree Grammar_SingleLineBody.processAppendToExtends() - 'undefined' 
                            callOnSubArray Grammar_SingleLineBody.statements[] 
                            callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                              callOnSubArray Grammar_Statement.adjectives[] 
                              callOnSubTree Grammar_ReturnStatement.processAppendToExtends() - 'undefined' 
                                callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                  callOnSubTree Grammar_Operand.processAppendToExtends() - 'n' 
                                    callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'n' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.processAppendToExtends() - 'undefined' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_UnaryOper.processAppendToExtends() - 'unary -' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                        callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '1' 
        callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.processAppendToExtends() - 'sliceJoin' 
            callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'start' 
            callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'endPos' 
            callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.processAppendToExtends() - 'undefined' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'len' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'this.myArr.length' 
                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'this' 
                          callOnSubArray Grammar_VariableRef.accessors[] 
                          callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'myArr' 
                          callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'length' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_DefaultAssignment.processAppendToExtends() - 'undefined' 
                  callOnSubTree Grammar_AssignmentStatement.processAppendToExtends() - '=' 
                    callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Oper.processAppendToExtends() - '+' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'len' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'len' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                          callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '1' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.processAppendToExtends() - '=' 
                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'start' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.processAppendToExtends() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                              callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '0' 
                          callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                              callOnSubTree Grammar_Oper.processAppendToExtends() - ':' 
                                callOnSubTree Grammar_Oper.processAppendToExtends() - '?' 
                                  callOnSubTree Grammar_Oper.processAppendToExtends() - '<' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'start' 
                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'start' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '0' 
                                  callOnSubTree Grammar_Oper.processAppendToExtends() - '+' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'len' 
                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'len' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'start' 
                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'start' 
                                callOnSubTree Grammar_Operand.processAppendToExtends() - 'start' 
                                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'start' 
                          callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                              callOnSubTree Grammar_Oper.processAppendToExtends() - '-' 
                                callOnSubTree Grammar_Operand.processAppendToExtends() - 'len' 
                                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'len' 
                                callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '1' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.processAppendToExtends() - '=' 
                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.processAppendToExtends() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                              callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '0' 
                          callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                              callOnSubTree Grammar_Oper.processAppendToExtends() - ':' 
                                callOnSubTree Grammar_Oper.processAppendToExtends() - '?' 
                                  callOnSubTree Grammar_Oper.processAppendToExtends() - '<' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '0' 
                                  callOnSubTree Grammar_Oper.processAppendToExtends() - '+' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'len' 
                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'len' 
                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                                callOnSubTree Grammar_Operand.processAppendToExtends() - 'endPos' 
                                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                          callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                              callOnSubTree Grammar_Oper.processAppendToExtends() - '-' 
                                callOnSubTree Grammar_Operand.processAppendToExtends() - 'len' 
                                  callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'len' 
                                callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.processAppendToExtends() - '1' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_IfStatement.processAppendToExtends() - 'undefined' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Oper.processAppendToExtends() - '>=' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'start' 
                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'start' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                  callOnSubTree Grammar_SingleLineBody.processAppendToExtends() - 'undefined' 
                    callOnSubArray Grammar_SingleLineBody.statements[] 
                    callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                      callOnSubArray Grammar_Statement.adjectives[] 
                      callOnSubTree Grammar_ReturnStatement.processAppendToExtends() - 'undefined' 
                        callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                          callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_StringLiteral]' 
                            callOnSubTree Grammar_StringLiteral.processAppendToExtends() - '''' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.processAppendToExtends() - 'undefined' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'result' 
                    callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'String' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_StringLiteral]' 
                        callOnSubTree Grammar_StringLiteral.processAppendToExtends() - '""' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.processAppendToExtends() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_VariableDecl.processAppendToExtends() - 'n' 
                      callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                        callOnSubTree Grammar_Operand.processAppendToExtends() - 'start' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'start' 
                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'endPos' 
                    callOnSubTree Grammar_Body.processAppendToExtends() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_AssignmentStatement.processAppendToExtends() - '=' 
                          callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'result' 
                          callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                            callOnSubTree Grammar_Operand.processAppendToExtends() - '_concatAny(...)' 
                              callOnSubTree Grammar_VariableRef.processAppendToExtends() - '_concatAny' 
                                callOnSubArray Grammar_VariableRef.accessors[] 
                                callOnSubTree Grammar_FunctionAccess.processAppendToExtends() - 'undefined' 
                                  callOnSubArray Grammar_FunctionAccess.args[] 
                                  callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                      callOnSubTree Grammar_Operand.processAppendToExtends() - 'result' 
                                        callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'result' 
                                  callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                      callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_ParenExpression]' 
                                        callOnSubTree Grammar_ParenExpression.processAppendToExtends() - 'undefined' 
                                          callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                            callOnSubTree Grammar_Operand.processAppendToExtends() - 'this.myArr[...]' 
                                              callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'this' 
                                                callOnSubArray Grammar_VariableRef.accessors[] 
                                                callOnSubTree Grammar_PropertyAccess.processAppendToExtends() - 'myArr' 
                                                callOnSubTree Grammar_IndexAccess.processAppendToExtends() - '[Grammar_Expression]' 
                                                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'n' 
                                                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'n' 
                                  callOnSubTree Grammar_FunctionArgument.processAppendToExtends() - 'undefined' 
                                    callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                                      callOnSubTree Grammar_Operand.processAppendToExtends() - '[Grammar_StringLiteral]' 
                                        callOnSubTree Grammar_StringLiteral.processAppendToExtends() - '" "' 
              callOnSubTree Grammar_Statement.processAppendToExtends() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.processAppendToExtends() - 'undefined' 
                  callOnSubTree Grammar_Expression.processAppendToExtends() - 'undefined' 
                    callOnSubTree Grammar_Operand.processAppendToExtends() - 'result' 
                      callOnSubTree Grammar_VariableRef.processAppendToExtends() - 'result' 
- Apply Name Affinity 
- Converting Types 
- Evaluating Assignments 
callOnSubTree Grammar_Module.evaluateAssignments() - '/home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md' 
  callOnSubArray Grammar_Module.statements[] 
  callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_FunctionDeclaration.evaluateAssignments() - 'inRange' 
      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'Number' 
      callOnSubArray Grammar_FunctionDeclaration.paramsDeclarations[] 
      callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'min' 
      callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'value' 
      callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'max' 
      callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ReturnStatement.evaluateAssignments() - 'undefined' 
            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
              callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_CaseWhenExpression]' 
                callOnSubTree Grammar_CaseWhenExpression.evaluateAssignments() - 'undefined' 
                  callOnSubArray Grammar_CaseWhenExpression.cases[] 
                  callOnSubTree Grammar_CaseWhenSection.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Oper.evaluateAssignments() - '<' 
                        calling Grammar_Oper.evaluateAssignments() - '<' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'value' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'value' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'min' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'min' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'min' 
                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'min' 
                  callOnSubTree Grammar_CaseWhenSection.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Oper.evaluateAssignments() - '>' 
                        calling Grammar_Oper.evaluateAssignments() - '>' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'value' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'value' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'max' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'max' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'max' 
                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'max' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'value' 
                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'value' 
  callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.evaluateAssignments() - 'TestClass' 
      callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.evaluateAssignments() - 'undefined' 
            calling Grammar_PropertiesDeclaration.evaluateAssignments() - 'undefined' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'myArr' 
              callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'String' 
        callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ConstructorDeclaration.evaluateAssignments() - '__init' 
            callOnSubArray Grammar_ConstructorDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'initValue' 
            callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                  calling Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'this' 
                    callOnSubArray Grammar_VariableRef.accessors[] 
                    callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'myArr' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'initValue' 
                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'initValue' 
        callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.evaluateAssignments() - 'indexOf' 
            callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'Number' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'searched' 
              callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'String' 
            callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'fromIndex' 
              callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'Number' 
              callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                  callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '0' 
            callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.evaluateAssignments() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'n' 
                      callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'fromIndex' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'fromIndex' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Oper.evaluateAssignments() - '<' 
                        calling Grammar_Oper.evaluateAssignments() - '<' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'n' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'n' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'this.myArr.length' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'this' 
                            callOnSubArray Grammar_VariableRef.accessors[] 
                            callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'myArr' 
                            callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'length' 
                    callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_IfStatement.evaluateAssignments() - 'undefined' 
                          callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Oper.evaluateAssignments() - 'is' 
                              calling Grammar_Oper.evaluateAssignments() - 'is' 
                              callOnSubTree Grammar_Operand.evaluateAssignments() - 'this.myArr[...]' 
                                callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'this' 
                                  callOnSubArray Grammar_VariableRef.accessors[] 
                                  callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'myArr' 
                                  callOnSubTree Grammar_IndexAccess.evaluateAssignments() - '[Grammar_Expression]' 
                                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'n' 
                                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'n' 
                              callOnSubTree Grammar_Operand.evaluateAssignments() - 'searched' 
                                callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'searched' 
                          callOnSubTree Grammar_SingleLineBody.evaluateAssignments() - 'undefined' 
                            callOnSubArray Grammar_SingleLineBody.statements[] 
                            callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                              callOnSubArray Grammar_Statement.adjectives[] 
                              callOnSubTree Grammar_ReturnStatement.evaluateAssignments() - 'undefined' 
                                callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                  callOnSubTree Grammar_Operand.evaluateAssignments() - 'n' 
                                    callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'n' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.evaluateAssignments() - 'undefined' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_UnaryOper.evaluateAssignments() - 'unary -' 
                      calling Grammar_UnaryOper.evaluateAssignments() - 'unary -' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                        callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '1' 
        callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.evaluateAssignments() - 'sliceJoin' 
            callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'start' 
            callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'endPos' 
            callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.evaluateAssignments() - 'undefined' 
                  calling Grammar_VarStatement.evaluateAssignments() - 'undefined' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'len' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'this.myArr.length' 
                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'this' 
                          callOnSubArray Grammar_VariableRef.accessors[] 
                          callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'myArr' 
                          callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'length' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_DefaultAssignment.evaluateAssignments() - 'undefined' 
                  callOnSubTree Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                    calling Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                    callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Oper.evaluateAssignments() - '+' 
                        calling Grammar_Oper.evaluateAssignments() - '+' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'len' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'len' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                          callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '1' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                  calling Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'start' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.evaluateAssignments() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                              callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '0' 
                          callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                              callOnSubTree Grammar_Oper.evaluateAssignments() - ':' 
                                calling Grammar_Oper.evaluateAssignments() - ':' 
                                callOnSubTree Grammar_Oper.evaluateAssignments() - '?' 
                                  calling Grammar_Oper.evaluateAssignments() - '?' 
                                  callOnSubTree Grammar_Oper.evaluateAssignments() - '<' 
                                    calling Grammar_Oper.evaluateAssignments() - '<' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'start' 
                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'start' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '0' 
                                  callOnSubTree Grammar_Oper.evaluateAssignments() - '+' 
                                    calling Grammar_Oper.evaluateAssignments() - '+' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'len' 
                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'len' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'start' 
                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'start' 
                                callOnSubTree Grammar_Operand.evaluateAssignments() - 'start' 
                                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'start' 
                          callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                              callOnSubTree Grammar_Oper.evaluateAssignments() - '-' 
                                calling Grammar_Oper.evaluateAssignments() - '-' 
                                callOnSubTree Grammar_Operand.evaluateAssignments() - 'len' 
                                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'len' 
                                callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '1' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                  calling Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.evaluateAssignments() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                              callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '0' 
                          callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                              callOnSubTree Grammar_Oper.evaluateAssignments() - ':' 
                                calling Grammar_Oper.evaluateAssignments() - ':' 
                                callOnSubTree Grammar_Oper.evaluateAssignments() - '?' 
                                  calling Grammar_Oper.evaluateAssignments() - '?' 
                                  callOnSubTree Grammar_Oper.evaluateAssignments() - '<' 
                                    calling Grammar_Oper.evaluateAssignments() - '<' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '0' 
                                  callOnSubTree Grammar_Oper.evaluateAssignments() - '+' 
                                    calling Grammar_Oper.evaluateAssignments() - '+' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'len' 
                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'len' 
                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                                callOnSubTree Grammar_Operand.evaluateAssignments() - 'endPos' 
                                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                          callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                              callOnSubTree Grammar_Oper.evaluateAssignments() - '-' 
                                calling Grammar_Oper.evaluateAssignments() - '-' 
                                callOnSubTree Grammar_Operand.evaluateAssignments() - 'len' 
                                  callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'len' 
                                callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.evaluateAssignments() - '1' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_IfStatement.evaluateAssignments() - 'undefined' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Oper.evaluateAssignments() - '>=' 
                      calling Grammar_Oper.evaluateAssignments() - '>=' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'start' 
                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'start' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                  callOnSubTree Grammar_SingleLineBody.evaluateAssignments() - 'undefined' 
                    callOnSubArray Grammar_SingleLineBody.statements[] 
                    callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                      callOnSubArray Grammar_Statement.adjectives[] 
                      callOnSubTree Grammar_ReturnStatement.evaluateAssignments() - 'undefined' 
                        callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                          callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_StringLiteral]' 
                            callOnSubTree Grammar_StringLiteral.evaluateAssignments() - '''' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.evaluateAssignments() - 'undefined' 
                  calling Grammar_VarStatement.evaluateAssignments() - 'undefined' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'result' 
                    callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'String' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_StringLiteral]' 
                        callOnSubTree Grammar_StringLiteral.evaluateAssignments() - '""' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.evaluateAssignments() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_VariableDecl.evaluateAssignments() - 'n' 
                      callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                        callOnSubTree Grammar_Operand.evaluateAssignments() - 'start' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'start' 
                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'endPos' 
                    callOnSubTree Grammar_Body.evaluateAssignments() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                          calling Grammar_AssignmentStatement.evaluateAssignments() - '=' 
                          callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'result' 
                          callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                            callOnSubTree Grammar_Operand.evaluateAssignments() - '_concatAny(...)' 
                              callOnSubTree Grammar_VariableRef.evaluateAssignments() - '_concatAny' 
                                callOnSubArray Grammar_VariableRef.accessors[] 
                                callOnSubTree Grammar_FunctionAccess.evaluateAssignments() - 'undefined' 
                                  callOnSubArray Grammar_FunctionAccess.args[] 
                                  callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                      callOnSubTree Grammar_Operand.evaluateAssignments() - 'result' 
                                        callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'result' 
                                  callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                      callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_ParenExpression]' 
                                        callOnSubTree Grammar_ParenExpression.evaluateAssignments() - 'undefined' 
                                          callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                            callOnSubTree Grammar_Operand.evaluateAssignments() - 'this.myArr[...]' 
                                              callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'this' 
                                                callOnSubArray Grammar_VariableRef.accessors[] 
                                                callOnSubTree Grammar_PropertyAccess.evaluateAssignments() - 'myArr' 
                                                callOnSubTree Grammar_IndexAccess.evaluateAssignments() - '[Grammar_Expression]' 
                                                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'n' 
                                                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'n' 
                                  callOnSubTree Grammar_FunctionArgument.evaluateAssignments() - 'undefined' 
                                    callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                                      callOnSubTree Grammar_Operand.evaluateAssignments() - '[Grammar_StringLiteral]' 
                                        callOnSubTree Grammar_StringLiteral.evaluateAssignments() - '" "' 
              callOnSubTree Grammar_Statement.evaluateAssignments() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.evaluateAssignments() - 'undefined' 
                  callOnSubTree Grammar_Expression.evaluateAssignments() - 'undefined' 
                    callOnSubTree Grammar_Operand.evaluateAssignments() - 'result' 
                      callOnSubTree Grammar_VariableRef.evaluateAssignments() - 'result' 
- Validating Property Access 
callOnSubTree Grammar_Module.validatePropertyAccess() - '/home/ltato/LiteScript/devel/liteC/Ctest/test.lite.md' 
  callOnSubArray Grammar_Module.statements[] 
  callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_FunctionDeclaration.validatePropertyAccess() - 'inRange' 
      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'Number' 
        calling Grammar_VariableRef.validatePropertyAccess() - 'Number' 
      callOnSubArray Grammar_FunctionDeclaration.paramsDeclarations[] 
      callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'min' 
      callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'value' 
      callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'max' 
      callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ReturnStatement.validatePropertyAccess() - 'undefined' 
            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
              callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_CaseWhenExpression]' 
                callOnSubTree Grammar_CaseWhenExpression.validatePropertyAccess() - 'undefined' 
                  callOnSubArray Grammar_CaseWhenExpression.cases[] 
                  callOnSubTree Grammar_CaseWhenSection.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Oper.validatePropertyAccess() - '<' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'value' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'value' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'value' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'min' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'min' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'min' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'min' 
                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'min' 
                          calling Grammar_VariableRef.validatePropertyAccess() - 'min' 
                  callOnSubTree Grammar_CaseWhenSection.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Oper.validatePropertyAccess() - '>' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'value' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'value' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'value' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'max' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'max' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'max' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'max' 
                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'max' 
                          calling Grammar_VariableRef.validatePropertyAccess() - 'max' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'value' 
                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'value' 
                        calling Grammar_VariableRef.validatePropertyAccess() - 'value' 
  callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
    callOnSubArray Grammar_Statement.adjectives[] 
    callOnSubTree Grammar_ClassDeclaration.validatePropertyAccess() - 'TestClass' 
      calling Grammar_ClassDeclaration.validatePropertyAccess() - 'TestClass' 
      callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
        callOnSubArray Grammar_Body.statements[] 
        callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_PropertiesDeclaration.validatePropertyAccess() - 'undefined' 
            callOnSubArray Grammar_PropertiesDeclaration.list[] 
            callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'myArr' 
              callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'String' 
                calling Grammar_VariableRef.validatePropertyAccess() - 'String' 
        callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_ConstructorDeclaration.validatePropertyAccess() - '__init' 
            callOnSubArray Grammar_ConstructorDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'initValue' 
            callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.validatePropertyAccess() - '=' 
                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'this' 
                    calling Grammar_VariableRef.validatePropertyAccess() - 'this' 
                    callOnSubArray Grammar_VariableRef.accessors[] 
                    callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'myArr' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'initValue' 
                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'initValue' 
                        calling Grammar_VariableRef.validatePropertyAccess() - 'initValue' 
        callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.validatePropertyAccess() - 'indexOf' 
            callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'Number' 
              calling Grammar_VariableRef.validatePropertyAccess() - 'Number' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'searched' 
              callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'String' 
                calling Grammar_VariableRef.validatePropertyAccess() - 'String' 
            callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'fromIndex' 
              callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'Number' 
                calling Grammar_VariableRef.validatePropertyAccess() - 'Number' 
              callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                  callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '0' 
            callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'n' 
                      callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'fromIndex' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'fromIndex' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'fromIndex' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Oper.validatePropertyAccess() - '<' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'n' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'n' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'n' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'this.myArr.length' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'this' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'this' 
                            callOnSubArray Grammar_VariableRef.accessors[] 
                            callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'myArr' 
                            callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'length' 
                    callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_IfStatement.validatePropertyAccess() - 'undefined' 
                          callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Oper.validatePropertyAccess() - 'is' 
                              callOnSubTree Grammar_Operand.validatePropertyAccess() - 'this.myArr[...]' 
                                callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'this' 
                                  calling Grammar_VariableRef.validatePropertyAccess() - 'this' 
                                  callOnSubArray Grammar_VariableRef.accessors[] 
                                  callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'myArr' 
                                  callOnSubTree Grammar_IndexAccess.validatePropertyAccess() - '[Grammar_Expression]' 
                                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'n' 
                                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'n' 
                                          calling Grammar_VariableRef.validatePropertyAccess() - 'n' 
                              callOnSubTree Grammar_Operand.validatePropertyAccess() - 'searched' 
                                callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'searched' 
                                  calling Grammar_VariableRef.validatePropertyAccess() - 'searched' 
                          callOnSubTree Grammar_SingleLineBody.validatePropertyAccess() - 'undefined' 
                            callOnSubArray Grammar_SingleLineBody.statements[] 
                            callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                              callOnSubArray Grammar_Statement.adjectives[] 
                              callOnSubTree Grammar_ReturnStatement.validatePropertyAccess() - 'undefined' 
                                callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                  callOnSubTree Grammar_Operand.validatePropertyAccess() - 'n' 
                                    callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'n' 
                                      calling Grammar_VariableRef.validatePropertyAccess() - 'n' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_UnaryOper.validatePropertyAccess() - 'unary -' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                        callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '1' 
        callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
          callOnSubArray Grammar_Statement.adjectives[] 
          callOnSubTree Grammar_MethodDeclaration.validatePropertyAccess() - 'sliceJoin' 
            callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'String' 
              calling Grammar_VariableRef.validatePropertyAccess() - 'String' 
            callOnSubArray Grammar_MethodDeclaration.paramsDeclarations[] 
            callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'start' 
            callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'endPos' 
            callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
              callOnSubArray Grammar_Body.statements[] 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'len' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'this.myArr.length' 
                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'this' 
                          calling Grammar_VariableRef.validatePropertyAccess() - 'this' 
                          callOnSubArray Grammar_VariableRef.accessors[] 
                          callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'myArr' 
                          callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'length' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_DefaultAssignment.validatePropertyAccess() - 'undefined' 
                  callOnSubTree Grammar_AssignmentStatement.validatePropertyAccess() - '=' 
                    callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                      calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Oper.validatePropertyAccess() - '+' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'len' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'len' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'len' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                          callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '1' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.validatePropertyAccess() - '=' 
                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'start' 
                    calling Grammar_VariableRef.validatePropertyAccess() - 'start' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'inRange' 
                        calling Grammar_VariableRef.validatePropertyAccess() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.validatePropertyAccess() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                              callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '0' 
                          callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                              callOnSubTree Grammar_Oper.validatePropertyAccess() - ':' 
                                callOnSubTree Grammar_Oper.validatePropertyAccess() - '?' 
                                  callOnSubTree Grammar_Oper.validatePropertyAccess() - '<' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'start' 
                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'start' 
                                        calling Grammar_VariableRef.validatePropertyAccess() - 'start' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '0' 
                                  callOnSubTree Grammar_Oper.validatePropertyAccess() - '+' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'len' 
                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                        calling Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'start' 
                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'start' 
                                        calling Grammar_VariableRef.validatePropertyAccess() - 'start' 
                                callOnSubTree Grammar_Operand.validatePropertyAccess() - 'start' 
                                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'start' 
                                    calling Grammar_VariableRef.validatePropertyAccess() - 'start' 
                          callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                              callOnSubTree Grammar_Oper.validatePropertyAccess() - '-' 
                                callOnSubTree Grammar_Operand.validatePropertyAccess() - 'len' 
                                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                    calling Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '1' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_AssignmentStatement.validatePropertyAccess() - '=' 
                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                    calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'inRange(...)' 
                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'inRange' 
                        calling Grammar_VariableRef.validatePropertyAccess() - 'inRange' 
                        callOnSubArray Grammar_VariableRef.accessors[] 
                        callOnSubTree Grammar_FunctionAccess.validatePropertyAccess() - 'undefined' 
                          callOnSubArray Grammar_FunctionAccess.args[] 
                          callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                              callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                                callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '0' 
                          callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                              callOnSubTree Grammar_Oper.validatePropertyAccess() - ':' 
                                callOnSubTree Grammar_Oper.validatePropertyAccess() - '?' 
                                  callOnSubTree Grammar_Oper.validatePropertyAccess() - '<' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                                        calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                                      callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '0' 
                                  callOnSubTree Grammar_Oper.validatePropertyAccess() - '+' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'len' 
                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                        calling Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'endPos' 
                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                                        calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                                callOnSubTree Grammar_Operand.validatePropertyAccess() - 'endPos' 
                                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                                    calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                          callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                              callOnSubTree Grammar_Oper.validatePropertyAccess() - '-' 
                                callOnSubTree Grammar_Operand.validatePropertyAccess() - 'len' 
                                  callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                    calling Grammar_VariableRef.validatePropertyAccess() - 'len' 
                                callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_NumberLiteral]' 
                                  callOnSubTree Grammar_NumberLiteral.validatePropertyAccess() - '1' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_IfStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Oper.validatePropertyAccess() - '>=' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'start' 
                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'start' 
                          calling Grammar_VariableRef.validatePropertyAccess() - 'start' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                          calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                  callOnSubTree Grammar_SingleLineBody.validatePropertyAccess() - 'undefined' 
                    callOnSubArray Grammar_SingleLineBody.statements[] 
                    callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                      callOnSubArray Grammar_Statement.adjectives[] 
                      callOnSubTree Grammar_ReturnStatement.validatePropertyAccess() - 'undefined' 
                        callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                          callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_StringLiteral]' 
                            callOnSubTree Grammar_StringLiteral.validatePropertyAccess() - '''' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_VarStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubArray Grammar_VarStatement.list[] 
                  callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'result' 
                    callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'String' 
                      calling Grammar_VariableRef.validatePropertyAccess() - 'String' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_StringLiteral]' 
                        callOnSubTree Grammar_StringLiteral.validatePropertyAccess() - '""' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ForStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubTree Grammar_ForIndexNumeric.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_VariableDecl.validatePropertyAccess() - 'n' 
                      callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                        callOnSubTree Grammar_Operand.validatePropertyAccess() - 'start' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'start' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'start' 
                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'endPos' 
                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                          calling Grammar_VariableRef.validatePropertyAccess() - 'endPos' 
                    callOnSubTree Grammar_Body.validatePropertyAccess() - 'undefined' 
                      callOnSubArray Grammar_Body.statements[] 
                      callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                        callOnSubArray Grammar_Statement.adjectives[] 
                        callOnSubTree Grammar_AssignmentStatement.validatePropertyAccess() - '=' 
                          callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'result' 
                            calling Grammar_VariableRef.validatePropertyAccess() - 'result' 
                          callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                            callOnSubTree Grammar_Operand.validatePropertyAccess() - '_concatAny(...)' 
                              callOnSubTree Grammar_VariableRef.validatePropertyAccess() - '_concatAny' 
                                calling Grammar_VariableRef.validatePropertyAccess() - '_concatAny' 
                                callOnSubArray Grammar_VariableRef.accessors[] 
                                callOnSubTree Grammar_FunctionAccess.validatePropertyAccess() - 'undefined' 
                                  callOnSubArray Grammar_FunctionAccess.args[] 
                                  callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                      callOnSubTree Grammar_Operand.validatePropertyAccess() - 'result' 
                                        callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'result' 
                                          calling Grammar_VariableRef.validatePropertyAccess() - 'result' 
                                  callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                      callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_ParenExpression]' 
                                        callOnSubTree Grammar_ParenExpression.validatePropertyAccess() - 'undefined' 
                                          callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                            callOnSubTree Grammar_Operand.validatePropertyAccess() - 'this.myArr[...]' 
                                              callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'this' 
                                                calling Grammar_VariableRef.validatePropertyAccess() - 'this' 
                                                callOnSubArray Grammar_VariableRef.accessors[] 
                                                callOnSubTree Grammar_PropertyAccess.validatePropertyAccess() - 'myArr' 
                                                callOnSubTree Grammar_IndexAccess.validatePropertyAccess() - '[Grammar_Expression]' 
                                                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'n' 
                                                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'n' 
                                                        calling Grammar_VariableRef.validatePropertyAccess() - 'n' 
                                  callOnSubTree Grammar_FunctionArgument.validatePropertyAccess() - 'undefined' 
                                    callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                                      callOnSubTree Grammar_Operand.validatePropertyAccess() - '[Grammar_StringLiteral]' 
                                        callOnSubTree Grammar_StringLiteral.validatePropertyAccess() - '" "' 
              callOnSubTree Grammar_Statement.validatePropertyAccess() - 'undefined' 
                callOnSubArray Grammar_Statement.adjectives[] 
                callOnSubTree Grammar_ReturnStatement.validatePropertyAccess() - 'undefined' 
                  callOnSubTree Grammar_Expression.validatePropertyAccess() - 'undefined' 
                    callOnSubTree Grammar_Operand.validatePropertyAccess() - 'result' 
                      callOnSubTree Grammar_VariableRef.validatePropertyAccess() - 'result' 
                        calling Grammar_VariableRef.validatePropertyAccess() - 'result' 

Producing c at /home/ltato/LiteScript/devel/liteC/Ctest/lite-out
 
E4C generated/lib/mkPath.c:68:1 frame:2 e4c_beggining
E4C generated/lib/mkPath.c:68:1 frame:2 e4c_beggining
[32m[OK] 1 kb -> test.["md"] [39;49m 
0 errors, 0 warnings. 
ctest: core/LiteC-core.c:218: __applyArr: Assertion `argsArray.class==&Array_CLASSINFO' failed.
