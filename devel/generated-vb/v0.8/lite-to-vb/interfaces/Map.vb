'Generated by LiteScript compiler v0.8.9, source: interfaces/Map.lite.md
' -----------
Module Map
' -----------

'Use this class instead of js built-in Object Class,
'when you're using the js built-in Object as a "dictionary"
'and you want to be able to compile the code to C

'You can declare a Map *Literally" using the keyword `map`.

'Examples:
'
'
'#### Standard JS Literal Object
'
'LiteScript:
'
'    var foo =
'        a: 1
'        b: "text"
'        c: new MyClass
'
'    var baz = foo.b
'
'=> when compiled-to-js:
'
'    var foo = {a: 1, b: "text", c: new MyClass()};
'    var baz = foo.b;
'
'=> when compiled-to-Lite-C:
'
' ***Can not be compiled to lite-C***.
'
' - Solution: Use litescript *map*
'
'#### Litescript Literal Map
'
'LiteScript:
'
'    var foo = map
'        a: 1
'        b: "text"
'        c: new MyClass
'
'    var baz = foo.get("b")
'
'=> when compiled-to-js:
'
'    var foo = new Map().fromObject( {a: 1, b: "text", c: new MyClass()} );
'    var baz = foo.get("b");
'
'=> when compiled-to-Lite-C:
'
'    #define _NV(n,v) {&NameValuePair_CLASSINFO, &(NameValuePair_s){n,v}
'
'    var foo = new(Map,3,(any_arr){
'                    _NV(any_LTR("a"),any_number(1)),
'                    _NV(any_LTR("b"),any_LTR("text"))
'                    _NV(any_LTR("c"),new(MyClass,0,NULL))
'        });
'
'    var baz = CALL1(get_,foo,any_LTR("b"))
'

'As you can see, to be able to compile litescript code to Lite-C
'you'll need to use *map* instead of using js:Object as a dictionary. The required changes are:
  '1. add the keyword "map" after "var foo ="
  '2. use `map.get(key)` and `map.set(key,value)` instead of `object[key]` and `object[key]=value`

'The *map* class is a native class in Lite-C.

'Here we're declaring a *map* class to be used when the code is compiled-to-js


    '    export only class Map
    ' constructor
    Class Map
        Public Property dict as Object' mainType: Object  
        
            Public Property size as Object
    
    Sub New()
            '.clear
            Me.clear()
        end function
    
        ' ---------------------------
        Public Function clear ()
            '.dict= new Object()
            Me.dict = new Object()
            '.dict.__proto__ = null //no __proto__ chain, no "extra" properties
            Me.dict.__proto__ = null
            '.size=0
            Me.size = 0
        end function
        ' ---------------------------
        Public Function fromObject (object)
            '.dict = object
            Me.dict = object
            '.dict.__proto__ = null //no __proto__ chain, no "extra" properties
            Me.dict.__proto__ = null
            '.size = Object.keys(.dict).length
            Me.size = Object.keys(Me.dict).length
            'return this
            return Me
        end function
        ' ---------------------------
        Public Function set (key, value)
            'if .dict hasnt property key, .size++
            if Not (Me.dict.Contains(key)) Then Me.size++
            '.dict[key]=value
            Me.dict(key) = value
        end function
        ' ---------------------------
        Public Function setProperty (name, value)
            '.dict[name] = value
            Me.dict(name) = value
        end function
        ' ---------------------------
        Public Function delete (key)
            'if .dict has property key
            if Me.dict.Contains(key) Then
            
                '.size--
                Me.size--
                'delete .dict[key]
                delete Me.dict(key)
            
            End if
            
        end function
        ' ---------------------------
        Public Function get (key)
            'return .dict[key]
            return Me.dict(key)
        end function
        ' ---------------------------
        Public Function tryGetProperty (key)
            'return .dict[key]
            return Me.dict(key)
        end function
        ' ---------------------------
        Public Function has (key)
            'return .dict has property key
            return Me.dict.Contains(key)
        end function
        ' ---------------------------
        Public Function hasProperty (key)
            'return .dict has property key
            return Me.dict.Contains(key)
        end function
        ' ---------------------------
        Public Function hasOwnProperty (key)
            'return .dict has property key
            return Me.dict.Contains(key)
        end function
        ' ---------------------------
        Public Function allPropertyNames (map)
            'return Object.keys(.dict)
            return Object.keys(Me.dict)
        end function
        ' ---------------------------
        Public Function forEach (callb)
            'for each property propName,value in .dict
            var value=undefined;
            for ( var propName in Me.dict){value=Me.dict[propName];
                {
                'callb.call(this,propName,value)
                callb.call(Me, propName, value)
                }
                
                }' end for each property
            
        end function
        ' ---------------------------
        Public Function toString ()
            'return JSON.stringify(.dict)
            return JSON.stringify(Me.dict)
        end function
        ' ---------------------------
        Public Function keys ()
            'return Object.keys(.dict)
            return Object.keys(Me.dict)
        end function
    
    end class 'Map
' -----------
' Module code
' -----------
end module
