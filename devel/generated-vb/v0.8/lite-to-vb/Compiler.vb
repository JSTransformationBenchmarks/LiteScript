'Generated by LiteScript compiler v0.8.9, source: Compiler.lite.md
' -----------
Module Compiler
' -----------
'==============================
'LiteScript is a highly readable language that compiles to JavaScript.

    'public var version = '0.8.9'
    Dim version = "0.8.9"

    'public var buildDate = "Tue Apr 07 2015 12:53:32 GMT-0300 (ART)"
    Dim buildDate = "Tue Apr 07 2015 12:53:32 GMT-0300 (ART)"

'This v0.8 compiler is written in v0.7 syntax.
'That is, you use the v0.7 compiler to compile this code
'and you get a v0.8 compiler, suporting v0.8 syntax.

'Today 2014-07-22, V0.8 can compile itself to .js and to .c

'###Module Dependencies

'The Compiler module is the main interface to LiteScript Project module.

    'import
        'Project, Validate, GeneralOptions
        'Grammar
        'logger, shims

'Get the 'Environment' object for the compiler to use.
'The 'Environment' object, must provide functions to load files, search modules,
'and a optional external cache (disk).
'The `Environment` abstraction allows us to support compile on server(node) or the browser.

    'import Environment
    'var Project = require('./Project.vb');
    'var Validate = require('./Validate.vb');
    'var GeneralOptions = require('./lib/GeneralOptions.vb');
    'var Grammar = require('./Grammar.vb');
    'var logger = require('./lib/logger.vb');
    'var shims = require('./interfaces/shims.vb');

'Get the 'Environment' object for the compiler to use.
'The 'Environment' object, must provide functions to load files, search modules,
'and a optional external cache (disk).
'The `Environment` abstraction allows us to support compile on server(node) or the browser.

    'import Environment
    'var Environment = require('./lib/Environment.vb');


'## Main API functions: LiteScript.compileProject & LiteScript.compile

    '    export function compileProject (options:GeneralOptions) returns Project
    ' ---------------------------
    function compileProject(options)

'The 'compileProject' function will load and compile the main Module of a project.
'The compilation of the main module will trigger import and compilation of all its "child" modules
'(dependency tree is constructed by `import`/`require` between modules)

'The main module is the root of the module dependency tree, and can reference
'another modules via import|require.

'Create a 'Project' to hold the main module and dependant modules

        '#since "options" come from a external source, it can be anything
        'options = prepareOptions(options)
        options = prepareOptions(options)

        'console.time 'Total Compile Project'
        console.time("Total Compile Project")

        'var project = new Project(options)
        Dim project = new Project(options)

        'project.compile
        project.compile()

        'if options.perf
        if options.perf Then
        
            'console.timeEnd 'Total Compile Project'
            console.timeEnd("Total Compile Project")
        
        End if

        'return project
        return project
    end function

'After generating all modules, if no errors occurred,
'mainModuleName and all its dependencies will be compiled in the output dir

    '    export function compile (filename, sourceLines, options: GeneralOptions) returns array of string
    ' ---------------------------
    function compile(filename, sourceLines, options)

'Used to compile source code loaded in memory (instead of loading a file)
'result is sotred also in memory (instead of writing to a file)

'input:
'* filename (for error reporting),
'* sourceLines: LiteScript code: string array | large string | Buffer
'* options: GeneralOptions

'output:
'* string, compiled code

        '#since "options" come from a external source, it can be anything
        'options = prepareOptions(options)
        options = prepareOptions(options)

        'if options.storeMessages
        if options.storeMessages Then
        
            'logger.options.storeMessages = true
            logger.options.storeMessages = true
            'logger.getMessages //clear
            logger.getMessages()
        
        End if

        'var moduleNode = compileModule(filename, sourceLines, options)
        Dim moduleNode = compileModule(filename, sourceLines, options)

        'return moduleNode.getCompiledLines()
        return moduleNode.getCompiledLines()
    end function


'## Secondary Function: compileModule, returns Grammar.Module

    '    export function compileModule (filename, sourceLines, options:GeneralOptions) returns Grammar.Module
    ' ---------------------------
    function compileModule(filename, sourceLines, options)
'Compile a module from source in memory
'input:
'* filename (for error reporting),
'* sourceLines: LiteScript code: string array | large string | Buffer
'* options: GeneralOptions

'output:
'* moduleNode: Grammar.Module: module's code AST root node

        'default filename = 'unnamed'
        if ismissing(filename) then filename="unnamed": end if
        'options.mainModuleName = filename
        options.mainModuleName = filename

        '#since "options" come from a external source, it can be anything
        'options = prepareOptions(options)
        options = prepareOptions(options)

        'var project = new Project(options)
        Dim project = new Project(options)

        'var fileInfo = new Environment.FileInfo(filename)
        Dim fileInfo = new Environment.FileInfo(filename)

        'var moduleNode = project.createNewModule(fileInfo)
        Dim moduleNode = project.createNewModule(fileInfo)

'add to module list, so WalkAllNodes includes it

        'project.moduleCache.set fileInfo.filename, moduleNode
        project.moduleCache.set(fileInfo.filename, moduleNode)

'store result in memory

        'moduleNode.lexer.outCode.fileMode=false
        moduleNode.lexer.outCode.fileMode = false

'parse source lines

        'project.parseOnModule moduleNode, filename, sourceLines
        project.parseOnModule(moduleNode, filename, sourceLines)

        'if no project.options.single
        if Notproject.options.single Then
        
            'project.importDependencies moduleNode
            project.importDependencies(moduleNode)
        
        End if

'validate var & property names

        'if no project.options.skip
        if Notproject.options.skip Then
        

            'Validate.execute
            Validate.execute()
            'if logger.errorCount is 0, logger.info "Validation OK"
            if logger.errorCount = 0 Then logger.info("Validation OK")
        
        End if

'initialize out buffer & produce target code

        'logger.msg "Generating #{project.options.target}"
        logger.msg("Generating " + project.options.target)

        'project.produceModule moduleNode
        project.produceModule(moduleNode)
        '# the produced code will be at: moduleNode.lexer.out.getResult() :string array

        'if logger.errorCount isnt 0, logger.throwControlled "#{logger.errorCount} errors during compilation"
        if logger.errorCount <> 0 Then logger.throwControlled("" + logger.errorCount + " errors during compilation")

'text compiled result can be obtained with: moduleNode.lexer.out.getResult() :string array

        'return moduleNode
        return moduleNode
    end function

    '    helper function prepareOptions(options) returns GeneralOptions
    ' ---------------------------
    function prepareOptions(options)


        'if options isnt instance of GeneralOptions
        if Not (TypeOf options is GeneralOptions) Then
        

            'var generalOptions = new GeneralOptions
            Dim generalOptions = new GeneralOptions()
            'for each own property key,value in options
            var value=undefined;
            for ( var key in options)if (options.hasOwnProperty(key)){value=options[key];
                {
                'generalOptions.setProperty key, value
                generalOptions.setProperty(key, value)
                }
                
                }' end for each property
            'end for
            'options = generalOptions
            
            'options = generalOptions
            options = generalOptions
        
        End if


        'options.version = version
        options.version = version

        'return options
        return options
    end function


'Require Extensions
'------------------

'only if this compiler will generate js code

    '//ifdef TARGET_JS

'//This segment adds extensions to node's `require` function
'//for LiteScript files so that you can just `require` a .lite.md file
'//without having to compile it ahead of time

    '//helper function extension_LoadLS(requiringModule, filename)

'//Read the file, then compile using the `compile` function above.
'//Then use node's built-in compile function to compile the generated JavaScript.

        '//var options = new GeneralOptions
        '//options.verboseLevel = 0
        '//options.warningLevel = 0
        '//var content = compile(filename, Environment.loadFile(filename),options)
        '//declare valid requiringModule._compile:function
        '//requiringModule._compile(content, filename)


    '//export helper function registerRequireExtensions

'//Add the extension for all appropriate file types. Don't overwrite `.md` in case CoffeeScript or something else is already using it.

        '//declare valid require.extensions :array

        '//if require.extensions

          '//require.extensions['.lite.md'] = extension_LoadLS
          '//require.extensions['.lite'] = extension_LoadLS
          '//require.extensions['.md'] = extension_LoadLS

    '//endif

'##Helper module functions

    '    public function getMessages() returns string array
    ' ---------------------------
    function getMessages()
'if compile() throws, call getMessages() to retrieve compiler messages

        'return logger.getMessages();
        return logger.getMessages()
    end function
' -----------
' Module code
' -----------
end module
