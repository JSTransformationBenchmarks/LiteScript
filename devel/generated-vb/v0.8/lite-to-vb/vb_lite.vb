'Generated by LiteScript compiler v0.8.9, source: vb_lite.lite.md
' -----------
Module vb_lite
' -----------
'This is the command line interface to LiteScript Compiler,
'when it is generated as C-code standalone executable

    '#define C_LITE

    'shim import LiteCore, Map
    'var LiteCore = require('./interfaces/LiteCore.vb');
    'var Map = require('./interfaces/Map.vb');

    'import fs, path
    'var fs = require('fs');
    'var path = require('path');

    'import color, ControlledError
    'var color = require('./lib/color.vb');
    'var ControlledError = require('./lib/ControlledError.vb');
    'import OptionsParser
    'var OptionsParser = require('./lib/OptionsParser.vb');

    'import GeneralOptions, Compiler, ASTBase
    'var GeneralOptions = require('./lib/GeneralOptions.vb');
    'var Compiler = require('./Compiler.vb');
    'var ASTBase = require('./ASTBase.vb');

    'var
        'VERSION = '0.8.9'
        'BUILD_DATE = 'Tue Apr 07 2015 12:53:32 GMT-0300 (ART)'

'## module vars

    'var options = new GeneralOptions()
    Dim VERSION = "0.8.9", BUILD_DATE = "Tue Apr 07 2015 12:53:32 GMT-0300 (ART)"

'## module vars

    'var options = new GeneralOptions()
    Dim options = new GeneralOptions()

    'var exeName = options.target is 'c'? 'litecc' else 'litec'
    Dim exeName = options.target = "c" ? "litecc" : "litec"

    'var usage = "\n    Usage: " + exeName + " main.lite.md [options]\n\n    options are:\n    -o dir           output dir. Default is '" + options.outDir + "'\n    -v, -verbose     verbose level, default is " + options.verboseLevel + " (0-3)\n    -w, -warning     warning level, default is " + options.warningLevel + " (0-1)\n    -c, -comment     comment level on generated files, default is " + options.comments + " (0-2)\n\n    -h, -help        print this help\n    -version         print LiteScript version & exit\n\n    Advanced options:\n    -D FOO -D BAR    #define preprocessor names (#ifdef FOO/#ifndef BAR)\n    -nm, -nomap      do not generate sourcemap\n    -d, -debug       enable full compiler debug log file at 'out/debug.logger'\n    -perf            0..2: show performance timers\n"
    Dim usage = "\n    Usage: " + exeName + " main.lite.md [options]\n\n    options are:\n    -o dir           output dir. Default is '" + options.outDir + "'\n    -v, -verbose     verbose level, default is " + options.verboseLevel + " (0-3)\n    -w, -warning     warning level, default is " + options.warningLevel + " (0-1)\n    -c, -comment     comment level on generated files, default is " + options.comments + " (0-2)\n\n    -h, -help        print this help\n    -version         print LiteScript version & exit\n\n    Advanced options:\n    -D FOO -D BAR    #define preprocessor names (#ifdef FOO/#ifndef BAR)\n    -nm, -nomap      do not generate sourcemap\n    -d, -debug       enable full compiler debug log file at 'out/debug.logger'\n    -perf            0..2: show performance timers\n"

'Get & parse command line arguments

    'var args = new OptionsParser(process.argv)
    Dim args = new OptionsParser(process.argv)

'Check options

    'var optValue
    Dim optValue = Nothing


    '    function startCompilation
    ' ---------------------------
    function startCompilation()
     try 

        'Compiler.compileProject(options);
        Compiler.compileProject(options)

'Compile Exception handler

        'Exception err
        
        Catch err

            'if err instance of ControlledError
            if TypeOf err is ControlledError Then
            
                'console.error color.red, err.message, color.normal
                console.error(color.red, err.message, color.normal)
                'process.exit 1
                process.exit(1)
            
            'if err instance of ControlledError
            
            elseif err.code = "EISDIR" Then
            
                'console.error '#{color.red}ERROR: "#{options.mainModuleName}" is a directory#{color.normal}'
                console.error("" + color.red + "ERROR: "" + options.mainModuleName + "" is a directory" + color.normal)
                'console.error 'Please specify a *file* as the main module to compile'
                console.error("Please specify a *file* as the main module to compile")
                'process.exit 2
                process.exit(2)
            
            'else if err.code is 'EISDIR'
            
            else
            
                'console.error 'UNCONTROLLED ERROR:'
                console.error("UNCONTROLLED ERROR:")
                'console.error err
                console.error(err)
                'console.error 'stack:',err.stack
                console.error("stack:", err.stack)
                'process.exit 3
                process.exit(3)
            
            End if
            End if
            
        
    end function
' -----------
' Module code
' -----------

'Check for -version

    'if args.option('vers','version')
    if args.option("vers", "version") Then
    
        'print VERSION
        Debug.Print(VERSION)
        'process.exit 0
        process.exit(0)
    
    End if
    'with options
    With _with1

        'if args.valueFor('o') into optValue,            .outDir = path.resolve(optValue) //output dir
        if Assign(optValue,args.valueFor("o")) Then _with1.outDir = path.resolve(optValue)
        'if args.valueFor('v',"verbose") into optValue,  .verboseLevel = parseInt(optValue)
        if Assign(optValue,args.valueFor("v", "verbose")) Then _with1.verboseLevel = parseInt(optValue)
        'if args.valueFor('w',"warning") into optValue,  .warningLevel = parseInt(optValue)
        if Assign(optValue,args.valueFor("w", "warning")) Then _with1.warningLevel = parseInt(optValue)
        'if args.valueFor('c',"comment") into optValue,  .comments = parseInt(optValue)
        if Assign(optValue,args.valueFor("c", "comment")) Then _with1.comments = parseInt(optValue)
        'if args.valueFor('perf') into optValue,         .perf = parseInt(optValue)
        if Assign(optValue,args.valueFor("perf")) Then _with1.perf = parseInt(optValue)

        'if args.option('d',"debug"),     .debugEnabled = true
        if args.option("d", "debug") Then _with1.debugEnabled = true
        'if args.option('noval'),         .skip = true
        if args.option("noval") Then _with1.skip = true
        'if args.option('nm',"nomap"),    .generateSourceMap = false // do not generate sourcemap
        if args.option("nm", "nomap") Then _with1.generateSourceMap = false
        'if args.option('s',"single"),    .single = true // single file- do not follow imports
        if args.option("s", "single") Then _with1.single = true
        'if args.option('b',"browser"),   .browser = true // single file- do not follow imports
        if args.option("b", "browser") Then _with1.browser = true
        'if args.option('es6',"harmony"), .es6 = true // single file- do not follow imports
        if args.option("es6", "harmony") Then _with1.es6 = true
    end with

    'if options.verboseLevel>1
    if options.verboseLevel > 1 Then
    
        'print JSON.stringify(process.argv)
        Debug.Print(JSON.stringify(process.argv))
    
    End if

    'if options.verboseLevel
    if options.verboseLevel Then
    
        'print "LiteScript compile-to-#{options.target} v#{VERSION} #{BUILD_DATE} (standalone executable)"
        Debug.Print("LiteScript compile-to-" + options.target + " v" + VERSION + " " + BUILD_DATE + " (standalone executable)")
    
    End if

'Check for -help

    'if args.option('h','help')
    if args.option("h", "help") Then
    
        'print usage
        Debug.Print(usage)
        'process.exit 0
        process.exit(0)
    
    End if


    'while args.valueFor('D') into var newDef
    Dim newDef as Object
    Do whileAssign(newDef,args.valueFor("D"))
    
        'options.defines.push newDef
        options.defines.push(newDef)
    
    Loop

    'while args.valueFor('i') into var includeDir
    Dim includeDir as Object
    Do whileAssign(includeDir,args.valueFor("i"))
    
        'options.includeDirs.push includeDir
        options.includeDirs.push(includeDir)
    
    Loop

'get mainModuleName

    'if no args.items.length
    if Notargs.items.length Then
    
        'console.error "Missing file.lite.md to compile\nlitec -h for help"
        console.error("Missing file.lite.md to compile\nlitec -h for help")
        'process.exit
        process.exit()
    
    End if

    '//only main module name should be left
    'if args.items.length>1
    if args.items.length > 1 Then
    
        'print "Invalid arguments:", args.items.join(' ')
        Debug.Print("Invalid arguments:", args.items.join(" "))
        'print "#{exeName} -h for help"
        Debug.Print("" + exeName + " -h for help")
        'process.exit 2
        process.exit(2)
    
    End if

    'options.mainModuleName = args.items[0]
    options.mainModuleName = args.items(0)

'show options

    '//console.log(process.cwd());
    'if options.verboseLevel > 1
    if options.verboseLevel > 1 Then
    
        'print "compiler options: " + (JSON.stringify(options)) + "\ncwd: " + (process.cwd()) + "\ncompile: " + options.mainModuleName
        Debug.Print("compiler options: " + (JSON.stringify(options)) + "\ncwd: " + (process.cwd()) + "\ncompile: " + options.mainModuleName)
    
    End if

    'if options.debugEnabled, print color.yellow,"GENERATING COMPILER DEBUG AT out/debug.logger",color.normal
    if options.debugEnabled Then Debug.Print(color.yellow, "GENERATING COMPILER DEBUG AT out/debug.logger", color.normal)

'launch project compilation

    'startCompilation
    startCompilation()
end module
