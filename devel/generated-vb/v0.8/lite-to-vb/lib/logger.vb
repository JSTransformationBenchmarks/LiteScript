'Generated by LiteScript compiler v0.8.9, source: lib/logger.lite.md
' -----------
Module logger
' -----------
'==============


'Dependencies:
'-------------

    'import color, ControlledError, GeneralOptions
    'var color = require('./color.vb');
    'var ControlledError = require('./ControlledError.vb');
    'var GeneralOptions = require('./GeneralOptions.vb');

    'import fs, mkPath
    'var fs = require('fs');
    'var mkPath = require('./mkPath.vb');

'## Main namespace

    'export only namespace logger
    Namespace logger
    

     '     properties

        'options: GeneralOptions
        'errorCount = 0
        'warningCount = 0

'if storeMessages, messages are pushed at messages[] instead of console.

        'storeMessages: boolean
        'messages: string Array = []

'Implementation
'---------------

     '     method init(options:GeneralOptions)
         Public Property options as GeneralOptions' mainType: GeneralOptions  
     
         Public Property errorCount as Object=0
         Public Property warningCount as Object=0
         Public Property storeMessages as Boolean' mainType: Boolean  
     
         Public Property messages as Array' mainType: Array  ' itemType: String
     =new ArrayList
     

'Implementation
'---------------

     '     method init(options:GeneralOptions)
     ' ---------------------------
     Public Function init (options)

        'logger.options = options
        logger.options = options

        'logger.errorCount = 0
        logger.errorCount = 0
        'logger.warningCount = 0
        logger.warningCount = 0

        'logger.storeMessages=false
        logger.storeMessages = false
        'logger.messages=[]
        logger.messages = new ArrayList
        
     end function


     '     method debug
     ' ---------------------------
     Public Function debug ()

        'if logger.options.debugEnabled
        if logger.options.debugEnabled Then
        
            'var args = arguments.toArray()
            Dim args = arguments.toArray()
            'console.error.apply undefined,args
            console.error.apply(undefined, args)
        
        End if
        
     end function

     '     method debugGroup
     ' ---------------------------
     Public Function debugGroup ()

        'if logger.options.debugEnabled
        if logger.options.debugEnabled Then
        
            'console.error.apply undefined,arguments
            console.error.apply(undefined, arguments)
            'console.group.apply undefined,arguments
            console.group.apply(undefined, arguments)
        
        End if
        
     end function

     '     method debugGroupEnd
     ' ---------------------------
     Public Function debugGroupEnd ()

        'if logger.options.debugEnabled
        if logger.options.debugEnabled Then
        
            'console.groupEnd
            console.groupEnd()
        
        End if
        
     end function

     '     method error
     ' ---------------------------
     Public Function error ()

'increment error count

        'logger.errorCount++
        logger.errorCount++
        'var args = arguments.toArray()
        Dim args = arguments.toArray()

'add "ERROR:", send to debug logger

        'args.unshift('ERROR:')
        args.unshift("ERROR:")
        'logger.debug.apply undefined,args
        logger.debug.apply(undefined, args)

'if messages should be stored...

        'if logger.storeMessages
        if logger.storeMessages Then
        
            'logger.messages.push args.join(" ")
            logger.messages.push(args.join(" "))
        
        'if logger.storeMessages
        
        else
        
            'args.unshift(color.red)
            args.unshift(color.red)
            'args.push(color.normal)
            args.push(color.normal)
            'console.error.apply undefined,args
            console.error.apply(undefined, args)
        
        End if
        
     end function


     '     method warning
     ' ---------------------------
     Public Function warning ()

        'logger.warningCount++
        logger.warningCount++
        'var args = arguments.toArray()
        Dim args = arguments.toArray()

        'args.unshift('WARNING:')
        args.unshift("WARNING:")
        'logger.debug.apply(undefined,args)
        logger.debug.apply(undefined, args)

        'if logger.options.warningLevel > 0
        if logger.options.warningLevel > 0 Then
        

'if messages should be stored...

            'if logger.storeMessages
            if logger.storeMessages Then
            
                'logger.messages.push args.join(" ")
                logger.messages.push(args.join(" "))
            
            'if logger.storeMessages
            
            else
            
                'args.unshift(color.yellow);
                args.unshift(color.yellow)
                'args.push(color.normal);
                args.push(color.normal)
                'console.error.apply(undefined,args);
                console.error.apply(undefined, args)
            
            End if
            
        
        End if
        
     end function

     '     method msg
     ' ---------------------------
     Public Function msg ()

        'var args = arguments.toArray()
        Dim args = arguments.toArray()

        'logger.debug.apply(undefined,args)
        logger.debug.apply(undefined, args)
        'if logger.options.verboseLevel >= 1
        if logger.options.verboseLevel >= 1 Then
        

'if messages should be stored...

            'if logger.storeMessages
            if logger.storeMessages Then
            
                'logger.messages.push args.join(" ")
                logger.messages.push(args.join(" "))
            
            'if logger.storeMessages
            
            else
            
                'console.log.apply(undefined,args)
                console.log.apply(undefined, args)
            
            End if
            
        
        End if
        
     end function


     '     method info
     ' ---------------------------
     Public Function info ()

        'var args = arguments.toArray()
        Dim args = arguments.toArray()
        'if logger.options.verboseLevel >= 2
        if logger.options.verboseLevel >= 2 Then
        
            'logger.msg.apply(undefined,args)
            logger.msg.apply(undefined, args)
        
        End if
        
     end function

     '     method extra
     ' ---------------------------
     Public Function extra ()

        'var args = arguments.toArray()
        Dim args = arguments.toArray()
        'if logger.options.verboseLevel >= 3
        if logger.options.verboseLevel >= 3 Then
        
            'logger.msg.apply(undefined,args)
            logger.msg.apply(undefined, args)
        
        End if
        
     end function


     '     method getMessages
     ' ---------------------------
     Public Function getMessages ()
'get & clear

        'var result = logger.messages
        Dim result = logger.messages
        'logger.messages =[]
        logger.messages = new ArrayList
        'return result
        return result
     end function


     '     method throwControlled(msg)
     ' ---------------------------
     Public Function throwControlled (msg)
'Throws Error, but with a "controlled" flag set,
'to differentiate from unexpected compiler errors

        'logger.debug "Controlled ERROR:", msg
        logger.debug("Controlled ERROR:", msg)
        'throw new ControlledError(msg)
        Throw new ControlledError(msg)
     end function
     
' -----------
' Module code
' -----------
end module
